{
    "sourceFile": "src/components/features/Complaints/ComplaintDashboard.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 41,
            "patches": [
                {
                    "date": 1748019505546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748019512315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,679 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n+        {/* Notifications Panel (Left Sidebar on LG+) */}\n+        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n+          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n+            <div className=\"p-4 border-b bg-white\">\n+              <div className=\"flex items-center justify-between\">\n+                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n+                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n+                  Activity Feed\n+                </h3>\n+                {unreadNotifications > 0 && (\n+                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n+                )}\n+              </div>\n+            </div>\n+            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n+              {notifications.length === 0 && (\n+                <div className=\"p-6 text-center text-gray-500\">\n+                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n+                  <p className=\"font-medium\">All caught up!</p>\n+                  <p className=\"text-sm\">No new notifications.</p>\n+                </div>\n+              )}\n+              {notifications.map((notification) => (\n+                <div\n+                  key={notification.id}\n+                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n+                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n+                  }`}\n+                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n+                >\n+                  <div className=\"flex items-start gap-3\">\n+                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n+                    <div className=\"flex-1\">\n+                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n+                        {notification.message}\n+                      </p>\n+                      <p className=\"text-xs text-gray-500 mt-1\">\n+                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n+                      </p>\n+                    </div>\n+                    {!notification.read && (\n+                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n+                    )}\n+                  </div>\n+                </div>\n+              ))}\n+            </div>\n+            {notifications.length > 0 && unreadNotifications > 0 && (\n+              <div className=\"p-3 border-t bg-white\">\n+                <Button\n+                  variant=\"outline\"\n+                  size=\"sm\"\n+                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n+                  onClick={markAllNotificationsAsRead}\n+                  disabled={unreadNotifications === 0}\n+                >\n+                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n+                </Button>\n+              </div>\n+            )}\n+          </Card>\n+        </div>\n+\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      {isFormOpen && (\n+        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n+          <div className=\"absolute inset-0 bg-black/50\" onClick={() => setIsFormOpen(false)} />\n+          <div className=\"relative bg-white p-6 rounded-lg shadow-xl w-full max-w-[600px] max-h-[90vh] overflow-y-auto\">\n+            <button\n+              onClick={() => setIsFormOpen(false)}\n+              className=\"absolute top-4 right-4 text-gray-500 hover:text-gray-700\"\n+            >\n+              <X className=\"h-5 w-5\" />\n+            </button>\n+            <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">Submit a New Complaint</h2>\n+        <ComplaintForm \n+          onClose={() => setIsFormOpen(false)}\n+              onSubmitSuccess={handleComplaintSubmit}\n+            />\n+          </div>\n+        </div>\n+      )}\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748019691288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -610,10 +610,10 @@\n             </button>\n             <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">Submit a New Complaint</h2>\n         <ComplaintForm \n           onClose={() => setIsFormOpen(false)}\n-              onSubmitSuccess={handleComplaintSubmit}\n-            />\n+          onSubmit={handleComplaintSubmit}\n+        />\n           </div>\n         </div>\n       )}\n       <style jsx global>{`\n@@ -675,685 +675,5 @@\n     </DropdownMenuContent>\n   </DropdownMenu>\n );\n \n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import { ID } from 'appwrite';\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n-          </div>\n-        </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n-        {/* Notifications Panel (Left Sidebar on LG+) */}\n-        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n-          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n-            <div className=\"p-4 border-b bg-white\">\n-              <div className=\"flex items-center justify-between\">\n-                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n-                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n-                  Activity Feed\n-                </h3>\n-                {unreadNotifications > 0 && (\n-                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n-                )}\n-              </div>\n-            </div>\n-            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n-              {notifications.length === 0 && (\n-                <div className=\"p-6 text-center text-gray-500\">\n-                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n-                  <p className=\"font-medium\">All caught up!</p>\n-                  <p className=\"text-sm\">No new notifications.</p>\n-                </div>\n-              )}\n-              {notifications.map((notification) => (\n-                <div\n-                  key={notification.id}\n-                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n-                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n-                  }`}\n-                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n-                >\n-                  <div className=\"flex items-start gap-3\">\n-                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n-                    <div className=\"flex-1\">\n-                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n-                        {notification.message}\n-                      </p>\n-                      <p className=\"text-xs text-gray-500 mt-1\">\n-                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n-                      </p>\n-                    </div>\n-                    {!notification.read && (\n-                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n-                    )}\n-                  </div>\n-                </div>\n-              ))}\n-            </div>\n-            {notifications.length > 0 && unreadNotifications > 0 && (\n-              <div className=\"p-3 border-t bg-white\">\n-                <Button\n-                  variant=\"outline\"\n-                  size=\"sm\"\n-                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n-                  onClick={markAllNotificationsAsRead}\n-                  disabled={unreadNotifications === 0}\n-                >\n-                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n-                </Button>\n-              </div>\n-            )}\n-          </Card>\n-        </div>\n-\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      {isFormOpen && (\n-        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n-          <div className=\"absolute inset-0 bg-black/50\" onClick={() => setIsFormOpen(false)} />\n-          <div className=\"relative bg-white p-6 rounded-lg shadow-xl w-full max-w-[600px] max-h-[90vh] overflow-y-auto\">\n-            <button\n-              onClick={() => setIsFormOpen(false)}\n-              className=\"absolute top-4 right-4 text-gray-500 hover:text-gray-700\"\n-            >\n-              <X className=\"h-5 w-5\" />\n-            </button>\n-            <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">Submit a New Complaint</h2>\n-        <ComplaintForm \n-          onClose={() => setIsFormOpen(false)}\n-              onSubmitSuccess={handleComplaintSubmit}\n-            />\n-          </div>\n-        </div>\n-      )}\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748019815400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,678 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n+        {/* Notifications Panel (Left Sidebar on LG+) */}\n+        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n+          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n+            <div className=\"p-4 border-b bg-white\">\n+              <div className=\"flex items-center justify-between\">\n+                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n+                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n+                  Activity Feed\n+                </h3>\n+                {unreadNotifications > 0 && (\n+                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n+                )}\n+              </div>\n+            </div>\n+            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n+              {notifications.length === 0 && (\n+                <div className=\"p-6 text-center text-gray-500\">\n+                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n+                  <p className=\"font-medium\">All caught up!</p>\n+                  <p className=\"text-sm\">No new notifications.</p>\n+                </div>\n+              )}\n+              {notifications.map((notification) => (\n+                <div\n+                  key={notification.id}\n+                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n+                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n+                  }`}\n+                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n+                >\n+                  <div className=\"flex items-start gap-3\">\n+                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n+                    <div className=\"flex-1\">\n+                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n+                        {notification.message}\n+                      </p>\n+                      <p className=\"text-xs text-gray-500 mt-1\">\n+                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n+                      </p>\n+                    </div>\n+                    {!notification.read && (\n+                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n+                    )}\n+                  </div>\n+                </div>\n+              ))}\n+            </div>\n+            {notifications.length > 0 && unreadNotifications > 0 && (\n+              <div className=\"p-3 border-t bg-white\">\n+                <Button\n+                  variant=\"outline\"\n+                  size=\"sm\"\n+                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n+                  onClick={markAllNotificationsAsRead}\n+                  disabled={unreadNotifications === 0}\n+                >\n+                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n+                </Button>\n+              </div>\n+            )}\n+          </Card>\n+        </div>\n+\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Dialog */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+        <DialogContent className=\"max-w-[600px] max-h-[90vh] overflow-y-auto\">\n+          <DialogHeader>\n+            <DialogTitle>Submit a New Complaint</DialogTitle>\n+          </DialogHeader>\n+          <ComplaintForm \n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+        </DialogContent>\n+      </Dialog>\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748019879189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -602,20 +602,8 @@\n           </div>\n         </div>\n       </div>\n \n-      {/* Complaint Form Dialog */}\n-      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n-        <DialogContent className=\"max-w-[600px] max-h-[90vh] overflow-y-auto\">\n-          <DialogHeader>\n-            <DialogTitle>Submit a New Complaint</DialogTitle>\n-          </DialogHeader>\n-          <ComplaintForm \n-            onClose={() => setIsFormOpen(false)}\n-            onSubmit={handleComplaintSubmit}\n-          />\n-        </DialogContent>\n-      </Dialog>\n       <style jsx global>{`\n         .nice-scrollbar::-webkit-scrollbar {\n           width: 6px;\n         }\n@@ -674,684 +662,5 @@\n     </DropdownMenuContent>\n   </DropdownMenu>\n );\n \n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n-          </div>\n-        </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n-        {/* Notifications Panel (Left Sidebar on LG+) */}\n-        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n-          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n-            <div className=\"p-4 border-b bg-white\">\n-              <div className=\"flex items-center justify-between\">\n-                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n-                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n-                  Activity Feed\n-                </h3>\n-                {unreadNotifications > 0 && (\n-                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n-                )}\n-              </div>\n-            </div>\n-            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n-              {notifications.length === 0 && (\n-                <div className=\"p-6 text-center text-gray-500\">\n-                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n-                  <p className=\"font-medium\">All caught up!</p>\n-                  <p className=\"text-sm\">No new notifications.</p>\n-                </div>\n-              )}\n-              {notifications.map((notification) => (\n-                <div\n-                  key={notification.id}\n-                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n-                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n-                  }`}\n-                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n-                >\n-                  <div className=\"flex items-start gap-3\">\n-                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n-                    <div className=\"flex-1\">\n-                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n-                        {notification.message}\n-                      </p>\n-                      <p className=\"text-xs text-gray-500 mt-1\">\n-                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n-                      </p>\n-                    </div>\n-                    {!notification.read && (\n-                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n-                    )}\n-                  </div>\n-                </div>\n-              ))}\n-            </div>\n-            {notifications.length > 0 && unreadNotifications > 0 && (\n-              <div className=\"p-3 border-t bg-white\">\n-                <Button\n-                  variant=\"outline\"\n-                  size=\"sm\"\n-                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n-                  onClick={markAllNotificationsAsRead}\n-                  disabled={unreadNotifications === 0}\n-                >\n-                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n-                </Button>\n-              </div>\n-            )}\n-          </Card>\n-        </div>\n-\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      {isFormOpen && (\n-        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n-          <div className=\"absolute inset-0 bg-black/50\" onClick={() => setIsFormOpen(false)} />\n-          <div className=\"relative bg-white p-6 rounded-lg shadow-xl w-full max-w-[600px] max-h-[90vh] overflow-y-auto\">\n-            <button\n-              onClick={() => setIsFormOpen(false)}\n-              className=\"absolute top-4 right-4 text-gray-500 hover:text-gray-700\"\n-            >\n-              <X className=\"h-5 w-5\" />\n-            </button>\n-            <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">Submit a New Complaint</h2>\n-        <ComplaintForm \n-          onClose={() => setIsFormOpen(false)}\n-          onSubmit={handleComplaintSubmit}\n-        />\n-          </div>\n-        </div>\n-      )}\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748019889202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -602,8 +602,20 @@\n           </div>\n         </div>\n       </div>\n \n+      {/* Complaint Form Dialog */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+        <DialogContent className=\"max-w-[600px] max-h-[90vh] overflow-y-auto\">\n+          <DialogHeader>\n+            <DialogTitle>Submit a New Complaint</DialogTitle>\n+          </DialogHeader>\n+          <ComplaintForm \n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+        </DialogContent>\n+      </Dialog>\n       <style jsx global>{`\n         .nice-scrollbar::-webkit-scrollbar {\n           width: 6px;\n         }\n"
                },
                {
                    "date": 1748019936293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -602,20 +602,15 @@\n           </div>\n         </div>\n       </div>\n \n-      {/* Complaint Form Dialog */}\n-      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n-        <DialogContent className=\"max-w-[600px] max-h-[90vh] overflow-y-auto\">\n-          <DialogHeader>\n-            <DialogTitle>Submit a New Complaint</DialogTitle>\n-          </DialogHeader>\n-          <ComplaintForm \n-            onClose={() => setIsFormOpen(false)}\n-            onSubmit={handleComplaintSubmit}\n-          />\n-        </DialogContent>\n-      </Dialog>\n+      {/* Complaint Form */}\n+      {isFormOpen && (\n+        <ComplaintForm \n+          onClose={() => setIsFormOpen(false)}\n+          onSubmit={handleComplaintSubmit}\n+        />\n+      )}\n       <style jsx global>{`\n         .nice-scrollbar::-webkit-scrollbar {\n           width: 6px;\n         }\n"
                },
                {
                    "date": 1748020008548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,678 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n+        {/* Notifications Panel (Left Sidebar on LG+) */}\n+        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n+          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n+            <div className=\"p-4 border-b bg-white\">\n+              <div className=\"flex items-center justify-between\">\n+                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n+                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n+                  Activity Feed\n+                </h3>\n+                {unreadNotifications > 0 && (\n+                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n+                )}\n+              </div>\n+            </div>\n+            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n+              {notifications.length === 0 && (\n+                <div className=\"p-6 text-center text-gray-500\">\n+                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n+                  <p className=\"font-medium\">All caught up!</p>\n+                  <p className=\"text-sm\">No new notifications.</p>\n+                </div>\n+              )}\n+              {notifications.map((notification) => (\n+                <div\n+                  key={notification.id}\n+                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n+                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n+                  }`}\n+                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n+                >\n+                  <div className=\"flex items-start gap-3\">\n+                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n+                    <div className=\"flex-1\">\n+                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n+                        {notification.message}\n+                      </p>\n+                      <p className=\"text-xs text-gray-500 mt-1\">\n+                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n+                      </p>\n+                    </div>\n+                    {!notification.read && (\n+                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n+                    )}\n+                  </div>\n+                </div>\n+              ))}\n+            </div>\n+            {notifications.length > 0 && unreadNotifications > 0 && (\n+              <div className=\"p-3 border-t bg-white\">\n+                <Button\n+                  variant=\"outline\"\n+                  size=\"sm\"\n+                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n+                  onClick={markAllNotificationsAsRead}\n+                  disabled={unreadNotifications === 0}\n+                >\n+                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n+                </Button>\n+              </div>\n+            )}\n+          </Card>\n+        </div>\n+\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form */}\n+      {isFormOpen && (\n+        <ComplaintForm \n+          onClose={() => setIsFormOpen(false)}\n+          onSubmit={handleComplaintSubmit}\n+        />\n+      )}\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748020085109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -607,687 +607,19 @@\n           </div>\n         </div>\n       </div>\n \n-      {/* Complaint Form */}\n+      {/* Complaint Form Modal */}\n       {isFormOpen && (\n-        <ComplaintForm \n-          onClose={() => setIsFormOpen(false)}\n-          onSubmit={handleComplaintSubmit}\n-        />\n-      )}\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogHeader,\n-  DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n+          <div className=\"absolute inset-0 bg-black/50\" onClick={() => setIsFormOpen(false)} />\n+          <div className=\"relative bg-white rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto m-4\">\n+            <ComplaintForm \n+              onClose={() => setIsFormOpen(false)}\n+              onSubmit={handleComplaintSubmit}\n+            />\n           </div>\n         </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n-        {/* Notifications Panel (Left Sidebar on LG+) */}\n-        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n-          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n-            <div className=\"p-4 border-b bg-white\">\n-              <div className=\"flex items-center justify-between\">\n-                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n-                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n-                  Activity Feed\n-                </h3>\n-                {unreadNotifications > 0 && (\n-                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n-                )}\n-              </div>\n-            </div>\n-            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n-              {notifications.length === 0 && (\n-                <div className=\"p-6 text-center text-gray-500\">\n-                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n-                  <p className=\"font-medium\">All caught up!</p>\n-                  <p className=\"text-sm\">No new notifications.</p>\n-                </div>\n-              )}\n-              {notifications.map((notification) => (\n-                <div\n-                  key={notification.id}\n-                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n-                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n-                  }`}\n-                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n-                >\n-                  <div className=\"flex items-start gap-3\">\n-                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n-                    <div className=\"flex-1\">\n-                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n-                        {notification.message}\n-                      </p>\n-                      <p className=\"text-xs text-gray-500 mt-1\">\n-                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n-                      </p>\n-                    </div>\n-                    {!notification.read && (\n-                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n-                    )}\n-                  </div>\n-                </div>\n-              ))}\n-            </div>\n-            {notifications.length > 0 && unreadNotifications > 0 && (\n-              <div className=\"p-3 border-t bg-white\">\n-                <Button\n-                  variant=\"outline\"\n-                  size=\"sm\"\n-                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n-                  onClick={markAllNotificationsAsRead}\n-                  disabled={unreadNotifications === 0}\n-                >\n-                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n-                </Button>\n-              </div>\n-            )}\n-          </Card>\n-        </div>\n-\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form */}\n-      {isFormOpen && (\n-        <ComplaintForm \n-          onClose={() => setIsFormOpen(false)}\n-          onSubmit={handleComplaintSubmit}\n-        />\n       )}\n       <style jsx global>{`\n         .nice-scrollbar::-webkit-scrollbar {\n           width: 6px;\n"
                },
                {
                    "date": 1748020203515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,680 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n+        {/* Notifications Panel (Left Sidebar on LG+) */}\n+        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n+          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n+            <div className=\"p-4 border-b bg-white\">\n+              <div className=\"flex items-center justify-between\">\n+                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n+                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n+                  Activity Feed\n+                </h3>\n+                {unreadNotifications > 0 && (\n+                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n+                )}\n+              </div>\n+            </div>\n+            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n+              {notifications.length === 0 && (\n+                <div className=\"p-6 text-center text-gray-500\">\n+                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n+                  <p className=\"font-medium\">All caught up!</p>\n+                  <p className=\"text-sm\">No new notifications.</p>\n+                </div>\n+              )}\n+              {notifications.map((notification) => (\n+                <div\n+                  key={notification.id}\n+                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n+                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n+                  }`}\n+                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n+                >\n+                  <div className=\"flex items-start gap-3\">\n+                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n+                    <div className=\"flex-1\">\n+                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n+                        {notification.message}\n+                      </p>\n+                      <p className=\"text-xs text-gray-500 mt-1\">\n+                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n+                      </p>\n+                    </div>\n+                    {!notification.read && (\n+                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n+                    )}\n+                  </div>\n+                </div>\n+              ))}\n+            </div>\n+            {notifications.length > 0 && unreadNotifications > 0 && (\n+              <div className=\"p-3 border-t bg-white\">\n+                <Button\n+                  variant=\"outline\"\n+                  size=\"sm\"\n+                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n+                  onClick={markAllNotificationsAsRead}\n+                  disabled={unreadNotifications === 0}\n+                >\n+                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n+                </Button>\n+              </div>\n+            )}\n+          </Card>\n+        </div>\n+\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n+          <ComplaintForm \n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+        </DialogContent>\n+      </Dialog>\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748020427196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,684 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      <div className=\"container mx-auto mb-6\">\n+        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Complaint Dashboard</h1>\n+        <p className=\"text-gray-600\">Manage and track your complaints in one place</p>\n+      </div>\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n+        {/* Notifications Panel (Left Sidebar on LG+) */}\n+        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n+          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n+            <div className=\"p-4 border-b bg-white\">\n+              <div className=\"flex items-center justify-between\">\n+                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n+                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n+                  Complaint Notifications\n+                </h3>\n+                {unreadNotifications > 0 && (\n+                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New Updates</Badge>\n+                )}\n+              </div>\n+            </div>\n+            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n+              {notifications.length === 0 && (\n+                <div className=\"p-6 text-center text-gray-500\">\n+                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n+                  <p className=\"font-medium\">No Active Complaints</p>\n+                  <p className=\"text-sm\">Your complaint notifications will appear here</p>\n+                </div>\n+              )}\n+              {notifications.map((notification) => (\n+                <div\n+                  key={notification.id}\n+                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n+                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n+                  }`}\n+                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n+                >\n+                  <div className=\"flex items-start gap-3\">\n+                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n+                    <div className=\"flex-1\">\n+                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n+                        {notification.message}\n+                      </p>\n+                      <p className=\"text-xs text-gray-500 mt-1\">\n+                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n+                      </p>\n+                    </div>\n+                    {!notification.read && (\n+                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n+                    )}\n+                  </div>\n+                </div>\n+              ))}\n+            </div>\n+            {notifications.length > 0 && unreadNotifications > 0 && (\n+              <div className=\"p-3 border-t bg-white\">\n+                <Button\n+                  variant=\"outline\"\n+                  size=\"sm\"\n+                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n+                  onClick={markAllNotificationsAsRead}\n+                  disabled={unreadNotifications === 0}\n+                >\n+                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n+                </Button>\n+              </div>\n+            )}\n+          </Card>\n+        </div>\n+\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n+          <ComplaintForm \n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+        </DialogContent>\n+      </Dialog>\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748020539910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -409,72 +409,9 @@\n         </div>\n       </header>\n       \n       {/* Main Content Grid */}\n-      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n-        {/* Notifications Panel (Left Sidebar on LG+) */}\n-        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n-          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n-            <div className=\"p-4 border-b bg-white\">\n-              <div className=\"flex items-center justify-between\">\n-                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n-                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n-                  Complaint Notifications\n-                </h3>\n-                {unreadNotifications > 0 && (\n-                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New Updates</Badge>\n-                )}\n-              </div>\n-            </div>\n-            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n-              {notifications.length === 0 && (\n-                <div className=\"p-6 text-center text-gray-500\">\n-                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n-                  <p className=\"font-medium\">No Active Complaints</p>\n-                  <p className=\"text-sm\">Your complaint notifications will appear here</p>\n-                </div>\n-              )}\n-              {notifications.map((notification) => (\n-                <div\n-                  key={notification.id}\n-                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n-                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n-                  }`}\n-                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n-                >\n-                  <div className=\"flex items-start gap-3\">\n-                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n-                    <div className=\"flex-1\">\n-                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n-                        {notification.message}\n-                      </p>\n-                      <p className=\"text-xs text-gray-500 mt-1\">\n-                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n-                      </p>\n-                    </div>\n-                    {!notification.read && (\n-                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n-                    )}\n-                  </div>\n-                </div>\n-              ))}\n-            </div>\n-            {notifications.length > 0 && unreadNotifications > 0 && (\n-              <div className=\"p-3 border-t bg-white\">\n-                <Button\n-                  variant=\"outline\"\n-                  size=\"sm\"\n-                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n-                  onClick={markAllNotificationsAsRead}\n-                  disabled={unreadNotifications === 0}\n-                >\n-                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n-                </Button>\n-              </div>\n-            )}\n-          </Card>\n-        </div>\n-\n+      <div className=\"container mx-auto\">\n         {/* Main Content Area (Complaints, Stats) */}\n         <div className=\"space-y-6\">\n           {/* Statistics Grid */}\n           <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n@@ -680,1368 +617,5 @@\n     </DropdownMenuContent>\n   </DropdownMenu>\n );\n \n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogHeader,\n-  DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-    // Remove any existing dialog with the same ID\n-    const existingDialog = document.querySelector('[role=\"dialog\"]');\n-    if (existingDialog) {\n-      existingDialog.remove();\n-    }\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n-          </div>\n-        </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n-        {/* Notifications Panel (Left Sidebar on LG+) */}\n-        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n-          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n-            <div className=\"p-4 border-b bg-white\">\n-              <div className=\"flex items-center justify-between\">\n-                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n-                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n-                  Activity Feed\n-                </h3>\n-                {unreadNotifications > 0 && (\n-                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n-                )}\n-              </div>\n-            </div>\n-            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n-              {notifications.length === 0 && (\n-                <div className=\"p-6 text-center text-gray-500\">\n-                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n-                  <p className=\"font-medium\">All caught up!</p>\n-                  <p className=\"text-sm\">No new notifications.</p>\n-                </div>\n-              )}\n-              {notifications.map((notification) => (\n-                <div\n-                  key={notification.id}\n-                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n-                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n-                  }`}\n-                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n-                >\n-                  <div className=\"flex items-start gap-3\">\n-                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n-                    <div className=\"flex-1\">\n-                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n-                        {notification.message}\n-                      </p>\n-                      <p className=\"text-xs text-gray-500 mt-1\">\n-                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n-                      </p>\n-                    </div>\n-                    {!notification.read && (\n-                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n-                    )}\n-                  </div>\n-                </div>\n-              ))}\n-            </div>\n-            {notifications.length > 0 && unreadNotifications > 0 && (\n-              <div className=\"p-3 border-t bg-white\">\n-                <Button\n-                  variant=\"outline\"\n-                  size=\"sm\"\n-                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n-                  onClick={markAllNotificationsAsRead}\n-                  disabled={unreadNotifications === 0}\n-                >\n-                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n-                </Button>\n-              </div>\n-            )}\n-          </Card>\n-        </div>\n-\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n-        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n-          <ComplaintForm \n-            onClose={() => setIsFormOpen(false)}\n-            onSubmit={handleComplaintSubmit}\n-          />\n-        </DialogContent>\n-      </Dialog>\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogHeader,\n-  DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-    // Remove any existing dialog with the same ID\n-    const existingDialog = document.querySelector('[role=\"dialog\"]');\n-    if (existingDialog) {\n-      existingDialog.remove();\n-    }\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n-          </div>\n-        </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n-        {/* Notifications Panel (Left Sidebar on LG+) */}\n-        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n-          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n-            <div className=\"p-4 border-b bg-white\">\n-              <div className=\"flex items-center justify-between\">\n-                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n-                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n-                  Activity Feed\n-                </h3>\n-                {unreadNotifications > 0 && (\n-                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n-                )}\n-              </div>\n-            </div>\n-            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n-              {notifications.length === 0 && (\n-                <div className=\"p-6 text-center text-gray-500\">\n-                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n-                  <p className=\"font-medium\">All caught up!</p>\n-                  <p className=\"text-sm\">No new notifications.</p>\n-                </div>\n-              )}\n-              {notifications.map((notification) => (\n-                <div\n-                  key={notification.id}\n-                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n-                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n-                  }`}\n-                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n-                >\n-                  <div className=\"flex items-start gap-3\">\n-                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n-                    <div className=\"flex-1\">\n-                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n-                        {notification.message}\n-                      </p>\n-                      <p className=\"text-xs text-gray-500 mt-1\">\n-                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n-                      </p>\n-                    </div>\n-                    {!notification.read && (\n-                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n-                    )}\n-                  </div>\n-                </div>\n-              ))}\n-            </div>\n-            {notifications.length > 0 && unreadNotifications > 0 && (\n-              <div className=\"p-3 border-t bg-white\">\n-                <Button\n-                  variant=\"outline\"\n-                  size=\"sm\"\n-                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n-                  onClick={markAllNotificationsAsRead}\n-                  disabled={unreadNotifications === 0}\n-                >\n-                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n-                </Button>\n-              </div>\n-            )}\n-          </Card>\n-        </div>\n-\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      {isFormOpen && (\n-        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n-          <div className=\"absolute inset-0 bg-black/50\" onClick={() => setIsFormOpen(false)} />\n-          <div className=\"relative bg-white rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto m-4\">\n-            <ComplaintForm \n-              onClose={() => setIsFormOpen(false)}\n-              onSubmit={handleComplaintSubmit}\n-            />\n-          </div>\n-        </div>\n-      )}\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748020796952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -601,10 +601,717 @@\n       <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n         <Download className=\"mr-2 h-4 w-4\" />\n         Download PDF\n       </DropdownMenuItem>\n+      {complaint.status === 'pendimport React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  // DialogHeader, // No longer directly used, ComplaintForm might have its own\n+  // DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users, // Keep for potential future use, but financial might need own icon\n+  Building, // Example for Facility\n+  Briefcase, // Example for Academic\n+  UserX, // Example for Staff related issues\n+  DollarSign, // Example for Financial\n+  HelpCircle, // Example for Other\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+  MessageSquare, // Fallback icon for notifications\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  // const database = getDatabase(); // Initialized inside useEffect or where needed to avoid shadowing\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false);\n+      return;\n+    }\n+    setLoading(true);\n+    const db = getDatabase();\n+    const complaintsRef = ref(db, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    const notificationsToastRef = ref(db, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            let icon = 'ℹ️';\n+            if (notification.status === 'rejected') icon = '❌';\n+            else if (notification.status === 'resolved') icon = '✅';\n+            else if (notification.status === 'in_progress') icon = '⏳';\n+            \n+            toast(notification.message, {\n+              icon: icon,\n+              duration: 6000,\n+            });\n+            update(ref(db, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const db = getDatabase();\n+    const notificationsRef = ref(db, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        if (avgHours < 1) {\n+            const avgMinutes = Math.round((avgTimeMs / (1000 * 60)) * 10) / 10;\n+            return `${avgMinutes} min`;\n+        }\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-400';\n+      case 'in_progress': return 'bg-blue-100 text-blue-800 border-blue-400';\n+      case 'resolved': return 'bg-green-100 text-green-800 border-green-400';\n+      case 'rejected': return 'bg-red-100 text-red-800 border-red-400';\n+      case 'cancelled': return 'bg-gray-100 text-gray-800 border-gray-400';\n+      default: return 'bg-gray-100 text-gray-800 border-gray-400';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-800 border-red-400';\n+      case 'medium': return 'bg-orange-100 text-orange-800 border-orange-400';\n+      case 'low': return 'bg-sky-100 text-sky-800 border-sky-400'; // Changed low to sky for better contrast\n+      default: return 'bg-gray-100 text-gray-700 border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBorderClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-500';\n+      case 'medium': return 'bg-orange-500';\n+      case 'low': return 'bg-sky-500';\n+      default: return 'bg-gray-400';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-6 w-6\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <Briefcase {...iconProps} />;\n+      case 'facility': return <Building {...iconProps} />;\n+      case 'staff': return <UserX {...iconProps} />;\n+      case 'financial': return <DollarSign {...iconProps} />;\n+      case 'other': return <HelpCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    try {\n+      const db = getDatabase();\n+      await update(ref(db, `notifications/${user.uid}/${notificationId}`), { read: true });\n+      // toast.success('Notification marked as read'); // Can be too noisy, handled by UI change\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0 || unreadNotifications === 0) return;\n+    try {\n+      const db = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(db), updates);\n+        toast.success('All unread notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled as it's no longer pending.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        const db = getDatabase();\n+        await update(ref(db, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          lastUpdatedAt: new Date().toISOString(),\n+        });\n+        toast.success('Complaint cancelled successfully.');\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+  const getNotificationIcon = (statusOrType) => {\n+    switch (statusOrType?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />;\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />; // Usually admin action makes it pending, but for notification it's relevant\n+      case 'new_complaint_admin': // If admin gets notification for new complaint\n+      case 'submitted': // If user gets confirmation\n+        return <FileText className=\"h-5 w-5 text-indigo-500\" />;\n+      default: return <MessageSquare className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-4\">\n+      <Avatar className=\"h-14 w-14 border-2 border-orange-500 shadow-sm\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback className=\"text-lg bg-orange-100 text-orange-600\">\n+          {user?.displayName?.charAt(0).toUpperCase() || 'U'}\n+        </AvatarFallback>\n+      </Avatar>\n+      <div>\n+        <h2 className=\"text-2xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">\n+          ID: <span className=\"font-medium text-gray-600\">{user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</span>\n+        </p>\n+      </div>\n+    </div>\n+  );\n+\n+  if (loading && complaints.length === 0) {\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-gray-100 to-orange-100\">\n+        <div className=\"text-center\">\n+          <div className=\"animate-spin rounded-full h-20 w-20 border-t-4 border-b-4 border-orange-500 mx-auto\"></div>\n+          <p className=\"mt-4 text-lg font-semibold text-orange-600\">Loading Dashboard...</p>\n+        </div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-100 p-4 md:p-6 lg:p-8\">\n+      <div className=\"container mx-auto\">\n+        {/* Page Title Area */}\n+        <div className=\"mb-6 md:mb-8\">\n+          <h1 className=\"text-4xl font-bold text-gray-800\">Complaint Dashboard</h1>\n+          <p className=\"text-lg text-gray-600 mt-1\">Manage and track your complaints efficiently.</p>\n+        </div>\n+\n+        {/* Profile and Actions Header */}\n+        <header className=\"mb-6 md:mb-10 pb-6 border-b border-gray-300\">\n+          <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4\">\n+            {user ? <UserProfileDisplay user={user} /> : (\n+              <div className=\"flex items-center space-x-4 animate-pulse w-full sm:w-auto\">\n+                <div className=\"h-14 w-14 bg-gray-300 rounded-full\"></div>\n+                <div>\n+                  <div className=\"h-6 w-40 bg-gray-300 rounded mb-1.5\"></div>\n+                  <div className=\"h-4 w-32 bg-gray-300 rounded\"></div>\n+                </div>\n+              </div>\n+            )}\n+            <div className=\"flex items-center space-x-3 sm:space-x-4\">\n+              <DropdownMenu>\n+                <DropdownMenuTrigger asChild>\n+                  <Button variant=\"outline\" size=\"lg\" className=\"relative text-gray-700 hover:text-orange-600 hover:border-orange-400 rounded-lg shadow-sm\">\n+                    <Bell className=\"h-5 w-5\" />\n+                    {unreadNotifications > 0 && (\n+                      <span className=\"absolute -top-1 -right-1 flex h-5 w-5\">\n+                        <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75\"></span>\n+                        <span className=\"relative inline-flex rounded-full h-5 w-5 bg-red-500 text-white text-xs items-center justify-center\">\n+                          {unreadNotifications}\n+                        </span>\n+                      </span>\n+                    )}\n+                  </Button>\n+                </DropdownMenuTrigger>\n+                <DropdownMenuContent align=\"end\" className=\"w-80 md:w-96 shadow-xl rounded-lg border-gray-200 nice-scrollbar\">\n+                  <div className=\"p-3 font-semibold text-gray-700 text-base border-b border-gray-200\">Notifications</div>\n+                  {notifications.length === 0 ? (\n+                    <div className=\"p-4 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                  ) : (\n+                    <div className=\"max-h-96 overflow-y-auto\">\n+                      {notifications.slice(0, 7).map((n) => ( // Show more notifications initially\n+                        <DropdownMenuItem \n+                          key={n.id} \n+                          onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                          className={`flex items-start gap-3 p-3 cursor-pointer transition-colors hover:!bg-orange-100 ${!n.read ? 'bg-orange-50' : 'opacity-80'}`}\n+                        >\n+                          <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(n.status || n.type)}</div>\n+                          <div className=\"flex-1\">\n+                            <p className={`text-sm ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                              {n.message}\n+                            </p>\n+                            <p className=\"text-xs text-gray-500 mt-0.5\">\n+                              {formatDistanceToNow(new Date(n.timestamp || n.createdAt || Date.now()), { addSuffix: true })}\n+                            </p>\n+                          </div>\n+                        </DropdownMenuItem>\n+                      ))}\n+                    </div>\n+                  )}\n+                  {notifications.length > 0 && <DropdownMenuSeparator className=\"my-1\" />}\n+                  <DropdownMenuItem \n+                      onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                      className=\"justify-center p-2.5 text-sm font-medium text-orange-600 hover:!bg-orange-100 hover:!text-orange-700 cursor-pointer\"\n+                  >\n+                    View All Notifications\n+                  </DropdownMenuItem>\n+                </DropdownMenuContent>\n+              </DropdownMenu>\n+\n+              <Button\n+                onClick={handleNewComplaint}\n+                className=\"bg-orange-500 hover:bg-orange-600 text-white font-semibold shadow-md hover:shadow-lg transition-all duration-300 rounded-lg px-5 py-2.5 text-base\"\n+                disabled={!user}\n+                size=\"lg\"\n+              >\n+                <Plus className=\"h-5 w-5 mr-2\" />\n+                New Complaint\n+              </Button>\n+            </div>\n+          </div>\n+        </header>\n+      \n+        <main className=\"space-y-8\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-5\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-6 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl transform hover:-translate-y-1\">\n+                <div className=\"flex items-center justify-between\">\n+                  <div>\n+                    <p className=\"text-sm font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-3xl font-bold text-gray-800 mt-1\">{stat.value}</p>\n+                  </div>\n+                  <div className={`p-3 rounded-full ${stat.color} shadow-md`}>\n+                    <stat.icon className=\"h-7 w-7 text-white\" />\n+                  </div>\n+                </div>\n+              </Card>\n+            ))}\n+          </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-5 shadow-lg rounded-xl\">\n+            <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n+              <div className=\"relative flex-grow w-full md:w-auto\">\n+                <Search className=\"absolute left-3.5 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+                <Input\n+                  type=\"text\"\n+                  placeholder=\"Search by ID, subject, or description...\"\n+                  value={searchQuery}\n+                  onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-12 pr-10 w-full md:min-w-[350px] lg:min-w-[400px] h-11 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 border-gray-300 shadow-sm\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-500 hover:text-gray-700\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4.5 w-4.5\" />\n+                  </Button>\n+                )}\n+              </div>\n+              <div className=\"flex items-center gap-3 self-start md:self-center w-full md:w-auto\">\n+                <span className=\"text-sm font-medium text-gray-600 whitespace-nowrap\">\n+                  <Filter className=\"h-5 w-5 inline mr-1.5 text-orange-500\" />Filter by Status:\n+                </span>\n+                <DropdownMenu>\n+                  <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-lg border-gray-300 hover:border-orange-500 shadow-sm w-full md:w-auto justify-between\">\n+                      {filter === 'all' ? 'All Statuses' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-60\" />\n+                    </Button>\n+                  </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl rounded-lg border-gray-200\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-100 py-2 px-3 text-sm\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </DropdownMenuContent>\n+                </DropdownMenu>\n+              </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && (\n+             <div className=\"flex items-center justify-center py-10\">\n+                <div className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-orange-600\"></div>\n+                <p className=\"ml-3 text-gray-600 text-lg\">Updating complaints list...</p>\n+             </div>\n+          )}\n+          <div className=\"space-y-5\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"relative p-5 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl overflow-hidden group transform hover:-translate-y-1\">\n+                <div className={`absolute left-0 top-0 bottom-0 w-1.5 rounded-l-xl ${getPriorityBorderClass(complaint.priority)} group-hover:w-2.5 transition-all duration-300`}></div>\n+                <div className=\"pl-4\"> {/* Offset content slightly more */}\n+                  <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                    <div className=\"flex items-start space-x-4 flex-1\">\n+                      <div className={`p-3.5 rounded-lg bg-orange-100 text-orange-600 mt-1 shadow-sm`}>\n+                        {getCategoryIcon(complaint.category)}\n+                      </div>\n+                      <div className=\"flex-1\">\n+                        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-1\">\n+                          <h3 className=\"text-lg font-semibold text-gray-800 group-hover:text-orange-600 transition-colors cursor-default line-clamp-1\" title={complaint.subject}>\n+                            {complaint.subject}\n+                          </h3>\n+                          <div className=\"sm:hidden self-end -mt-6\"> {/* Actions for mobile */}\n+                              <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                          </div>\n+                        </div>\n+                        <p className=\"text-xs text-gray-500 mb-2\">ID: <span className=\"font-medium text-gray-600\">{complaint.id}</span></p>\n+                        <p className=\"text-sm text-gray-700 mb-3 leading-relaxed line-clamp-2\">\n+                          {complaint.description}\n+                        </p>\n+                        <div className=\"flex flex-wrap items-center gap-x-3 gap-y-2\">\n+                          <Badge className={`text-xs font-medium px-2.5 py-1 border ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                            {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                          </Badge>\n+                          <Badge className={`text-xs font-medium px-2.5 py-1 border ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                            {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                          </Badge>\n+                          <span className=\"text-xs text-gray-500 flex items-center\">\n+                            <Calendar className=\"h-3.5 w-3.5 mr-1.5 text-gray-400\" />\n+                            {format(new Date(complaint.submittedAt), 'MMM d, yyyy, HH:mm')}\n+                          </span>\n+                        </div>\n+                      </div>\n+                    </div>\n+                    <div className=\"hidden sm:flex flex-col items-end space-y-2 mt-1 sm:mt-0 sm:ml-4\">\n+                      <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                      {/* You can add a \"View Details\" button here if needed */}\n+                    </div>\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && (\n+                <Card className=\"text-center py-16 shadow-lg rounded-xl bg-gradient-to-br from-gray-50 to-orange-50\">\n+                  <FileText className=\"h-24 w-24 text-orange-300 mx-auto mb-6\" />\n+                  <p className=\"text-gray-700 text-2xl font-semibold mb-2\">No Complaints Found</p>\n+                  <p className=\"text-gray-500 text-base mb-6 max-w-md mx-auto\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'It looks like you haven\\'t submitted any complaints yet. Get started by creating one!'\n+                      : 'Try adjusting your search query or filter settings to find what you\\'re looking for.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"lg\" className=\"bg-orange-500 hover:bg-orange-600 text-white text-lg px-8 py-3 rounded-lg shadow-md hover:shadow-lg transition-shadow\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-5 w-5 mr-2\" /> Create Your First Complaint\n+                    </Button>\n+                  )}\n+                </Card>\n+              )\n+            )}\n+          </div>\n+\n+          {/* Notifications Panel Section */}\n+          <div id=\"notifications-panel\" className=\"mt-12 pt-8 border-t border-gray-300\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3\">\n+              <h2 className=\"text-3xl font-semibold text-gray-800\">All Notifications</h2>\n+              {notifications.length > 0 && unreadNotifications > 0 && (\n+                <Button variant=\"outline\" size=\"sm\" onClick={markAllNotificationsAsRead} className=\"text-orange-600 border-orange-500 hover:bg-orange-50 hover:text-orange-700 rounded-md shadow-sm\">\n+                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read ({unreadNotifications})\n+                </Button>\n+              )}\n+            </div>\n+            {notifications.length === 0 ? (\n+              <Card className=\"p-10 text-center shadow-md rounded-xl bg-white\">\n+                <Bell className=\"h-20 w-20 text-gray-300 mx-auto mb-5\" />\n+                <p className=\"text-gray-600 text-xl font-medium\">No notifications to display.</p>\n+                <p className=\"text-gray-400 text-sm mt-1.5\">Updates about your complaints and other important alerts will appear here.</p>\n+              </Card>\n+            ) : (\n+              <div className=\"space-y-3.5 max-h-[600px] overflow-y-auto pr-2 -mr-2 nice-scrollbar\">\n+                {notifications.map(n => (\n+                  <Card \n+                    key={n.id} \n+                    className={`p-4 shadow-md hover:shadow-lg transition-all duration-200 rounded-lg cursor-pointer ${!n.read ? 'bg-orange-50 border-l-4 border-orange-500' : 'bg-white opacity-90 hover:opacity-100'}`}\n+                    onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                  >\n+                    <div className=\"flex items-start gap-4\">\n+                      <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(n.status || n.type)}</div>\n+                      <div className=\"flex-1\">\n+                        <p className={`text-sm ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-700'}`}>\n+                          {n.message}\n+                        </p>\n+                        <p className=\"text-xs text-gray-500 mt-1\">\n+                          {formatDistanceToNow(new Date(n.timestamp || n.createdAt || Date.now()), { addSuffix: true })}\n+                        </p>\n+                      </div>\n+                      {!n.read && (\n+                        <Button variant=\"link\" size=\"sm\" className=\"text-xs text-orange-600 hover:text-orange-700 p-0 h-auto self-start\" onClick={(e) => { e.stopPropagation(); markNotificationAsRead(n.id); }}>\n+                          Mark as read\n+                        </Button>\n+                      )}\n+                    </div>\n+                  </Card>\n+                ))}\n+              </div>\n+            )}\n+          </div>\n+        </main>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto p-0 nice-scrollbar rounded-lg\">\n+          <ComplaintForm \n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+        </DialogContent>\n+      </Dialog>\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 8px;\n+          height: 8px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f0f0f0;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; /* orange-500 */\n+          border-radius: 10px;\n+          border: 2px solid #f0f0f0; /* Creates a nice offset */\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; /* orange-600 */\n+        }\n+        .line-clamp-1 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 1;\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+        /* Dialog content padding is removed in component, handled by ComplaintForm if needed */\n+        /* This ensures the scrollbar applies correctly to the DialogContent */\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-9 w-9 p-0 text-gray-500 hover:text-orange-600 hover:bg-orange-100 rounded-md\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl rounded-lg border-gray-200 w-48\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-100 text-gray-700 cursor-pointer py-2 px-3\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2.5 h-4 w-4 text-orange-500\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-100 text-gray-700 cursor-pointer py-2 px-3\" onClick={() => toast.info(\"Download PDF feature is being implemented.\")}>\n+        <Download className=\"mr-2.5 h-4 w-4 text-orange-500\" />\n+        Download PDF\n+      </DropdownMenuItem>\n       {complaint.status === 'pending' && (\n         <>\n+          <DropdownMenuSeparator className=\"my-1\" />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-100 focus:!text-red-700 cursor-pointer py-2 px-3\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2.5 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;ing' && (\n+        <>\n           <DropdownMenuSeparator />\n           <DropdownMenuItem \n             className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n             onClick={() => handleCancelComplaint(complaint.id)}\n"
                },
                {
                    "date": 1748020811536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1328 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      <div className=\"container mx-auto mb-6\">\n+        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Complaint Dashboard</h1>\n+        <p className=\"text-gray-600\">Manage and track your complaints in one place</p>\n+      </div>\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto\">\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n+          <ComplaintForm \n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+        </DialogContent>\n+      </Dialog>\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pendimport React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  // DialogHeader, // No longer directly used, ComplaintForm might have its own\n+  // DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users, // Keep for potential future use, but financial might need own icon\n+  Building, // Example for Facility\n+  Briefcase, // Example for Academic\n+  UserX, // Example for Staff related issues\n+  DollarSign, // Example for Financial\n+  HelpCircle, // Example for Other\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+  MessageSquare, // Fallback icon for notifications\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  // const database = getDatabase(); // Initialized inside useEffect or where needed to avoid shadowing\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false);\n+      return;\n+    }\n+    setLoading(true);\n+    const db = getDatabase();\n+    const complaintsRef = ref(db, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    const notificationsToastRef = ref(db, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            let icon = 'ℹ️';\n+            if (notification.status === 'rejected') icon = '❌';\n+            else if (notification.status === 'resolved') icon = '✅';\n+            else if (notification.status === 'in_progress') icon = '⏳';\n+            \n+            toast(notification.message, {\n+              icon: icon,\n+              duration: 6000,\n+            });\n+            update(ref(db, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const db = getDatabase();\n+    const notificationsRef = ref(db, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        if (avgHours < 1) {\n+            const avgMinutes = Math.round((avgTimeMs / (1000 * 60)) * 10) / 10;\n+            return `${avgMinutes} min`;\n+        }\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-400';\n+      case 'in_progress': return 'bg-blue-100 text-blue-800 border-blue-400';\n+      case 'resolved': return 'bg-green-100 text-green-800 border-green-400';\n+      case 'rejected': return 'bg-red-100 text-red-800 border-red-400';\n+      case 'cancelled': return 'bg-gray-100 text-gray-800 border-gray-400';\n+      default: return 'bg-gray-100 text-gray-800 border-gray-400';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-800 border-red-400';\n+      case 'medium': return 'bg-orange-100 text-orange-800 border-orange-400';\n+      case 'low': return 'bg-sky-100 text-sky-800 border-sky-400'; // Changed low to sky for better contrast\n+      default: return 'bg-gray-100 text-gray-700 border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBorderClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-500';\n+      case 'medium': return 'bg-orange-500';\n+      case 'low': return 'bg-sky-500';\n+      default: return 'bg-gray-400';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-6 w-6\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <Briefcase {...iconProps} />;\n+      case 'facility': return <Building {...iconProps} />;\n+      case 'staff': return <UserX {...iconProps} />;\n+      case 'financial': return <DollarSign {...iconProps} />;\n+      case 'other': return <HelpCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    try {\n+      const db = getDatabase();\n+      await update(ref(db, `notifications/${user.uid}/${notificationId}`), { read: true });\n+      // toast.success('Notification marked as read'); // Can be too noisy, handled by UI change\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0 || unreadNotifications === 0) return;\n+    try {\n+      const db = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(db), updates);\n+        toast.success('All unread notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled as it's no longer pending.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        const db = getDatabase();\n+        await update(ref(db, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          lastUpdatedAt: new Date().toISOString(),\n+        });\n+        toast.success('Complaint cancelled successfully.');\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+  const getNotificationIcon = (statusOrType) => {\n+    switch (statusOrType?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />;\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />; // Usually admin action makes it pending, but for notification it's relevant\n+      case 'new_complaint_admin': // If admin gets notification for new complaint\n+      case 'submitted': // If user gets confirmation\n+        return <FileText className=\"h-5 w-5 text-indigo-500\" />;\n+      default: return <MessageSquare className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-4\">\n+      <Avatar className=\"h-14 w-14 border-2 border-orange-500 shadow-sm\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback className=\"text-lg bg-orange-100 text-orange-600\">\n+          {user?.displayName?.charAt(0).toUpperCase() || 'U'}\n+        </AvatarFallback>\n+      </Avatar>\n+      <div>\n+        <h2 className=\"text-2xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">\n+          ID: <span className=\"font-medium text-gray-600\">{user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</span>\n+        </p>\n+      </div>\n+    </div>\n+  );\n+\n+  if (loading && complaints.length === 0) {\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-gray-100 to-orange-100\">\n+        <div className=\"text-center\">\n+          <div className=\"animate-spin rounded-full h-20 w-20 border-t-4 border-b-4 border-orange-500 mx-auto\"></div>\n+          <p className=\"mt-4 text-lg font-semibold text-orange-600\">Loading Dashboard...</p>\n+        </div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-100 p-4 md:p-6 lg:p-8\">\n+      <div className=\"container mx-auto\">\n+        {/* Page Title Area */}\n+        <div className=\"mb-6 md:mb-8\">\n+          <h1 className=\"text-4xl font-bold text-gray-800\">Complaint Dashboard</h1>\n+          <p className=\"text-lg text-gray-600 mt-1\">Manage and track your complaints efficiently.</p>\n+        </div>\n+\n+        {/* Profile and Actions Header */}\n+        <header className=\"mb-6 md:mb-10 pb-6 border-b border-gray-300\">\n+          <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4\">\n+            {user ? <UserProfileDisplay user={user} /> : (\n+              <div className=\"flex items-center space-x-4 animate-pulse w-full sm:w-auto\">\n+                <div className=\"h-14 w-14 bg-gray-300 rounded-full\"></div>\n+                <div>\n+                  <div className=\"h-6 w-40 bg-gray-300 rounded mb-1.5\"></div>\n+                  <div className=\"h-4 w-32 bg-gray-300 rounded\"></div>\n+                </div>\n+              </div>\n+            )}\n+            <div className=\"flex items-center space-x-3 sm:space-x-4\">\n+              <DropdownMenu>\n+                <DropdownMenuTrigger asChild>\n+                  <Button variant=\"outline\" size=\"lg\" className=\"relative text-gray-700 hover:text-orange-600 hover:border-orange-400 rounded-lg shadow-sm\">\n+                    <Bell className=\"h-5 w-5\" />\n+                    {unreadNotifications > 0 && (\n+                      <span className=\"absolute -top-1 -right-1 flex h-5 w-5\">\n+                        <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75\"></span>\n+                        <span className=\"relative inline-flex rounded-full h-5 w-5 bg-red-500 text-white text-xs items-center justify-center\">\n+                          {unreadNotifications}\n+                        </span>\n+                      </span>\n+                    )}\n+                  </Button>\n+                </DropdownMenuTrigger>\n+                <DropdownMenuContent align=\"end\" className=\"w-80 md:w-96 shadow-xl rounded-lg border-gray-200 nice-scrollbar\">\n+                  <div className=\"p-3 font-semibold text-gray-700 text-base border-b border-gray-200\">Notifications</div>\n+                  {notifications.length === 0 ? (\n+                    <div className=\"p-4 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                  ) : (\n+                    <div className=\"max-h-96 overflow-y-auto\">\n+                      {notifications.slice(0, 7).map((n) => ( // Show more notifications initially\n+                        <DropdownMenuItem \n+                          key={n.id} \n+                          onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                          className={`flex items-start gap-3 p-3 cursor-pointer transition-colors hover:!bg-orange-100 ${!n.read ? 'bg-orange-50' : 'opacity-80'}`}\n+                        >\n+                          <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(n.status || n.type)}</div>\n+                          <div className=\"flex-1\">\n+                            <p className={`text-sm ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                              {n.message}\n+                            </p>\n+                            <p className=\"text-xs text-gray-500 mt-0.5\">\n+                              {formatDistanceToNow(new Date(n.timestamp || n.createdAt || Date.now()), { addSuffix: true })}\n+                            </p>\n+                          </div>\n+                        </DropdownMenuItem>\n+                      ))}\n+                    </div>\n+                  )}\n+                  {notifications.length > 0 && <DropdownMenuSeparator className=\"my-1\" />}\n+                  <DropdownMenuItem \n+                      onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                      className=\"justify-center p-2.5 text-sm font-medium text-orange-600 hover:!bg-orange-100 hover:!text-orange-700 cursor-pointer\"\n+                  >\n+                    View All Notifications\n+                  </DropdownMenuItem>\n+                </DropdownMenuContent>\n+              </DropdownMenu>\n+\n+              <Button\n+                onClick={handleNewComplaint}\n+                className=\"bg-orange-500 hover:bg-orange-600 text-white font-semibold shadow-md hover:shadow-lg transition-all duration-300 rounded-lg px-5 py-2.5 text-base\"\n+                disabled={!user}\n+                size=\"lg\"\n+              >\n+                <Plus className=\"h-5 w-5 mr-2\" />\n+                New Complaint\n+              </Button>\n+            </div>\n+          </div>\n+        </header>\n+      \n+        <main className=\"space-y-8\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-5\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-6 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl transform hover:-translate-y-1\">\n+                <div className=\"flex items-center justify-between\">\n+                  <div>\n+                    <p className=\"text-sm font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-3xl font-bold text-gray-800 mt-1\">{stat.value}</p>\n+                  </div>\n+                  <div className={`p-3 rounded-full ${stat.color} shadow-md`}>\n+                    <stat.icon className=\"h-7 w-7 text-white\" />\n+                  </div>\n+                </div>\n+              </Card>\n+            ))}\n+          </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-5 shadow-lg rounded-xl\">\n+            <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n+              <div className=\"relative flex-grow w-full md:w-auto\">\n+                <Search className=\"absolute left-3.5 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+                <Input\n+                  type=\"text\"\n+                  placeholder=\"Search by ID, subject, or description...\"\n+                  value={searchQuery}\n+                  onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-12 pr-10 w-full md:min-w-[350px] lg:min-w-[400px] h-11 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 border-gray-300 shadow-sm\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-500 hover:text-gray-700\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4.5 w-4.5\" />\n+                  </Button>\n+                )}\n+              </div>\n+              <div className=\"flex items-center gap-3 self-start md:self-center w-full md:w-auto\">\n+                <span className=\"text-sm font-medium text-gray-600 whitespace-nowrap\">\n+                  <Filter className=\"h-5 w-5 inline mr-1.5 text-orange-500\" />Filter by Status:\n+                </span>\n+                <DropdownMenu>\n+                  <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-lg border-gray-300 hover:border-orange-500 shadow-sm w-full md:w-auto justify-between\">\n+                      {filter === 'all' ? 'All Statuses' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-60\" />\n+                    </Button>\n+                  </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl rounded-lg border-gray-200\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-100 py-2 px-3 text-sm\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </DropdownMenuContent>\n+                </DropdownMenu>\n+              </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && (\n+             <div className=\"flex items-center justify-center py-10\">\n+                <div className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-orange-600\"></div>\n+                <p className=\"ml-3 text-gray-600 text-lg\">Updating complaints list...</p>\n+             </div>\n+          )}\n+          <div className=\"space-y-5\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"relative p-5 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl overflow-hidden group transform hover:-translate-y-1\">\n+                <div className={`absolute left-0 top-0 bottom-0 w-1.5 rounded-l-xl ${getPriorityBorderClass(complaint.priority)} group-hover:w-2.5 transition-all duration-300`}></div>\n+                <div className=\"pl-4\"> {/* Offset content slightly more */}\n+                  <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                    <div className=\"flex items-start space-x-4 flex-1\">\n+                      <div className={`p-3.5 rounded-lg bg-orange-100 text-orange-600 mt-1 shadow-sm`}>\n+                        {getCategoryIcon(complaint.category)}\n+                      </div>\n+                      <div className=\"flex-1\">\n+                        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-1\">\n+                          <h3 className=\"text-lg font-semibold text-gray-800 group-hover:text-orange-600 transition-colors cursor-default line-clamp-1\" title={complaint.subject}>\n+                            {complaint.subject}\n+                          </h3>\n+                          <div className=\"sm:hidden self-end -mt-6\"> {/* Actions for mobile */}\n+                              <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                          </div>\n+                        </div>\n+                        <p className=\"text-xs text-gray-500 mb-2\">ID: <span className=\"font-medium text-gray-600\">{complaint.id}</span></p>\n+                        <p className=\"text-sm text-gray-700 mb-3 leading-relaxed line-clamp-2\">\n+                          {complaint.description}\n+                        </p>\n+                        <div className=\"flex flex-wrap items-center gap-x-3 gap-y-2\">\n+                          <Badge className={`text-xs font-medium px-2.5 py-1 border ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                            {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                          </Badge>\n+                          <Badge className={`text-xs font-medium px-2.5 py-1 border ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                            {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                          </Badge>\n+                          <span className=\"text-xs text-gray-500 flex items-center\">\n+                            <Calendar className=\"h-3.5 w-3.5 mr-1.5 text-gray-400\" />\n+                            {format(new Date(complaint.submittedAt), 'MMM d, yyyy, HH:mm')}\n+                          </span>\n+                        </div>\n+                      </div>\n+                    </div>\n+                    <div className=\"hidden sm:flex flex-col items-end space-y-2 mt-1 sm:mt-0 sm:ml-4\">\n+                      <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                      {/* You can add a \"View Details\" button here if needed */}\n+                    </div>\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && (\n+                <Card className=\"text-center py-16 shadow-lg rounded-xl bg-gradient-to-br from-gray-50 to-orange-50\">\n+                  <FileText className=\"h-24 w-24 text-orange-300 mx-auto mb-6\" />\n+                  <p className=\"text-gray-700 text-2xl font-semibold mb-2\">No Complaints Found</p>\n+                  <p className=\"text-gray-500 text-base mb-6 max-w-md mx-auto\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'It looks like you haven\\'t submitted any complaints yet. Get started by creating one!'\n+                      : 'Try adjusting your search query or filter settings to find what you\\'re looking for.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"lg\" className=\"bg-orange-500 hover:bg-orange-600 text-white text-lg px-8 py-3 rounded-lg shadow-md hover:shadow-lg transition-shadow\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-5 w-5 mr-2\" /> Create Your First Complaint\n+                    </Button>\n+                  )}\n+                </Card>\n+              )\n+            )}\n+          </div>\n+\n+          {/* Notifications Panel Section */}\n+          <div id=\"notifications-panel\" className=\"mt-12 pt-8 border-t border-gray-300\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3\">\n+              <h2 className=\"text-3xl font-semibold text-gray-800\">All Notifications</h2>\n+              {notifications.length > 0 && unreadNotifications > 0 && (\n+                <Button variant=\"outline\" size=\"sm\" onClick={markAllNotificationsAsRead} className=\"text-orange-600 border-orange-500 hover:bg-orange-50 hover:text-orange-700 rounded-md shadow-sm\">\n+                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read ({unreadNotifications})\n+                </Button>\n+              )}\n+            </div>\n+            {notifications.length === 0 ? (\n+              <Card className=\"p-10 text-center shadow-md rounded-xl bg-white\">\n+                <Bell className=\"h-20 w-20 text-gray-300 mx-auto mb-5\" />\n+                <p className=\"text-gray-600 text-xl font-medium\">No notifications to display.</p>\n+                <p className=\"text-gray-400 text-sm mt-1.5\">Updates about your complaints and other important alerts will appear here.</p>\n+              </Card>\n+            ) : (\n+              <div className=\"space-y-3.5 max-h-[600px] overflow-y-auto pr-2 -mr-2 nice-scrollbar\">\n+                {notifications.map(n => (\n+                  <Card \n+                    key={n.id} \n+                    className={`p-4 shadow-md hover:shadow-lg transition-all duration-200 rounded-lg cursor-pointer ${!n.read ? 'bg-orange-50 border-l-4 border-orange-500' : 'bg-white opacity-90 hover:opacity-100'}`}\n+                    onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                  >\n+                    <div className=\"flex items-start gap-4\">\n+                      <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(n.status || n.type)}</div>\n+                      <div className=\"flex-1\">\n+                        <p className={`text-sm ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-700'}`}>\n+                          {n.message}\n+                        </p>\n+                        <p className=\"text-xs text-gray-500 mt-1\">\n+                          {formatDistanceToNow(new Date(n.timestamp || n.createdAt || Date.now()), { addSuffix: true })}\n+                        </p>\n+                      </div>\n+                      {!n.read && (\n+                        <Button variant=\"link\" size=\"sm\" className=\"text-xs text-orange-600 hover:text-orange-700 p-0 h-auto self-start\" onClick={(e) => { e.stopPropagation(); markNotificationAsRead(n.id); }}>\n+                          Mark as read\n+                        </Button>\n+                      )}\n+                    </div>\n+                  </Card>\n+                ))}\n+              </div>\n+            )}\n+          </div>\n+        </main>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto p-0 nice-scrollbar rounded-lg\">\n+          <ComplaintForm \n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+        </DialogContent>\n+      </Dialog>\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 8px;\n+          height: 8px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f0f0f0;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; /* orange-500 */\n+          border-radius: 10px;\n+          border: 2px solid #f0f0f0; /* Creates a nice offset */\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; /* orange-600 */\n+        }\n+        .line-clamp-1 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 1;\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+        /* Dialog content padding is removed in component, handled by ComplaintForm if needed */\n+        /* This ensures the scrollbar applies correctly to the DialogContent */\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-9 w-9 p-0 text-gray-500 hover:text-orange-600 hover:bg-orange-100 rounded-md\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl rounded-lg border-gray-200 w-48\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-100 text-gray-700 cursor-pointer py-2 px-3\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2.5 h-4 w-4 text-orange-500\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-100 text-gray-700 cursor-pointer py-2 px-3\" onClick={() => toast.info(\"Download PDF feature is being implemented.\")}>\n+        <Download className=\"mr-2.5 h-4 w-4 text-orange-500\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator className=\"my-1\" />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-100 focus:!text-red-700 cursor-pointer py-2 px-3\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2.5 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;ing' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748020823519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,622 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      <div className=\"container mx-auto mb-6\">\n+        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Complaint Dashboard</h1>\n+        <p className=\"text-gray-600\">Manage and track your complaints in one place</p>\n+      </div>\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto\"\n+\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n+          <ComplaintForm \n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+        </DialogContent>\n+      </Dialog>\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748020831898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,684 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      <div className=\"container mx-auto mb-6\">\n+        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Complaint Dashboard</h1>\n+        <p className=\"text-gray-600\">Manage and track your complaints in one place</p>\n+      </div>\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n+        {/* Notifications Panel (Left Sidebar on LG+) */}\n+        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n+          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n+            <div className=\"p-4 border-b bg-white\">\n+              <div className=\"flex items-center justify-between\">\n+                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n+                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n+                  Complaint Notifications\n+                </h3>\n+                {unreadNotifications > 0 && (\n+                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New Updates</Badge>\n+                )}\n+              </div>\n+            </div>\n+            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n+              {notifications.length === 0 && (\n+                <div className=\"p-6 text-center text-gray-500\">\n+                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n+                  <p className=\"font-medium\">All caught up!</p>\n+                  <p className=\"text-sm\">No new notifications.</p>\n+                </div>\n+              )}\n+              {notifications.map((notification) => (\n+                <div\n+                  key={notification.id}\n+                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n+                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n+                  }`}\n+                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n+                >\n+                  <div className=\"flex items-start gap-3\">\n+                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n+                    <div className=\"flex-1\">\n+                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n+                        {notification.message}\n+                      </p>\n+                      <p className=\"text-xs text-gray-500 mt-1\">\n+                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n+                      </p>\n+                    </div>\n+                    {!notification.read && (\n+                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n+                    )}\n+                  </div>\n+                </div>\n+              ))}\n+            </div>\n+            {notifications.length > 0 && unreadNotifications > 0 && (\n+              <div className=\"p-3 border-t bg-white\">\n+                <Button\n+                  variant=\"outline\"\n+                  size=\"sm\"\n+                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n+                  onClick={markAllNotificationsAsRead}\n+                  disabled={unreadNotifications === 0}\n+                >\n+                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n+                </Button>\n+              </div>\n+            )}\n+          </Card>\n+        </div>\n+\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n+          <ComplaintForm \n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+        </DialogContent>\n+      </Dialog>\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748020842359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,708 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  // DialogHeader, // No longer directly used, ComplaintForm might have its own\n+  // DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users, // Keep for potential future use, but financial might need own icon\n+  Building, // Example for Facility\n+  Briefcase, // Example for Academic\n+  UserX, // Example for Staff related issues\n+  DollarSign, // Example for Financial\n+  HelpCircle, // Example for Other\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+  MessageSquare, // Fallback icon for notifications\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  // const database = getDatabase(); // Initialized inside useEffect or where needed to avoid shadowing\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false);\n+      return;\n+    }\n+    setLoading(true);\n+    const db = getDatabase();\n+    const complaintsRef = ref(db, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    const notificationsToastRef = ref(db, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            let icon = 'ℹ️';\n+            if (notification.status === 'rejected') icon = '❌';\n+            else if (notification.status === 'resolved') icon = '✅';\n+            else if (notification.status === 'in_progress') icon = '⏳';\n+            \n+            toast(notification.message, {\n+              icon: icon,\n+              duration: 6000,\n+            });\n+            update(ref(db, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const db = getDatabase();\n+    const notificationsRef = ref(db, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        if (avgHours < 1) {\n+            const avgMinutes = Math.round((avgTimeMs / (1000 * 60)) * 10) / 10;\n+            return `${avgMinutes} min`;\n+        }\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-400';\n+      case 'in_progress': return 'bg-blue-100 text-blue-800 border-blue-400';\n+      case 'resolved': return 'bg-green-100 text-green-800 border-green-400';\n+      case 'rejected': return 'bg-red-100 text-red-800 border-red-400';\n+      case 'cancelled': return 'bg-gray-100 text-gray-800 border-gray-400';\n+      default: return 'bg-gray-100 text-gray-800 border-gray-400';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-800 border-red-400';\n+      case 'medium': return 'bg-orange-100 text-orange-800 border-orange-400';\n+      case 'low': return 'bg-sky-100 text-sky-800 border-sky-400'; // Changed low to sky for better contrast\n+      default: return 'bg-gray-100 text-gray-700 border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBorderClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-500';\n+      case 'medium': return 'bg-orange-500';\n+      case 'low': return 'bg-sky-500';\n+      default: return 'bg-gray-400';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-6 w-6\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <Briefcase {...iconProps} />;\n+      case 'facility': return <Building {...iconProps} />;\n+      case 'staff': return <UserX {...iconProps} />;\n+      case 'financial': return <DollarSign {...iconProps} />;\n+      case 'other': return <HelpCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    try {\n+      const db = getDatabase();\n+      await update(ref(db, `notifications/${user.uid}/${notificationId}`), { read: true });\n+      // toast.success('Notification marked as read'); // Can be too noisy, handled by UI change\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0 || unreadNotifications === 0) return;\n+    try {\n+      const db = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(db), updates);\n+        toast.success('All unread notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled as it's no longer pending.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        const db = getDatabase();\n+        await update(ref(db, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          lastUpdatedAt: new Date().toISOString(),\n+        });\n+        toast.success('Complaint cancelled successfully.');\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+  const getNotificationIcon = (statusOrType) => {\n+    switch (statusOrType?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />;\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />; // Usually admin action makes it pending, but for notification it's relevant\n+      case 'new_complaint_admin': // If admin gets notification for new complaint\n+      case 'submitted': // If user gets confirmation\n+        return <FileText className=\"h-5 w-5 text-indigo-500\" />;\n+      default: return <MessageSquare className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-4\">\n+      <Avatar className=\"h-14 w-14 border-2 border-orange-500 shadow-sm\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback className=\"text-lg bg-orange-100 text-orange-600\">\n+          {user?.displayName?.charAt(0).toUpperCase() || 'U'}\n+        </AvatarFallback>\n+      </Avatar>\n+      <div>\n+        <h2 className=\"text-2xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">\n+          ID: <span className=\"font-medium text-gray-600\">{user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</span>\n+        </p>\n+      </div>\n+    </div>\n+  );\n+\n+  if (loading && complaints.length === 0) {\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-gray-100 to-orange-100\">\n+        <div className=\"text-center\">\n+          <div className=\"animate-spin rounded-full h-20 w-20 border-t-4 border-b-4 border-orange-500 mx-auto\"></div>\n+          <p className=\"mt-4 text-lg font-semibold text-orange-600\">Loading Dashboard...</p>\n+        </div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-100 p-4 md:p-6 lg:p-8\">\n+      <div className=\"container mx-auto\">\n+        {/* Page Title Area */}\n+        <div className=\"mb-6 md:mb-8\">\n+          <h1 className=\"text-4xl font-bold text-gray-800\">Complaint Dashboard</h1>\n+          <p className=\"text-lg text-gray-600 mt-1\">Manage and track your complaints efficiently.</p>\n+        </div>\n+\n+        {/* Profile and Actions Header */}\n+        <header className=\"mb-6 md:mb-10 pb-6 border-b border-gray-300\">\n+          <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4\">\n+            {user ? <UserProfileDisplay user={user} /> : (\n+              <div className=\"flex items-center space-x-4 animate-pulse w-full sm:w-auto\">\n+                <div className=\"h-14 w-14 bg-gray-300 rounded-full\"></div>\n+                <div>\n+                  <div className=\"h-6 w-40 bg-gray-300 rounded mb-1.5\"></div>\n+                  <div className=\"h-4 w-32 bg-gray-300 rounded\"></div>\n+                </div>\n+              </div>\n+            )}\n+            <div className=\"flex items-center space-x-3 sm:space-x-4\">\n+              <DropdownMenu>\n+                <DropdownMenuTrigger asChild>\n+                  <Button variant=\"outline\" size=\"lg\" className=\"relative text-gray-700 hover:text-orange-600 hover:border-orange-400 rounded-lg shadow-sm\">\n+                    <Bell className=\"h-5 w-5\" />\n+                    {unreadNotifications > 0 && (\n+                      <span className=\"absolute -top-1 -right-1 flex h-5 w-5\">\n+                        <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75\"></span>\n+                        <span className=\"relative inline-flex rounded-full h-5 w-5 bg-red-500 text-white text-xs items-center justify-center\">\n+                          {unreadNotifications}\n+                        </span>\n+                      </span>\n+                    )}\n+                  </Button>\n+                </DropdownMenuTrigger>\n+                <DropdownMenuContent align=\"end\" className=\"w-80 md:w-96 shadow-xl rounded-lg border-gray-200 nice-scrollbar\">\n+                  <div className=\"p-3 font-semibold text-gray-700 text-base border-b border-gray-200\">Notifications</div>\n+                  {notifications.length === 0 ? (\n+                    <div className=\"p-4 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                  ) : (\n+                    <div className=\"max-h-96 overflow-y-auto\">\n+                      {notifications.slice(0, 7).map((n) => ( // Show more notifications initially\n+                        <DropdownMenuItem \n+                          key={n.id} \n+                          onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                          className={`flex items-start gap-3 p-3 cursor-pointer transition-colors hover:!bg-orange-100 ${!n.read ? 'bg-orange-50' : 'opacity-80'}`}\n+                        >\n+                          <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(n.status || n.type)}</div>\n+                          <div className=\"flex-1\">\n+                            <p className={`text-sm ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                              {n.message}\n+                            </p>\n+                            <p className=\"text-xs text-gray-500 mt-0.5\">\n+                              {formatDistanceToNow(new Date(n.timestamp || n.createdAt || Date.now()), { addSuffix: true })}\n+                            </p>\n+                          </div>\n+                        </DropdownMenuItem>\n+                      ))}\n+                    </div>\n+                  )}\n+                  {notifications.length > 0 && <DropdownMenuSeparator className=\"my-1\" />}\n+                  <DropdownMenuItem \n+                      onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                      className=\"justify-center p-2.5 text-sm font-medium text-orange-600 hover:!bg-orange-100 hover:!text-orange-700 cursor-pointer\"\n+                  >\n+                    View All Notifications\n+                  </DropdownMenuItem>\n+                </DropdownMenuContent>\n+              </DropdownMenu>\n+\n+              <Button\n+                onClick={handleNewComplaint}\n+                className=\"bg-orange-500 hover:bg-orange-600 text-white font-semibold shadow-md hover:shadow-lg transition-all duration-300 rounded-lg px-5 py-2.5 text-base\"\n+                disabled={!user}\n+                size=\"lg\"\n+              >\n+                <Plus className=\"h-5 w-5 mr-2\" />\n+                New Complaint\n+              </Button>\n+            </div>\n+          </div>\n+        </header>\n+      \n+        <main className=\"space-y-8\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-5\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-6 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl transform hover:-translate-y-1\">\n+                <div className=\"flex items-center justify-between\">\n+                  <div>\n+                    <p className=\"text-sm font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-3xl font-bold text-gray-800 mt-1\">{stat.value}</p>\n+                  </div>\n+                  <div className={`p-3 rounded-full ${stat.color} shadow-md`}>\n+                    <stat.icon className=\"h-7 w-7 text-white\" />\n+                  </div>\n+                </div>\n+              </Card>\n+            ))}\n+          </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-5 shadow-lg rounded-xl\">\n+            <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n+              <div className=\"relative flex-grow w-full md:w-auto\">\n+                <Search className=\"absolute left-3.5 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+                <Input\n+                  type=\"text\"\n+                  placeholder=\"Search by ID, subject, or description...\"\n+                  value={searchQuery}\n+                  onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-12 pr-10 w-full md:min-w-[350px] lg:min-w-[400px] h-11 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 border-gray-300 shadow-sm\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-500 hover:text-gray-700\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4.5 w-4.5\" />\n+                  </Button>\n+                )}\n+              </div>\n+              <div className=\"flex items-center gap-3 self-start md:self-center w-full md:w-auto\">\n+                <span className=\"text-sm font-medium text-gray-600 whitespace-nowrap\">\n+                  <Filter className=\"h-5 w-5 inline mr-1.5 text-orange-500\" />Filter by Status:\n+                </span>\n+                <DropdownMenu>\n+                  <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-lg border-gray-300 hover:border-orange-500 shadow-sm w-full md:w-auto justify-between\">\n+                      {filter === 'all' ? 'All Statuses' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-60\" />\n+                    </Button>\n+                  </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl rounded-lg border-gray-200\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-100 py-2 px-3 text-sm\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </DropdownMenuContent>\n+                </DropdownMenu>\n+              </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && (\n+             <div className=\"flex items-center justify-center py-10\">\n+                <div className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-orange-600\"></div>\n+                <p className=\"ml-3 text-gray-600 text-lg\">Updating complaints list...</p>\n+             </div>\n+          )}\n+          <div className=\"space-y-5\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"relative p-5 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl overflow-hidden group transform hover:-translate-y-1\">\n+                <div className={`absolute left-0 top-0 bottom-0 w-1.5 rounded-l-xl ${getPriorityBorderClass(complaint.priority)} group-hover:w-2.5 transition-all duration-300`}></div>\n+                <div className=\"pl-4\"> {/* Offset content slightly more */}\n+                  <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                    <div className=\"flex items-start space-x-4 flex-1\">\n+                      <div className={`p-3.5 rounded-lg bg-orange-100 text-orange-600 mt-1 shadow-sm`}>\n+                        {getCategoryIcon(complaint.category)}\n+                      </div>\n+                      <div className=\"flex-1\">\n+                        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-1\">\n+                          <h3 className=\"text-lg font-semibold text-gray-800 group-hover:text-orange-600 transition-colors cursor-default line-clamp-1\" title={complaint.subject}>\n+                            {complaint.subject}\n+                          </h3>\n+                          <div className=\"sm:hidden self-end -mt-6\"> {/* Actions for mobile */}\n+                              <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                          </div>\n+                        </div>\n+                        <p className=\"text-xs text-gray-500 mb-2\">ID: <span className=\"font-medium text-gray-600\">{complaint.id}</span></p>\n+                        <p className=\"text-sm text-gray-700 mb-3 leading-relaxed line-clamp-2\">\n+                          {complaint.description}\n+                        </p>\n+                        <div className=\"flex flex-wrap items-center gap-x-3 gap-y-2\">\n+                          <Badge className={`text-xs font-medium px-2.5 py-1 border ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                            {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                          </Badge>\n+                          <Badge className={`text-xs font-medium px-2.5 py-1 border ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                            {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                          </Badge>\n+                          <span className=\"text-xs text-gray-500 flex items-center\">\n+                            <Calendar className=\"h-3.5 w-3.5 mr-1.5 text-gray-400\" />\n+                            {format(new Date(complaint.submittedAt), 'MMM d, yyyy, HH:mm')}\n+                          </span>\n+                        </div>\n+                      </div>\n+                    </div>\n+                    <div className=\"hidden sm:flex flex-col items-end space-y-2 mt-1 sm:mt-0 sm:ml-4\">\n+                      <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                      {/* You can add a \"View Details\" button here if needed */}\n+                    </div>\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && (\n+                <Card className=\"text-center py-16 shadow-lg rounded-xl bg-gradient-to-br from-gray-50 to-orange-50\">\n+                  <FileText className=\"h-24 w-24 text-orange-300 mx-auto mb-6\" />\n+                  <p className=\"text-gray-700 text-2xl font-semibold mb-2\">No Complaints Found</p>\n+                  <p className=\"text-gray-500 text-base mb-6 max-w-md mx-auto\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'It looks like you haven\\'t submitted any complaints yet. Get started by creating one!'\n+                      : 'Try adjusting your search query or filter settings to find what you\\'re looking for.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"lg\" className=\"bg-orange-500 hover:bg-orange-600 text-white text-lg px-8 py-3 rounded-lg shadow-md hover:shadow-lg transition-shadow\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-5 w-5 mr-2\" /> Create Your First Complaint\n+                    </Button>\n+                  )}\n+                </Card>\n+              )\n+            )}\n+          </div>\n+\n+          {/* Notifications Panel Section */}\n+          <div id=\"notifications-panel\" className=\"mt-12 pt-8 border-t border-gray-300\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3\">\n+              <h2 className=\"text-3xl font-semibold text-gray-800\">All Notifications</h2>\n+              {notifications.length > 0 && unreadNotifications > 0 && (\n+                <Button variant=\"outline\" size=\"sm\" onClick={markAllNotificationsAsRead} className=\"text-orange-600 border-orange-500 hover:bg-orange-50 hover:text-orange-700 rounded-md shadow-sm\">\n+                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read ({unreadNotifications})\n+                </Button>\n+              )}\n+            </div>\n+            {notifications.length === 0 ? (\n+              <Card className=\"p-10 text-center shadow-md rounded-xl bg-white\">\n+                <Bell className=\"h-20 w-20 text-gray-300 mx-auto mb-5\" />\n+                <p className=\"text-gray-600 text-xl font-medium\">No notifications to display.</p>\n+                <p className=\"text-gray-400 text-sm mt-1.5\">Updates about your complaints and other important alerts will appear here.</p>\n+              </Card>\n+            ) : (\n+              <div className=\"space-y-3.5 max-h-[600px] overflow-y-auto pr-2 -mr-2 nice-scrollbar\">\n+                {notifications.map(n => (\n+                  <Card \n+                    key={n.id} \n+                    className={`p-4 shadow-md hover:shadow-lg transition-all duration-200 rounded-lg cursor-pointer ${!n.read ? 'bg-orange-50 border-l-4 border-orange-500' : 'bg-white opacity-90 hover:opacity-100'}`}\n+                    onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                  >\n+                    <div className=\"flex items-start gap-4\">\n+                      <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(n.status || n.type)}</div>\n+                      <div className=\"flex-1\">\n+                        <p className={`text-sm ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-700'}`}>\n+                          {n.message}\n+                        </p>\n+                        <p className=\"text-xs text-gray-500 mt-1\">\n+                          {formatDistanceToNow(new Date(n.timestamp || n.createdAt || Date.now()), { addSuffix: true })}\n+                        </p>\n+                      </div>\n+                      {!n.read && (\n+                        <Button variant=\"link\" size=\"sm\" className=\"text-xs text-orange-600 hover:text-orange-700 p-0 h-auto self-start\" onClick={(e) => { e.stopPropagation(); markNotificationAsRead(n.id); }}>\n+                          Mark as read\n+                        </Button>\n+                      )}\n+                    </div>\n+                  </Card>\n+                ))}\n+              </div>\n+            )}\n+          </div>\n+        </main>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto p-0 nice-scrollbar rounded-lg\">\n+          <ComplaintForm \n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+        </DialogContent>\n+      </Dialog>\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 8px;\n+          height: 8px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f0f0f0;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; /* orange-500 */\n+          border-radius: 10px;\n+          border: 2px solid #f0f0f0; /* Creates a nice offset */\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; /* orange-600 */\n+        }\n+        .line-clamp-1 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 1;\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+        /* Dialog content padding is removed in component, handled by ComplaintForm if needed */\n+        /* This ensures the scrollbar applies correctly to the DialogContent */\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-9 w-9 p-0 text-gray-500 hover:text-orange-600 hover:bg-orange-100 rounded-md\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl rounded-lg border-gray-200 w-48\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-100 text-gray-700 cursor-pointer py-2 px-3\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2.5 h-4 w-4 text-orange-500\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-100 text-gray-700 cursor-pointer py-2 px-3\" onClick={() => toast.info(\"Download PDF feature is being implemented.\")}>\n+        <Download className=\"mr-2.5 h-4 w-4 text-orange-500\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator className=\"my-1\" />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-100 focus:!text-red-700 cursor-pointer py-2 px-3\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2.5 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748020940244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,708 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  // DialogHeader, // No longer directly used, ComplaintForm might have its own\n+  // DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users, // Keep for potential future use, but financial might need own icon\n+  Building, // Example for Facility\n+  Briefcase, // Example for Academic\n+  UserX, // Example for Staff related issues\n+  DollarSign, // Example for Financial\n+  HelpCircle, // Example for Other\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+  MessageSquare, // Fallback icon for notifications\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  // const database = getDatabase(); // Initialized inside useEffect or where needed to avoid shadowing\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false);\n+      return;\n+    }\n+    setLoading(true);\n+    const db = getDatabase();\n+    const complaintsRef = ref(db, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    const notificationsToastRef = ref(db, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            let icon = 'ℹ️';\n+            if (notification.status === 'rejected') icon = '❌';\n+            else if (notification.status === 'resolved') icon = '✅';\n+            else if (notification.status === 'in_progress') icon = '⏳';\n+            \n+            toast(notification.message, {\n+              icon: icon,\n+              duration: 6000,\n+            });\n+            update(ref(db, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const db = getDatabase();\n+    const notificationsRef = ref(db, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        if (avgHours < 1) {\n+            const avgMinutes = Math.round((avgTimeMs / (1000 * 60)) * 10) / 10;\n+            return `${avgMinutes} min`;\n+        }\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-400';\n+      case 'in_progress': return 'bg-blue-100 text-blue-800 border-blue-400';\n+      case 'resolved': return 'bg-green-100 text-green-800 border-green-400';\n+      case 'rejected': return 'bg-red-100 text-red-800 border-red-400';\n+      case 'cancelled': return 'bg-gray-100 text-gray-800 border-gray-400';\n+      default: return 'bg-gray-100 text-gray-800 border-gray-400';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-800 border-red-400';\n+      case 'medium': return 'bg-orange-100 text-orange-800 border-orange-400';\n+      case 'low': return 'bg-sky-100 text-sky-800 border-sky-400'; // Changed low to sky for better contrast\n+      default: return 'bg-gray-100 text-gray-700 border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBorderClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-500';\n+      case 'medium': return 'bg-orange-500';\n+      case 'low': return 'bg-sky-500';\n+      default: return 'bg-gray-400';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-6 w-6\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <Briefcase {...iconProps} />;\n+      case 'facility': return <Building {...iconProps} />;\n+      case 'staff': return <UserX {...iconProps} />;\n+      case 'financial': return <DollarSign {...iconProps} />;\n+      case 'other': return <HelpCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    try {\n+      const db = getDatabase();\n+      await update(ref(db, `notifications/${user.uid}/${notificationId}`), { read: true });\n+      // toast.success('Notification marked as read'); // Can be too noisy, handled by UI change\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0 || unreadNotifications === 0) return;\n+    try {\n+      const db = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(db), updates);\n+        toast.success('All unread notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled as it's no longer pending.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        const db = getDatabase();\n+        await update(ref(db, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          lastUpdatedAt: new Date().toISOString(),\n+        });\n+        toast.success('Complaint cancelled successfully.');\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+  const getNotificationIcon = (statusOrType) => {\n+    switch (statusOrType?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />;\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />; // Usually admin action makes it pending, but for notification it's relevant\n+      case 'new_complaint_admin': // If admin gets notification for new complaint\n+      case 'submitted': // If user gets confirmation\n+        return <FileText className=\"h-5 w-5 text-indigo-500\" />;\n+      default: return <MessageSquare className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-4\">\n+      <Avatar className=\"h-14 w-14 border-2 border-orange-500 shadow-sm\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback className=\"text-lg bg-orange-100 text-orange-600\">\n+          {user?.displayName?.charAt(0).toUpperCase() || 'U'}\n+        </AvatarFallback>\n+      </Avatar>\n+      <div>\n+        <h2 className=\"text-2xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">\n+          ID: <span className=\"font-medium text-gray-600\">{user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</span>\n+        </p>\n+      </div>\n+    </div>\n+  );\n+\n+  if (loading && complaints.length === 0) {\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-gray-100 to-orange-100\">\n+        <div className=\"text-center\">\n+          <div className=\"animate-spin rounded-full h-20 w-20 border-t-4 border-b-4 border-orange-500 mx-auto\"></div>\n+          <p className=\"mt-4 text-lg font-semibold text-orange-600\">Loading Dashboard...</p>\n+        </div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-100 p-4 md:p-6 lg:p-8\">\n+      <div className=\"container mx-auto\">\n+        {/* Page Title Area */}\n+        <div className=\"mb-6 md:mb-8\">\n+          <h1 className=\"text-4xl font-bold text-gray-800\">Complaint Dashboard</h1>\n+          <p className=\"text-lg text-gray-600 mt-1\">Manage and track your complaints efficiently.</p>\n+        </div>\n+\n+        {/* Profile and Actions Header */}\n+        <header className=\"mb-6 md:mb-10 pb-6 border-b border-gray-300\">\n+          <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4\">\n+            {user ? <UserProfileDisplay user={user} /> : (\n+              <div className=\"flex items-center space-x-4 animate-pulse w-full sm:w-auto\">\n+                <div className=\"h-14 w-14 bg-gray-300 rounded-full\"></div>\n+                <div>\n+                  <div className=\"h-6 w-40 bg-gray-300 rounded mb-1.5\"></div>\n+                  <div className=\"h-4 w-32 bg-gray-300 rounded\"></div>\n+                </div>\n+              </div>\n+            )}\n+            <div className=\"flex items-center space-x-3 sm:space-x-4\">\n+              <DropdownMenu>\n+                <DropdownMenuTrigger asChild>\n+                  <Button variant=\"outline\" size=\"lg\" className=\"relative text-gray-700 hover:text-orange-600 hover:border-orange-400 rounded-lg shadow-sm\">\n+                    <Bell className=\"h-5 w-5\" />\n+                    {unreadNotifications > 0 && (\n+                      <span className=\"absolute -top-1 -right-1 flex h-5 w-5\">\n+                        <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75\"></span>\n+                        <span className=\"relative inline-flex rounded-full h-5 w-5 bg-red-500 text-white text-xs items-center justify-center\">\n+                          {unreadNotifications}\n+                        </span>\n+                      </span>\n+                    )}\n+                  </Button>\n+                </DropdownMenuTrigger>\n+                <DropdownMenuContent align=\"end\" className=\"w-80 md:w-96 shadow-xl rounded-lg border-gray-200 nice-scrollbar\">\n+                  <div className=\"p-3 font-semibold text-gray-700 text-base border-b border-gray-200\">Notifications</div>\n+                  {notifications.length === 0 ? (\n+                    <div className=\"p-4 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                  ) : (\n+                    <div className=\"max-h-96 overflow-y-auto\">\n+                      {notifications.slice(0, 7).map((n) => ( // Show more notifications initially\n+                        <DropdownMenuItem \n+                          key={n.id} \n+                          onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                          className={`flex items-start gap-3 p-3 cursor-pointer transition-colors hover:!bg-orange-100 ${!n.read ? 'bg-orange-50' : 'opacity-80'}`}\n+                        >\n+                          <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(n.status || n.type)}</div>\n+                          <div className=\"flex-1\">\n+                            <p className={`text-sm ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                              {n.message}\n+                            </p>\n+                            <p className=\"text-xs text-gray-500 mt-0.5\">\n+                              {formatDistanceToNow(new Date(n.timestamp || n.createdAt || Date.now()), { addSuffix: true })}\n+                            </p>\n+                          </div>\n+                        </DropdownMenuItem>\n+                      ))}\n+                    </div>\n+                  )}\n+                  {notifications.length > 0 && <DropdownMenuSeparator className=\"my-1\" />}\n+                  <DropdownMenuItem \n+                      onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                      className=\"justify-center p-2.5 text-sm font-medium text-orange-600 hover:!bg-orange-100 hover:!text-orange-700 cursor-pointer\"\n+                  >\n+                    View All Notifications\n+                  </DropdownMenuItem>\n+                </DropdownMenuContent>\n+              </DropdownMenu>\n+\n+              <Button\n+                onClick={handleNewComplaint}\n+                className=\"bg-orange-500 hover:bg-orange-600 text-white font-semibold shadow-md hover:shadow-lg transition-all duration-300 rounded-lg px-5 py-2.5 text-base\"\n+                disabled={!user}\n+                size=\"lg\"\n+              >\n+                <Plus className=\"h-5 w-5 mr-2\" />\n+                New Complaint\n+              </Button>\n+            </div>\n+          </div>\n+        </header>\n+      \n+        <main className=\"space-y-8\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-5\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-6 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl transform hover:-translate-y-1\">\n+                <div className=\"flex items-center justify-between\">\n+                  <div>\n+                    <p className=\"text-sm font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-3xl font-bold text-gray-800 mt-1\">{stat.value}</p>\n+                  </div>\n+                  <div className={`p-3 rounded-full ${stat.color} shadow-md`}>\n+                    <stat.icon className=\"h-7 w-7 text-white\" />\n+                  </div>\n+                </div>\n+              </Card>\n+            ))}\n+          </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-5 shadow-lg rounded-xl\">\n+            <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n+              <div className=\"relative flex-grow w-full md:w-auto\">\n+                <Search className=\"absolute left-3.5 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+                <Input\n+                  type=\"text\"\n+                  placeholder=\"Search by ID, subject, or description...\"\n+                  value={searchQuery}\n+                  onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-12 pr-10 w-full md:min-w-[350px] lg:min-w-[400px] h-11 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 border-gray-300 shadow-sm\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-500 hover:text-gray-700\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4.5 w-4.5\" />\n+                  </Button>\n+                )}\n+              </div>\n+              <div className=\"flex items-center gap-3 self-start md:self-center w-full md:w-auto\">\n+                <span className=\"text-sm font-medium text-gray-600 whitespace-nowrap\">\n+                  <Filter className=\"h-5 w-5 inline mr-1.5 text-orange-500\" />Filter by Status:\n+                </span>\n+                <DropdownMenu>\n+                  <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-lg border-gray-300 hover:border-orange-500 shadow-sm w-full md:w-auto justify-between\">\n+                      {filter === 'all' ? 'All Statuses' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-60\" />\n+                    </Button>\n+                  </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl rounded-lg border-gray-200\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-100 py-2 px-3 text-sm\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </DropdownMenuContent>\n+                </DropdownMenu>\n+              </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && (\n+             <div className=\"flex items-center justify-center py-10\">\n+                <div className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-orange-600\"></div>\n+                <p className=\"ml-3 text-gray-600 text-lg\">Updating complaints list...</p>\n+             </div>\n+          )}\n+          <div className=\"space-y-5\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"relative p-5 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl overflow-hidden group transform hover:-translate-y-1\">\n+                <div className={`absolute left-0 top-0 bottom-0 w-1.5 rounded-l-xl ${getPriorityBorderClass(complaint.priority)} group-hover:w-2.5 transition-all duration-300`}></div>\n+                <div className=\"pl-4\"> {/* Offset content slightly more */}\n+                  <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                    <div className=\"flex items-start space-x-4 flex-1\">\n+                      <div className={`p-3.5 rounded-lg bg-orange-100 text-orange-600 mt-1 shadow-sm`}>\n+                        {getCategoryIcon(complaint.category)}\n+                      </div>\n+                      <div className=\"flex-1\">\n+                        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-1\">\n+                          <h3 className=\"text-lg font-semibold text-gray-800 group-hover:text-orange-600 transition-colors cursor-default line-clamp-1\" title={complaint.subject}>\n+                            {complaint.subject}\n+                          </h3>\n+                          <div className=\"sm:hidden self-end -mt-6\"> {/* Actions for mobile */}\n+                              <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                          </div>\n+                        </div>\n+                        <p className=\"text-xs text-gray-500 mb-2\">ID: <span className=\"font-medium text-gray-600\">{complaint.id}</span></p>\n+                        <p className=\"text-sm text-gray-700 mb-3 leading-relaxed line-clamp-2\">\n+                          {complaint.description}\n+                        </p>\n+                        <div className=\"flex flex-wrap items-center gap-x-3 gap-y-2\">\n+                          <Badge className={`text-xs font-medium px-2.5 py-1 border ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                            {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                          </Badge>\n+                          <Badge className={`text-xs font-medium px-2.5 py-1 border ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                            {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                          </Badge>\n+                          <span className=\"text-xs text-gray-500 flex items-center\">\n+                            <Calendar className=\"h-3.5 w-3.5 mr-1.5 text-gray-400\" />\n+                            {format(new Date(complaint.submittedAt), 'MMM d, yyyy, HH:mm')}\n+                          </span>\n+                        </div>\n+                      </div>\n+                    </div>\n+                    <div className=\"hidden sm:flex flex-col items-end space-y-2 mt-1 sm:mt-0 sm:ml-4\">\n+                      <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                      {/* You can add a \"View Details\" button here if needed */}\n+                    </div>\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && (\n+                <Card className=\"text-center py-16 shadow-lg rounded-xl bg-gradient-to-br from-gray-50 to-orange-50\">\n+                  <FileText className=\"h-24 w-24 text-orange-300 mx-auto mb-6\" />\n+                  <p className=\"text-gray-700 text-2xl font-semibold mb-2\">No Complaints Found</p>\n+                  <p className=\"text-gray-500 text-base mb-6 max-w-md mx-auto\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'It looks like you haven\\'t submitted any complaints yet. Get started by creating one!'\n+                      : 'Try adjusting your search query or filter settings to find what you\\'re looking for.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"lg\" className=\"bg-orange-500 hover:bg-orange-600 text-white text-lg px-8 py-3 rounded-lg shadow-md hover:shadow-lg transition-shadow\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-5 w-5 mr-2\" /> Create Your First Complaint\n+                    </Button>\n+                  )}\n+                </Card>\n+              )\n+            )}\n+          </div>\n+\n+          {/* Notifications Panel Section */}\n+          <div id=\"notifications-panel\" className=\"mt-12 pt-8 border-t border-gray-300\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3\">\n+              <h2 className=\"text-3xl font-semibold text-gray-800\">All Notifications</h2>\n+              {notifications.length > 0 && unreadNotifications > 0 && (\n+                <Button variant=\"outline\" size=\"sm\" onClick={markAllNotificationsAsRead} className=\"text-orange-600 border-orange-500 hover:bg-orange-50 hover:text-orange-700 rounded-md shadow-sm\">\n+                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read ({unreadNotifications})\n+                </Button>\n+              )}\n+            </div>\n+            {notifications.length === 0 ? (\n+              <Card className=\"p-10 text-center shadow-md rounded-xl bg-white\">\n+                <Bell className=\"h-20 w-20 text-gray-300 mx-auto mb-5\" />\n+                <p className=\"text-gray-600 text-xl font-medium\">No notifications to display.</p>\n+                <p className=\"text-gray-400 text-sm mt-1.5\">Updates about your complaints and other important alerts will appear here.</p>\n+              </Card>\n+            ) : (\n+              <div className=\"space-y-3.5 max-h-[600px] overflow-y-auto pr-2 -mr-2 nice-scrollbar\">\n+                {notifications.map(n => (\n+                  <Card \n+                    key={n.id} \n+                    className={`p-4 shadow-md hover:shadow-lg transition-all duration-200 rounded-lg cursor-pointer ${!n.read ? 'bg-orange-50 border-l-4 border-orange-500' : 'bg-white opacity-90 hover:opacity-100'}`}\n+                    onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                  >\n+                    <div className=\"flex items-start gap-4\">\n+                      <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(n.status || n.type)}</div>\n+                      <div className=\"flex-1\">\n+                        <p className={`text-sm ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-700'}`}>\n+                          {n.message}\n+                        </p>\n+                        <p className=\"text-xs text-gray-500 mt-1\">\n+                          {formatDistanceToNow(new Date(n.timestamp || n.createdAt || Date.now()), { addSuffix: true })}\n+                        </p>\n+                      </div>\n+                      {!n.read && (\n+                        <Button variant=\"link\" size=\"sm\" className=\"text-xs text-orange-600 hover:text-orange-700 p-0 h-auto self-start\" onClick={(e) => { e.stopPropagation(); markNotificationAsRead(n.id); }}>\n+                          Mark as read\n+                        </Button>\n+                      )}\n+                    </div>\n+                  </Card>\n+                ))}\n+              </div>\n+            )}\n+          </div>\n+        </main>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto p-0 nice-scrollbar rounded-lg\">\n+          <ComplaintForm \n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+        </DialogContent>\n+      </Dialog>\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 8px;\n+          height: 8px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f0f0f0;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; /* orange-500 */\n+          border-radius: 10px;\n+          border: 2px solid #f0f0f0; /* Creates a nice offset */\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; /* orange-600 */\n+        }\n+        .line-clamp-1 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 1;\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+        /* Dialog content padding is removed in component, handled by ComplaintForm if needed */\n+        /* This ensures the scrollbar applies correctly to the DialogContent */\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-9 w-9 p-0 text-gray-500 hover:text-orange-600 hover:bg-orange-100 rounded-md\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl rounded-lg border-gray-200 w-48\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-100 text-gray-700 cursor-pointer py-2 px-3\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2.5 h-4 w-4 text-orange-500\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-100 text-gray-700 cursor-pointer py-2 px-3\" onClick={() => toast.info(\"Download PDF feature is being implemented.\")}>\n+        <Download className=\"mr-2.5 h-4 w-4 text-orange-500\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator className=\"my-1\" />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-100 focus:!text-red-700 cursor-pointer py-2 px-3\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2.5 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748020947569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,683 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n+        {/* Notifications Panel (Left Sidebar on LG+) */}\n+        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n+          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n+            <div className=\"p-4 border-b bg-white\">\n+              <div className=\"flex items-center justify-between\">\n+                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n+                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n+                  Activity Feed\n+                </h3>\n+                {unreadNotifications > 0 && (\n+                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n+                )}\n+              </div>\n+            </div>\n+            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n+              {notifications.length === 0 && (\n+                <div className=\"p-6 text-center text-gray-500\">\n+                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n+                  <p className=\"font-medium\">All caught up!</p>\n+                  <p className=\"text-sm\">No new notifications.</p>\n+                </div>\n+              )}\n+              {notifications.map((notification) => (\n+                <div\n+                  key={notification.id}\n+                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n+                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n+                  }`}\n+                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n+                >\n+                  <div className=\"flex items-start gap-3\">\n+                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n+                    <div className=\"flex-1\">\n+                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n+                        {notification.message}\n+                      </p>\n+                      <p className=\"text-xs text-gray-500 mt-1\">\n+                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n+                      </p>\n+                    </div>\n+                    {!notification.read && (\n+                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n+                    )}\n+                  </div>\n+                </div>\n+              ))}\n+            </div>\n+            {notifications.length > 0 && unreadNotifications > 0 && (\n+              <div className=\"p-3 border-t bg-white\">\n+                <Button\n+                  variant=\"outline\"\n+                  size=\"sm\"\n+                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n+                  onClick={markAllNotificationsAsRead}\n+                  disabled={unreadNotifications === 0}\n+                >\n+                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n+                </Button>\n+              </div>\n+            )}\n+          </Card>\n+        </div>\n+\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n+          <DialogHeader>\n+            <DialogTitle>Submit a Complaint</DialogTitle>\n+          </DialogHeader>\n+          <ComplaintForm \n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+        </DialogContent>\n+      </Dialog>\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748021061058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,620 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto\">\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n+          <DialogHeader>\n+            <DialogTitle>Submit a Complaint</DialogTitle>\n+          </DialogHeader>\n+          <ComplaintForm \n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+        </DialogContent>\n+      </Dialog>\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748021180214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -616,6066 +616,5 @@\n     </DropdownMenuContent>\n   </DropdownMenu>\n );\n \n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogHeader,\n-  DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-    // Remove any existing dialog with the same ID\n-    const existingDialog = document.querySelector('[role=\"dialog\"]');\n-    if (existingDialog) {\n-      existingDialog.remove();\n-    }\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n-          </div>\n-        </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n-        {/* Notifications Panel (Left Sidebar on LG+) */}\n-        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n-          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n-            <div className=\"p-4 border-b bg-white\">\n-              <div className=\"flex items-center justify-between\">\n-                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n-                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n-                  Activity Feed\n-                </h3>\n-                {unreadNotifications > 0 && (\n-                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n-                )}\n-              </div>\n-            </div>\n-            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n-              {notifications.length === 0 && (\n-                <div className=\"p-6 text-center text-gray-500\">\n-                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n-                  <p className=\"font-medium\">All caught up!</p>\n-                  <p className=\"text-sm\">No new notifications.</p>\n-                </div>\n-              )}\n-              {notifications.map((notification) => (\n-                <div\n-                  key={notification.id}\n-                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n-                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n-                  }`}\n-                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n-                >\n-                  <div className=\"flex items-start gap-3\">\n-                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n-                    <div className=\"flex-1\">\n-                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n-                        {notification.message}\n-                      </p>\n-                      <p className=\"text-xs text-gray-500 mt-1\">\n-                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n-                      </p>\n-                    </div>\n-                    {!notification.read && (\n-                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n-                    )}\n-                  </div>\n-                </div>\n-              ))}\n-            </div>\n-            {notifications.length > 0 && unreadNotifications > 0 && (\n-              <div className=\"p-3 border-t bg-white\">\n-                <Button\n-                  variant=\"outline\"\n-                  size=\"sm\"\n-                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n-                  onClick={markAllNotificationsAsRead}\n-                  disabled={unreadNotifications === 0}\n-                >\n-                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n-                </Button>\n-              </div>\n-            )}\n-          </Card>\n-        </div>\n-\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n-        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n-          <DialogHeader>\n-            <DialogTitle>Submit a Complaint</DialogTitle>\n-          </DialogHeader>\n-          <ComplaintForm \n-            onClose={() => setIsFormOpen(false)}\n-            onSubmit={handleComplaintSubmit}\n-          />\n-        </DialogContent>\n-      </Dialog>\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  // DialogHeader, // No longer directly used, ComplaintForm might have its own\n-  // DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users, // Keep for potential future use, but financial might need own icon\n-  Building, // Example for Facility\n-  Briefcase, // Example for Academic\n-  UserX, // Example for Staff related issues\n-  DollarSign, // Example for Financial\n-  HelpCircle, // Example for Other\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-  MessageSquare, // Fallback icon for notifications\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  // const database = getDatabase(); // Initialized inside useEffect or where needed to avoid shadowing\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false);\n-      return;\n-    }\n-    setLoading(true);\n-    const db = getDatabase();\n-    const complaintsRef = ref(db, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    const notificationsToastRef = ref(db, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            let icon = 'ℹ️';\n-            if (notification.status === 'rejected') icon = '❌';\n-            else if (notification.status === 'resolved') icon = '✅';\n-            else if (notification.status === 'in_progress') icon = '⏳';\n-            \n-            toast(notification.message, {\n-              icon: icon,\n-              duration: 6000,\n-            });\n-            update(ref(db, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const db = getDatabase();\n-    const notificationsRef = ref(db, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        if (avgHours < 1) {\n-            const avgMinutes = Math.round((avgTimeMs / (1000 * 60)) * 10) / 10;\n-            return `${avgMinutes} min`;\n-        }\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-400';\n-      case 'in_progress': return 'bg-blue-100 text-blue-800 border-blue-400';\n-      case 'resolved': return 'bg-green-100 text-green-800 border-green-400';\n-      case 'rejected': return 'bg-red-100 text-red-800 border-red-400';\n-      case 'cancelled': return 'bg-gray-100 text-gray-800 border-gray-400';\n-      default: return 'bg-gray-100 text-gray-800 border-gray-400';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-800 border-red-400';\n-      case 'medium': return 'bg-orange-100 text-orange-800 border-orange-400';\n-      case 'low': return 'bg-sky-100 text-sky-800 border-sky-400'; // Changed low to sky for better contrast\n-      default: return 'bg-gray-100 text-gray-700 border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBorderClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-500';\n-      case 'medium': return 'bg-orange-500';\n-      case 'low': return 'bg-sky-500';\n-      default: return 'bg-gray-400';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-6 w-6\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <Briefcase {...iconProps} />;\n-      case 'facility': return <Building {...iconProps} />;\n-      case 'staff': return <UserX {...iconProps} />;\n-      case 'financial': return <DollarSign {...iconProps} />;\n-      case 'other': return <HelpCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    try {\n-      const db = getDatabase();\n-      await update(ref(db, `notifications/${user.uid}/${notificationId}`), { read: true });\n-      // toast.success('Notification marked as read'); // Can be too noisy, handled by UI change\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0 || unreadNotifications === 0) return;\n-    try {\n-      const db = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(db), updates);\n-        toast.success('All unread notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled as it's no longer pending.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        const db = getDatabase();\n-        await update(ref(db, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          lastUpdatedAt: new Date().toISOString(),\n-        });\n-        toast.success('Complaint cancelled successfully.');\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-  const getNotificationIcon = (statusOrType) => {\n-    switch (statusOrType?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />;\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />; // Usually admin action makes it pending, but for notification it's relevant\n-      case 'new_complaint_admin': // If admin gets notification for new complaint\n-      case 'submitted': // If user gets confirmation\n-        return <FileText className=\"h-5 w-5 text-indigo-500\" />;\n-      default: return <MessageSquare className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-4\">\n-      <Avatar className=\"h-14 w-14 border-2 border-orange-500 shadow-sm\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback className=\"text-lg bg-orange-100 text-orange-600\">\n-          {user?.displayName?.charAt(0).toUpperCase() || 'U'}\n-        </AvatarFallback>\n-      </Avatar>\n-      <div>\n-        <h2 className=\"text-2xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">\n-          ID: <span className=\"font-medium text-gray-600\">{user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</span>\n-        </p>\n-      </div>\n-    </div>\n-  );\n-\n-  if (loading && complaints.length === 0) {\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-gray-100 to-orange-100\">\n-        <div className=\"text-center\">\n-          <div className=\"animate-spin rounded-full h-20 w-20 border-t-4 border-b-4 border-orange-500 mx-auto\"></div>\n-          <p className=\"mt-4 text-lg font-semibold text-orange-600\">Loading Dashboard...</p>\n-        </div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-100 p-4 md:p-6 lg:p-8\">\n-      <div className=\"container mx-auto\">\n-        {/* Page Title Area */}\n-        <div className=\"mb-6 md:mb-8\">\n-          <h1 className=\"text-4xl font-bold text-gray-800\">Complaint Dashboard</h1>\n-          <p className=\"text-lg text-gray-600 mt-1\">Manage and track your complaints efficiently.</p>\n-        </div>\n-\n-        {/* Profile and Actions Header */}\n-        <header className=\"mb-6 md:mb-10 pb-6 border-b border-gray-300\">\n-          <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4\">\n-            {user ? <UserProfileDisplay user={user} /> : (\n-              <div className=\"flex items-center space-x-4 animate-pulse w-full sm:w-auto\">\n-                <div className=\"h-14 w-14 bg-gray-300 rounded-full\"></div>\n-                <div>\n-                  <div className=\"h-6 w-40 bg-gray-300 rounded mb-1.5\"></div>\n-                  <div className=\"h-4 w-32 bg-gray-300 rounded\"></div>\n-                </div>\n-              </div>\n-            )}\n-            <div className=\"flex items-center space-x-3 sm:space-x-4\">\n-              <DropdownMenu>\n-                <DropdownMenuTrigger asChild>\n-                  <Button variant=\"outline\" size=\"lg\" className=\"relative text-gray-700 hover:text-orange-600 hover:border-orange-400 rounded-lg shadow-sm\">\n-                    <Bell className=\"h-5 w-5\" />\n-                    {unreadNotifications > 0 && (\n-                      <span className=\"absolute -top-1 -right-1 flex h-5 w-5\">\n-                        <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75\"></span>\n-                        <span className=\"relative inline-flex rounded-full h-5 w-5 bg-red-500 text-white text-xs items-center justify-center\">\n-                          {unreadNotifications}\n-                        </span>\n-                      </span>\n-                    )}\n-                  </Button>\n-                </DropdownMenuTrigger>\n-                <DropdownMenuContent align=\"end\" className=\"w-80 md:w-96 shadow-xl rounded-lg border-gray-200 nice-scrollbar\">\n-                  <div className=\"p-3 font-semibold text-gray-700 text-base border-b border-gray-200\">Notifications</div>\n-                  {notifications.length === 0 ? (\n-                    <div className=\"p-4 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                  ) : (\n-                    <div className=\"max-h-96 overflow-y-auto\">\n-                      {notifications.slice(0, 7).map((n) => ( // Show more notifications initially\n-                        <DropdownMenuItem \n-                          key={n.id} \n-                          onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                          className={`flex items-start gap-3 p-3 cursor-pointer transition-colors hover:!bg-orange-100 ${!n.read ? 'bg-orange-50' : 'opacity-80'}`}\n-                        >\n-                          <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(n.status || n.type)}</div>\n-                          <div className=\"flex-1\">\n-                            <p className={`text-sm ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                              {n.message}\n-                            </p>\n-                            <p className=\"text-xs text-gray-500 mt-0.5\">\n-                              {formatDistanceToNow(new Date(n.timestamp || n.createdAt || Date.now()), { addSuffix: true })}\n-                            </p>\n-                          </div>\n-                        </DropdownMenuItem>\n-                      ))}\n-                    </div>\n-                  )}\n-                  {notifications.length > 0 && <DropdownMenuSeparator className=\"my-1\" />}\n-                  <DropdownMenuItem \n-                      onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                      className=\"justify-center p-2.5 text-sm font-medium text-orange-600 hover:!bg-orange-100 hover:!text-orange-700 cursor-pointer\"\n-                  >\n-                    View All Notifications\n-                  </DropdownMenuItem>\n-                </DropdownMenuContent>\n-              </DropdownMenu>\n-\n-              <Button\n-                onClick={handleNewComplaint}\n-                className=\"bg-orange-500 hover:bg-orange-600 text-white font-semibold shadow-md hover:shadow-lg transition-all duration-300 rounded-lg px-5 py-2.5 text-base\"\n-                disabled={!user}\n-                size=\"lg\"\n-              >\n-                <Plus className=\"h-5 w-5 mr-2\" />\n-                New Complaint\n-              </Button>\n-            </div>\n-          </div>\n-        </header>\n-      \n-        <main className=\"space-y-8\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-5\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-6 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl transform hover:-translate-y-1\">\n-                <div className=\"flex items-center justify-between\">\n-                  <div>\n-                    <p className=\"text-sm font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-3xl font-bold text-gray-800 mt-1\">{stat.value}</p>\n-                  </div>\n-                  <div className={`p-3 rounded-full ${stat.color} shadow-md`}>\n-                    <stat.icon className=\"h-7 w-7 text-white\" />\n-                  </div>\n-                </div>\n-              </Card>\n-            ))}\n-          </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-5 shadow-lg rounded-xl\">\n-            <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n-              <div className=\"relative flex-grow w-full md:w-auto\">\n-                <Search className=\"absolute left-3.5 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-                <Input\n-                  type=\"text\"\n-                  placeholder=\"Search by ID, subject, or description...\"\n-                  value={searchQuery}\n-                  onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-12 pr-10 w-full md:min-w-[350px] lg:min-w-[400px] h-11 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 border-gray-300 shadow-sm\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-500 hover:text-gray-700\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4.5 w-4.5\" />\n-                  </Button>\n-                )}\n-              </div>\n-              <div className=\"flex items-center gap-3 self-start md:self-center w-full md:w-auto\">\n-                <span className=\"text-sm font-medium text-gray-600 whitespace-nowrap\">\n-                  <Filter className=\"h-5 w-5 inline mr-1.5 text-orange-500\" />Filter by Status:\n-                </span>\n-                <DropdownMenu>\n-                  <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-lg border-gray-300 hover:border-orange-500 shadow-sm w-full md:w-auto justify-between\">\n-                      {filter === 'all' ? 'All Statuses' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-60\" />\n-                    </Button>\n-                  </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl rounded-lg border-gray-200\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-100 py-2 px-3 text-sm\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </DropdownMenuContent>\n-                </DropdownMenu>\n-              </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && (\n-             <div className=\"flex items-center justify-center py-10\">\n-                <div className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-orange-600\"></div>\n-                <p className=\"ml-3 text-gray-600 text-lg\">Updating complaints list...</p>\n-             </div>\n-          )}\n-          <div className=\"space-y-5\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"relative p-5 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl overflow-hidden group transform hover:-translate-y-1\">\n-                <div className={`absolute left-0 top-0 bottom-0 w-1.5 rounded-l-xl ${getPriorityBorderClass(complaint.priority)} group-hover:w-2.5 transition-all duration-300`}></div>\n-                <div className=\"pl-4\"> {/* Offset content slightly more */}\n-                  <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                    <div className=\"flex items-start space-x-4 flex-1\">\n-                      <div className={`p-3.5 rounded-lg bg-orange-100 text-orange-600 mt-1 shadow-sm`}>\n-                        {getCategoryIcon(complaint.category)}\n-                      </div>\n-                      <div className=\"flex-1\">\n-                        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-1\">\n-                          <h3 className=\"text-lg font-semibold text-gray-800 group-hover:text-orange-600 transition-colors cursor-default line-clamp-1\" title={complaint.subject}>\n-                            {complaint.subject}\n-                          </h3>\n-                          <div className=\"sm:hidden self-end -mt-6\"> {/* Actions for mobile */}\n-                              <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                          </div>\n-                        </div>\n-                        <p className=\"text-xs text-gray-500 mb-2\">ID: <span className=\"font-medium text-gray-600\">{complaint.id}</span></p>\n-                        <p className=\"text-sm text-gray-700 mb-3 leading-relaxed line-clamp-2\">\n-                          {complaint.description}\n-                        </p>\n-                        <div className=\"flex flex-wrap items-center gap-x-3 gap-y-2\">\n-                          <Badge className={`text-xs font-medium px-2.5 py-1 border ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                            {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                          </Badge>\n-                          <Badge className={`text-xs font-medium px-2.5 py-1 border ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                            {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                          </Badge>\n-                          <span className=\"text-xs text-gray-500 flex items-center\">\n-                            <Calendar className=\"h-3.5 w-3.5 mr-1.5 text-gray-400\" />\n-                            {format(new Date(complaint.submittedAt), 'MMM d, yyyy, HH:mm')}\n-                          </span>\n-                        </div>\n-                      </div>\n-                    </div>\n-                    <div className=\"hidden sm:flex flex-col items-end space-y-2 mt-1 sm:mt-0 sm:ml-4\">\n-                      <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                      {/* You can add a \"View Details\" button here if needed */}\n-                    </div>\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && (\n-                <Card className=\"text-center py-16 shadow-lg rounded-xl bg-gradient-to-br from-gray-50 to-orange-50\">\n-                  <FileText className=\"h-24 w-24 text-orange-300 mx-auto mb-6\" />\n-                  <p className=\"text-gray-700 text-2xl font-semibold mb-2\">No Complaints Found</p>\n-                  <p className=\"text-gray-500 text-base mb-6 max-w-md mx-auto\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'It looks like you haven\\'t submitted any complaints yet. Get started by creating one!'\n-                      : 'Try adjusting your search query or filter settings to find what you\\'re looking for.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"lg\" className=\"bg-orange-500 hover:bg-orange-600 text-white text-lg px-8 py-3 rounded-lg shadow-md hover:shadow-lg transition-shadow\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-5 w-5 mr-2\" /> Create Your First Complaint\n-                    </Button>\n-                  )}\n-                </Card>\n-              )\n-            )}\n-          </div>\n-\n-          {/* Notifications Panel Section */}\n-          <div id=\"notifications-panel\" className=\"mt-12 pt-8 border-t border-gray-300\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3\">\n-              <h2 className=\"text-3xl font-semibold text-gray-800\">All Notifications</h2>\n-              {notifications.length > 0 && unreadNotifications > 0 && (\n-                <Button variant=\"outline\" size=\"sm\" onClick={markAllNotificationsAsRead} className=\"text-orange-600 border-orange-500 hover:bg-orange-50 hover:text-orange-700 rounded-md shadow-sm\">\n-                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read ({unreadNotifications})\n-                </Button>\n-              )}\n-            </div>\n-            {notifications.length === 0 ? (\n-              <Card className=\"p-10 text-center shadow-md rounded-xl bg-white\">\n-                <Bell className=\"h-20 w-20 text-gray-300 mx-auto mb-5\" />\n-                <p className=\"text-gray-600 text-xl font-medium\">No notifications to display.</p>\n-                <p className=\"text-gray-400 text-sm mt-1.5\">Updates about your complaints and other important alerts will appear here.</p>\n-              </Card>\n-            ) : (\n-              <div className=\"space-y-3.5 max-h-[600px] overflow-y-auto pr-2 -mr-2 nice-scrollbar\">\n-                {notifications.map(n => (\n-                  <Card \n-                    key={n.id} \n-                    className={`p-4 shadow-md hover:shadow-lg transition-all duration-200 rounded-lg cursor-pointer ${!n.read ? 'bg-orange-50 border-l-4 border-orange-500' : 'bg-white opacity-90 hover:opacity-100'}`}\n-                    onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                  >\n-                    <div className=\"flex items-start gap-4\">\n-                      <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(n.status || n.type)}</div>\n-                      <div className=\"flex-1\">\n-                        <p className={`text-sm ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-700'}`}>\n-                          {n.message}\n-                        </p>\n-                        <p className=\"text-xs text-gray-500 mt-1\">\n-                          {formatDistanceToNow(new Date(n.timestamp || n.createdAt || Date.now()), { addSuffix: true })}\n-                        </p>\n-                      </div>\n-                      {!n.read && (\n-                        <Button variant=\"link\" size=\"sm\" className=\"text-xs text-orange-600 hover:text-orange-700 p-0 h-auto self-start\" onClick={(e) => { e.stopPropagation(); markNotificationAsRead(n.id); }}>\n-                          Mark as read\n-                        </Button>\n-                      )}\n-                    </div>\n-                  </Card>\n-                ))}\n-              </div>\n-            )}\n-          </div>\n-        </main>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n-        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto p-0 nice-scrollbar rounded-lg\">\n-          <ComplaintForm \n-            onClose={() => setIsFormOpen(false)}\n-            onSubmit={handleComplaintSubmit}\n-          />\n-        </DialogContent>\n-      </Dialog>\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 8px;\n-          height: 8px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f0f0f0;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; /* orange-500 */\n-          border-radius: 10px;\n-          border: 2px solid #f0f0f0; /* Creates a nice offset */\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; /* orange-600 */\n-        }\n-        .line-clamp-1 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 1;\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-        /* Dialog content padding is removed in component, handled by ComplaintForm if needed */\n-        /* This ensures the scrollbar applies correctly to the DialogContent */\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-9 w-9 p-0 text-gray-500 hover:text-orange-600 hover:bg-orange-100 rounded-md\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl rounded-lg border-gray-200 w-48\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-100 text-gray-700 cursor-pointer py-2 px-3\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2.5 h-4 w-4 text-orange-500\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-100 text-gray-700 cursor-pointer py-2 px-3\" onClick={() => toast.info(\"Download PDF feature is being implemented.\")}>\n-        <Download className=\"mr-2.5 h-4 w-4 text-orange-500\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator className=\"my-1\" />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-100 focus:!text-red-700 cursor-pointer py-2 px-3\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2.5 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  // DialogHeader, // No longer directly used, ComplaintForm might have its own\n-  // DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users, // Keep for potential future use, but financial might need own icon\n-  Building, // Example for Facility\n-  Briefcase, // Example for Academic\n-  UserX, // Example for Staff related issues\n-  DollarSign, // Example for Financial\n-  HelpCircle, // Example for Other\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-  MessageSquare, // Fallback icon for notifications\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  // const database = getDatabase(); // Initialized inside useEffect or where needed to avoid shadowing\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false);\n-      return;\n-    }\n-    setLoading(true);\n-    const db = getDatabase();\n-    const complaintsRef = ref(db, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    const notificationsToastRef = ref(db, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            let icon = 'ℹ️';\n-            if (notification.status === 'rejected') icon = '❌';\n-            else if (notification.status === 'resolved') icon = '✅';\n-            else if (notification.status === 'in_progress') icon = '⏳';\n-            \n-            toast(notification.message, {\n-              icon: icon,\n-              duration: 6000,\n-            });\n-            update(ref(db, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const db = getDatabase();\n-    const notificationsRef = ref(db, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        if (avgHours < 1) {\n-            const avgMinutes = Math.round((avgTimeMs / (1000 * 60)) * 10) / 10;\n-            return `${avgMinutes} min`;\n-        }\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-400';\n-      case 'in_progress': return 'bg-blue-100 text-blue-800 border-blue-400';\n-      case 'resolved': return 'bg-green-100 text-green-800 border-green-400';\n-      case 'rejected': return 'bg-red-100 text-red-800 border-red-400';\n-      case 'cancelled': return 'bg-gray-100 text-gray-800 border-gray-400';\n-      default: return 'bg-gray-100 text-gray-800 border-gray-400';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-800 border-red-400';\n-      case 'medium': return 'bg-orange-100 text-orange-800 border-orange-400';\n-      case 'low': return 'bg-sky-100 text-sky-800 border-sky-400'; // Changed low to sky for better contrast\n-      default: return 'bg-gray-100 text-gray-700 border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBorderClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-500';\n-      case 'medium': return 'bg-orange-500';\n-      case 'low': return 'bg-sky-500';\n-      default: return 'bg-gray-400';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-6 w-6\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <Briefcase {...iconProps} />;\n-      case 'facility': return <Building {...iconProps} />;\n-      case 'staff': return <UserX {...iconProps} />;\n-      case 'financial': return <DollarSign {...iconProps} />;\n-      case 'other': return <HelpCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    try {\n-      const db = getDatabase();\n-      await update(ref(db, `notifications/${user.uid}/${notificationId}`), { read: true });\n-      // toast.success('Notification marked as read'); // Can be too noisy, handled by UI change\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0 || unreadNotifications === 0) return;\n-    try {\n-      const db = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(db), updates);\n-        toast.success('All unread notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled as it's no longer pending.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        const db = getDatabase();\n-        await update(ref(db, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          lastUpdatedAt: new Date().toISOString(),\n-        });\n-        toast.success('Complaint cancelled successfully.');\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-  const getNotificationIcon = (statusOrType) => {\n-    switch (statusOrType?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />;\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />; // Usually admin action makes it pending, but for notification it's relevant\n-      case 'new_complaint_admin': // If admin gets notification for new complaint\n-      case 'submitted': // If user gets confirmation\n-        return <FileText className=\"h-5 w-5 text-indigo-500\" />;\n-      default: return <MessageSquare className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-4\">\n-      <Avatar className=\"h-14 w-14 border-2 border-orange-500 shadow-sm\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback className=\"text-lg bg-orange-100 text-orange-600\">\n-          {user?.displayName?.charAt(0).toUpperCase() || 'U'}\n-        </AvatarFallback>\n-      </Avatar>\n-      <div>\n-        <h2 className=\"text-2xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">\n-          ID: <span className=\"font-medium text-gray-600\">{user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</span>\n-        </p>\n-      </div>\n-    </div>\n-  );\n-\n-  if (loading && complaints.length === 0) {\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-gray-100 to-orange-100\">\n-        <div className=\"text-center\">\n-          <div className=\"animate-spin rounded-full h-20 w-20 border-t-4 border-b-4 border-orange-500 mx-auto\"></div>\n-          <p className=\"mt-4 text-lg font-semibold text-orange-600\">Loading Dashboard...</p>\n-        </div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-100 p-4 md:p-6 lg:p-8\">\n-      <div className=\"container mx-auto\">\n-        {/* Page Title Area */}\n-        <div className=\"mb-6 md:mb-8\">\n-          <h1 className=\"text-4xl font-bold text-gray-800\">Complaint Dashboard</h1>\n-          <p className=\"text-lg text-gray-600 mt-1\">Manage and track your complaints efficiently.</p>\n-        </div>\n-\n-        {/* Profile and Actions Header */}\n-        <header className=\"mb-6 md:mb-10 pb-6 border-b border-gray-300\">\n-          <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4\">\n-            {user ? <UserProfileDisplay user={user} /> : (\n-              <div className=\"flex items-center space-x-4 animate-pulse w-full sm:w-auto\">\n-                <div className=\"h-14 w-14 bg-gray-300 rounded-full\"></div>\n-                <div>\n-                  <div className=\"h-6 w-40 bg-gray-300 rounded mb-1.5\"></div>\n-                  <div className=\"h-4 w-32 bg-gray-300 rounded\"></div>\n-                </div>\n-              </div>\n-            )}\n-            <div className=\"flex items-center space-x-3 sm:space-x-4\">\n-              <DropdownMenu>\n-                <DropdownMenuTrigger asChild>\n-                  <Button variant=\"outline\" size=\"lg\" className=\"relative text-gray-700 hover:text-orange-600 hover:border-orange-400 rounded-lg shadow-sm\">\n-                    <Bell className=\"h-5 w-5\" />\n-                    {unreadNotifications > 0 && (\n-                      <span className=\"absolute -top-1 -right-1 flex h-5 w-5\">\n-                        <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75\"></span>\n-                        <span className=\"relative inline-flex rounded-full h-5 w-5 bg-red-500 text-white text-xs items-center justify-center\">\n-                          {unreadNotifications}\n-                        </span>\n-                      </span>\n-                    )}\n-                  </Button>\n-                </DropdownMenuTrigger>\n-                <DropdownMenuContent align=\"end\" className=\"w-80 md:w-96 shadow-xl rounded-lg border-gray-200 nice-scrollbar\">\n-                  <div className=\"p-3 font-semibold text-gray-700 text-base border-b border-gray-200\">Notifications</div>\n-                  {notifications.length === 0 ? (\n-                    <div className=\"p-4 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                  ) : (\n-                    <div className=\"max-h-96 overflow-y-auto\">\n-                      {notifications.slice(0, 7).map((n) => ( // Show more notifications initially\n-                        <DropdownMenuItem \n-                          key={n.id} \n-                          onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                          className={`flex items-start gap-3 p-3 cursor-pointer transition-colors hover:!bg-orange-100 ${!n.read ? 'bg-orange-50' : 'opacity-80'}`}\n-                        >\n-                          <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(n.status || n.type)}</div>\n-                          <div className=\"flex-1\">\n-                            <p className={`text-sm ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                              {n.message}\n-                            </p>\n-                            <p className=\"text-xs text-gray-500 mt-0.5\">\n-                              {formatDistanceToNow(new Date(n.timestamp || n.createdAt || Date.now()), { addSuffix: true })}\n-                            </p>\n-                          </div>\n-                        </DropdownMenuItem>\n-                      ))}\n-                    </div>\n-                  )}\n-                  {notifications.length > 0 && <DropdownMenuSeparator className=\"my-1\" />}\n-                  <DropdownMenuItem \n-                      onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                      className=\"justify-center p-2.5 text-sm font-medium text-orange-600 hover:!bg-orange-100 hover:!text-orange-700 cursor-pointer\"\n-                  >\n-                    View All Notifications\n-                  </DropdownMenuItem>\n-                </DropdownMenuContent>\n-              </DropdownMenu>\n-\n-              <Button\n-                onClick={handleNewComplaint}\n-                className=\"bg-orange-500 hover:bg-orange-600 text-white font-semibold shadow-md hover:shadow-lg transition-all duration-300 rounded-lg px-5 py-2.5 text-base\"\n-                disabled={!user}\n-                size=\"lg\"\n-              >\n-                <Plus className=\"h-5 w-5 mr-2\" />\n-                New Complaint\n-              </Button>\n-            </div>\n-          </div>\n-        </header>\n-      \n-        <main className=\"space-y-8\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-5\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-6 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl transform hover:-translate-y-1\">\n-                <div className=\"flex items-center justify-between\">\n-                  <div>\n-                    <p className=\"text-sm font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-3xl font-bold text-gray-800 mt-1\">{stat.value}</p>\n-                  </div>\n-                  <div className={`p-3 rounded-full ${stat.color} shadow-md`}>\n-                    <stat.icon className=\"h-7 w-7 text-white\" />\n-                  </div>\n-                </div>\n-              </Card>\n-            ))}\n-          </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-5 shadow-lg rounded-xl\">\n-            <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n-              <div className=\"relative flex-grow w-full md:w-auto\">\n-                <Search className=\"absolute left-3.5 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-                <Input\n-                  type=\"text\"\n-                  placeholder=\"Search by ID, subject, or description...\"\n-                  value={searchQuery}\n-                  onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-12 pr-10 w-full md:min-w-[350px] lg:min-w-[400px] h-11 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 border-gray-300 shadow-sm\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-500 hover:text-gray-700\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4.5 w-4.5\" />\n-                  </Button>\n-                )}\n-              </div>\n-              <div className=\"flex items-center gap-3 self-start md:self-center w-full md:w-auto\">\n-                <span className=\"text-sm font-medium text-gray-600 whitespace-nowrap\">\n-                  <Filter className=\"h-5 w-5 inline mr-1.5 text-orange-500\" />Filter by Status:\n-                </span>\n-                <DropdownMenu>\n-                  <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-lg border-gray-300 hover:border-orange-500 shadow-sm w-full md:w-auto justify-between\">\n-                      {filter === 'all' ? 'All Statuses' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-60\" />\n-                    </Button>\n-                  </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl rounded-lg border-gray-200\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-100 py-2 px-3 text-sm\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </DropdownMenuContent>\n-                </DropdownMenu>\n-              </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && (\n-             <div className=\"flex items-center justify-center py-10\">\n-                <div className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-orange-600\"></div>\n-                <p className=\"ml-3 text-gray-600 text-lg\">Updating complaints list...</p>\n-             </div>\n-          )}\n-          <div className=\"space-y-5\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"relative p-5 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl overflow-hidden group transform hover:-translate-y-1\">\n-                <div className={`absolute left-0 top-0 bottom-0 w-1.5 rounded-l-xl ${getPriorityBorderClass(complaint.priority)} group-hover:w-2.5 transition-all duration-300`}></div>\n-                <div className=\"pl-4\"> {/* Offset content slightly more */}\n-                  <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                    <div className=\"flex items-start space-x-4 flex-1\">\n-                      <div className={`p-3.5 rounded-lg bg-orange-100 text-orange-600 mt-1 shadow-sm`}>\n-                        {getCategoryIcon(complaint.category)}\n-                      </div>\n-                      <div className=\"flex-1\">\n-                        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-1\">\n-                          <h3 className=\"text-lg font-semibold text-gray-800 group-hover:text-orange-600 transition-colors cursor-default line-clamp-1\" title={complaint.subject}>\n-                            {complaint.subject}\n-                          </h3>\n-                          <div className=\"sm:hidden self-end -mt-6\"> {/* Actions for mobile */}\n-                              <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                          </div>\n-                        </div>\n-                        <p className=\"text-xs text-gray-500 mb-2\">ID: <span className=\"font-medium text-gray-600\">{complaint.id}</span></p>\n-                        <p className=\"text-sm text-gray-700 mb-3 leading-relaxed line-clamp-2\">\n-                          {complaint.description}\n-                        </p>\n-                        <div className=\"flex flex-wrap items-center gap-x-3 gap-y-2\">\n-                          <Badge className={`text-xs font-medium px-2.5 py-1 border ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                            {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                          </Badge>\n-                          <Badge className={`text-xs font-medium px-2.5 py-1 border ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                            {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                          </Badge>\n-                          <span className=\"text-xs text-gray-500 flex items-center\">\n-                            <Calendar className=\"h-3.5 w-3.5 mr-1.5 text-gray-400\" />\n-                            {format(new Date(complaint.submittedAt), 'MMM d, yyyy, HH:mm')}\n-                          </span>\n-                        </div>\n-                      </div>\n-                    </div>\n-                    <div className=\"hidden sm:flex flex-col items-end space-y-2 mt-1 sm:mt-0 sm:ml-4\">\n-                      <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                      {/* You can add a \"View Details\" button here if needed */}\n-                    </div>\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && (\n-                <Card className=\"text-center py-16 shadow-lg rounded-xl bg-gradient-to-br from-gray-50 to-orange-50\">\n-                  <FileText className=\"h-24 w-24 text-orange-300 mx-auto mb-6\" />\n-                  <p className=\"text-gray-700 text-2xl font-semibold mb-2\">No Complaints Found</p>\n-                  <p className=\"text-gray-500 text-base mb-6 max-w-md mx-auto\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'It looks like you haven\\'t submitted any complaints yet. Get started by creating one!'\n-                      : 'Try adjusting your search query or filter settings to find what you\\'re looking for.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"lg\" className=\"bg-orange-500 hover:bg-orange-600 text-white text-lg px-8 py-3 rounded-lg shadow-md hover:shadow-lg transition-shadow\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-5 w-5 mr-2\" /> Create Your First Complaint\n-                    </Button>\n-                  )}\n-                </Card>\n-              )\n-            )}\n-          </div>\n-\n-          {/* Notifications Panel Section */}\n-          <div id=\"notifications-panel\" className=\"mt-12 pt-8 border-t border-gray-300\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3\">\n-              <h2 className=\"text-3xl font-semibold text-gray-800\">All Notifications</h2>\n-              {notifications.length > 0 && unreadNotifications > 0 && (\n-                <Button variant=\"outline\" size=\"sm\" onClick={markAllNotificationsAsRead} className=\"text-orange-600 border-orange-500 hover:bg-orange-50 hover:text-orange-700 rounded-md shadow-sm\">\n-                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read ({unreadNotifications})\n-                </Button>\n-              )}\n-            </div>\n-            {notifications.length === 0 ? (\n-              <Card className=\"p-10 text-center shadow-md rounded-xl bg-white\">\n-                <Bell className=\"h-20 w-20 text-gray-300 mx-auto mb-5\" />\n-                <p className=\"text-gray-600 text-xl font-medium\">No notifications to display.</p>\n-                <p className=\"text-gray-400 text-sm mt-1.5\">Updates about your complaints and other important alerts will appear here.</p>\n-              </Card>\n-            ) : (\n-              <div className=\"space-y-3.5 max-h-[600px] overflow-y-auto pr-2 -mr-2 nice-scrollbar\">\n-                {notifications.map(n => (\n-                  <Card \n-                    key={n.id} \n-                    className={`p-4 shadow-md hover:shadow-lg transition-all duration-200 rounded-lg cursor-pointer ${!n.read ? 'bg-orange-50 border-l-4 border-orange-500' : 'bg-white opacity-90 hover:opacity-100'}`}\n-                    onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                  >\n-                    <div className=\"flex items-start gap-4\">\n-                      <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(n.status || n.type)}</div>\n-                      <div className=\"flex-1\">\n-                        <p className={`text-sm ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-700'}`}>\n-                          {n.message}\n-                        </p>\n-                        <p className=\"text-xs text-gray-500 mt-1\">\n-                          {formatDistanceToNow(new Date(n.timestamp || n.createdAt || Date.now()), { addSuffix: true })}\n-                        </p>\n-                      </div>\n-                      {!n.read && (\n-                        <Button variant=\"link\" size=\"sm\" className=\"text-xs text-orange-600 hover:text-orange-700 p-0 h-auto self-start\" onClick={(e) => { e.stopPropagation(); markNotificationAsRead(n.id); }}>\n-                          Mark as read\n-                        </Button>\n-                      )}\n-                    </div>\n-                  </Card>\n-                ))}\n-              </div>\n-            )}\n-          </div>\n-        </main>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n-        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto p-0 nice-scrollbar rounded-lg\">\n-          <ComplaintForm \n-            onClose={() => setIsFormOpen(false)}\n-            onSubmit={handleComplaintSubmit}\n-          />\n-        </DialogContent>\n-      </Dialog>\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 8px;\n-          height: 8px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f0f0f0;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; /* orange-500 */\n-          border-radius: 10px;\n-          border: 2px solid #f0f0f0; /* Creates a nice offset */\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; /* orange-600 */\n-        }\n-        .line-clamp-1 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 1;\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-        /* Dialog content padding is removed in component, handled by ComplaintForm if needed */\n-        /* This ensures the scrollbar applies correctly to the DialogContent */\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-9 w-9 p-0 text-gray-500 hover:text-orange-600 hover:bg-orange-100 rounded-md\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl rounded-lg border-gray-200 w-48\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-100 text-gray-700 cursor-pointer py-2 px-3\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2.5 h-4 w-4 text-orange-500\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-100 text-gray-700 cursor-pointer py-2 px-3\" onClick={() => toast.info(\"Download PDF feature is being implemented.\")}>\n-        <Download className=\"mr-2.5 h-4 w-4 text-orange-500\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator className=\"my-1\" />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-100 focus:!text-red-700 cursor-pointer py-2 px-3\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2.5 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogHeader,\n-  DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-    // Remove any existing dialog with the same ID\n-    const existingDialog = document.querySelector('[role=\"dialog\"]');\n-    if (existingDialog) {\n-      existingDialog.remove();\n-    }\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n-          </div>\n-        </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      <div className=\"container mx-auto mb-6\">\n-        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Complaint Dashboard</h1>\n-        <p className=\"text-gray-600\">Manage and track your complaints in one place</p>\n-      </div>\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n-        {/* Notifications Panel (Left Sidebar on LG+) */}\n-        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n-          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n-            <div className=\"p-4 border-b bg-white\">\n-              <div className=\"flex items-center justify-between\">\n-                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n-                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n-                  Complaint Notifications\n-                </h3>\n-                {unreadNotifications > 0 && (\n-                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New Updates</Badge>\n-                )}\n-              </div>\n-            </div>\n-            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n-              {notifications.length === 0 && (\n-                <div className=\"p-6 text-center text-gray-500\">\n-                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n-                  <p className=\"font-medium\">All caught up!</p>\n-                  <p className=\"text-sm\">No new notifications.</p>\n-                </div>\n-              )}\n-              {notifications.map((notification) => (\n-                <div\n-                  key={notification.id}\n-                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n-                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n-                  }`}\n-                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n-                >\n-                  <div className=\"flex items-start gap-3\">\n-                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n-                    <div className=\"flex-1\">\n-                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n-                        {notification.message}\n-                      </p>\n-                      <p className=\"text-xs text-gray-500 mt-1\">\n-                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n-                      </p>\n-                    </div>\n-                    {!notification.read && (\n-                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n-                    )}\n-                  </div>\n-                </div>\n-              ))}\n-            </div>\n-            {notifications.length > 0 && unreadNotifications > 0 && (\n-              <div className=\"p-3 border-t bg-white\">\n-                <Button\n-                  variant=\"outline\"\n-                  size=\"sm\"\n-                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n-                  onClick={markAllNotificationsAsRead}\n-                  disabled={unreadNotifications === 0}\n-                >\n-                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n-                </Button>\n-              </div>\n-            )}\n-          </Card>\n-        </div>\n-\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n-        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n-          <ComplaintForm \n-            onClose={() => setIsFormOpen(false)}\n-            onSubmit={handleComplaintSubmit}\n-          />\n-        </DialogContent>\n-      </Dialog>\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogHeader,\n-  DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-    // Remove any existing dialog with the same ID\n-    const existingDialog = document.querySelector('[role=\"dialog\"]');\n-    if (existingDialog) {\n-      existingDialog.remove();\n-    }\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n-          </div>\n-        </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      <div className=\"container mx-auto mb-6\">\n-        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Complaint Dashboard</h1>\n-        <p className=\"text-gray-600\">Manage and track your complaints in one place</p>\n-      </div>\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto\"\n-\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n-        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n-          <ComplaintForm \n-            onClose={() => setIsFormOpen(false)}\n-            onSubmit={handleComplaintSubmit}\n-          />\n-        </DialogContent>\n-      </Dialog>\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogHeader,\n-  DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-    // Remove any existing dialog with the same ID\n-    const existingDialog = document.querySelector('[role=\"dialog\"]');\n-    if (existingDialog) {\n-      existingDialog.remove();\n-    }\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n-          </div>\n-        </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      <div className=\"container mx-auto mb-6\">\n-        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Complaint Dashboard</h1>\n-        <p className=\"text-gray-600\">Manage and track your complaints in one place</p>\n-      </div>\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto\">\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n-        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n-          <ComplaintForm \n-            onClose={() => setIsFormOpen(false)}\n-            onSubmit={handleComplaintSubmit}\n-          />\n-        </DialogContent>\n-      </Dialog>\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pendimport React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  // DialogHeader, // No longer directly used, ComplaintForm might have its own\n-  // DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users, // Keep for potential future use, but financial might need own icon\n-  Building, // Example for Facility\n-  Briefcase, // Example for Academic\n-  UserX, // Example for Staff related issues\n-  DollarSign, // Example for Financial\n-  HelpCircle, // Example for Other\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-  MessageSquare, // Fallback icon for notifications\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  // const database = getDatabase(); // Initialized inside useEffect or where needed to avoid shadowing\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false);\n-      return;\n-    }\n-    setLoading(true);\n-    const db = getDatabase();\n-    const complaintsRef = ref(db, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    const notificationsToastRef = ref(db, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            let icon = 'ℹ️';\n-            if (notification.status === 'rejected') icon = '❌';\n-            else if (notification.status === 'resolved') icon = '✅';\n-            else if (notification.status === 'in_progress') icon = '⏳';\n-            \n-            toast(notification.message, {\n-              icon: icon,\n-              duration: 6000,\n-            });\n-            update(ref(db, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const db = getDatabase();\n-    const notificationsRef = ref(db, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        if (avgHours < 1) {\n-            const avgMinutes = Math.round((avgTimeMs / (1000 * 60)) * 10) / 10;\n-            return `${avgMinutes} min`;\n-        }\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-400';\n-      case 'in_progress': return 'bg-blue-100 text-blue-800 border-blue-400';\n-      case 'resolved': return 'bg-green-100 text-green-800 border-green-400';\n-      case 'rejected': return 'bg-red-100 text-red-800 border-red-400';\n-      case 'cancelled': return 'bg-gray-100 text-gray-800 border-gray-400';\n-      default: return 'bg-gray-100 text-gray-800 border-gray-400';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-800 border-red-400';\n-      case 'medium': return 'bg-orange-100 text-orange-800 border-orange-400';\n-      case 'low': return 'bg-sky-100 text-sky-800 border-sky-400'; // Changed low to sky for better contrast\n-      default: return 'bg-gray-100 text-gray-700 border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBorderClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-500';\n-      case 'medium': return 'bg-orange-500';\n-      case 'low': return 'bg-sky-500';\n-      default: return 'bg-gray-400';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-6 w-6\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <Briefcase {...iconProps} />;\n-      case 'facility': return <Building {...iconProps} />;\n-      case 'staff': return <UserX {...iconProps} />;\n-      case 'financial': return <DollarSign {...iconProps} />;\n-      case 'other': return <HelpCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    try {\n-      const db = getDatabase();\n-      await update(ref(db, `notifications/${user.uid}/${notificationId}`), { read: true });\n-      // toast.success('Notification marked as read'); // Can be too noisy, handled by UI change\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0 || unreadNotifications === 0) return;\n-    try {\n-      const db = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(db), updates);\n-        toast.success('All unread notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled as it's no longer pending.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        const db = getDatabase();\n-        await update(ref(db, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          lastUpdatedAt: new Date().toISOString(),\n-        });\n-        toast.success('Complaint cancelled successfully.');\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-  const getNotificationIcon = (statusOrType) => {\n-    switch (statusOrType?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />;\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />; // Usually admin action makes it pending, but for notification it's relevant\n-      case 'new_complaint_admin': // If admin gets notification for new complaint\n-      case 'submitted': // If user gets confirmation\n-        return <FileText className=\"h-5 w-5 text-indigo-500\" />;\n-      default: return <MessageSquare className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-4\">\n-      <Avatar className=\"h-14 w-14 border-2 border-orange-500 shadow-sm\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback className=\"text-lg bg-orange-100 text-orange-600\">\n-          {user?.displayName?.charAt(0).toUpperCase() || 'U'}\n-        </AvatarFallback>\n-      </Avatar>\n-      <div>\n-        <h2 className=\"text-2xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">\n-          ID: <span className=\"font-medium text-gray-600\">{user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</span>\n-        </p>\n-      </div>\n-    </div>\n-  );\n-\n-  if (loading && complaints.length === 0) {\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-gray-100 to-orange-100\">\n-        <div className=\"text-center\">\n-          <div className=\"animate-spin rounded-full h-20 w-20 border-t-4 border-b-4 border-orange-500 mx-auto\"></div>\n-          <p className=\"mt-4 text-lg font-semibold text-orange-600\">Loading Dashboard...</p>\n-        </div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-100 p-4 md:p-6 lg:p-8\">\n-      <div className=\"container mx-auto\">\n-        {/* Page Title Area */}\n-        <div className=\"mb-6 md:mb-8\">\n-          <h1 className=\"text-4xl font-bold text-gray-800\">Complaint Dashboard</h1>\n-          <p className=\"text-lg text-gray-600 mt-1\">Manage and track your complaints efficiently.</p>\n-        </div>\n-\n-        {/* Profile and Actions Header */}\n-        <header className=\"mb-6 md:mb-10 pb-6 border-b border-gray-300\">\n-          <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4\">\n-            {user ? <UserProfileDisplay user={user} /> : (\n-              <div className=\"flex items-center space-x-4 animate-pulse w-full sm:w-auto\">\n-                <div className=\"h-14 w-14 bg-gray-300 rounded-full\"></div>\n-                <div>\n-                  <div className=\"h-6 w-40 bg-gray-300 rounded mb-1.5\"></div>\n-                  <div className=\"h-4 w-32 bg-gray-300 rounded\"></div>\n-                </div>\n-              </div>\n-            )}\n-            <div className=\"flex items-center space-x-3 sm:space-x-4\">\n-              <DropdownMenu>\n-                <DropdownMenuTrigger asChild>\n-                  <Button variant=\"outline\" size=\"lg\" className=\"relative text-gray-700 hover:text-orange-600 hover:border-orange-400 rounded-lg shadow-sm\">\n-                    <Bell className=\"h-5 w-5\" />\n-                    {unreadNotifications > 0 && (\n-                      <span className=\"absolute -top-1 -right-1 flex h-5 w-5\">\n-                        <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75\"></span>\n-                        <span className=\"relative inline-flex rounded-full h-5 w-5 bg-red-500 text-white text-xs items-center justify-center\">\n-                          {unreadNotifications}\n-                        </span>\n-                      </span>\n-                    )}\n-                  </Button>\n-                </DropdownMenuTrigger>\n-                <DropdownMenuContent align=\"end\" className=\"w-80 md:w-96 shadow-xl rounded-lg border-gray-200 nice-scrollbar\">\n-                  <div className=\"p-3 font-semibold text-gray-700 text-base border-b border-gray-200\">Notifications</div>\n-                  {notifications.length === 0 ? (\n-                    <div className=\"p-4 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                  ) : (\n-                    <div className=\"max-h-96 overflow-y-auto\">\n-                      {notifications.slice(0, 7).map((n) => ( // Show more notifications initially\n-                        <DropdownMenuItem \n-                          key={n.id} \n-                          onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                          className={`flex items-start gap-3 p-3 cursor-pointer transition-colors hover:!bg-orange-100 ${!n.read ? 'bg-orange-50' : 'opacity-80'}`}\n-                        >\n-                          <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(n.status || n.type)}</div>\n-                          <div className=\"flex-1\">\n-                            <p className={`text-sm ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                              {n.message}\n-                            </p>\n-                            <p className=\"text-xs text-gray-500 mt-0.5\">\n-                              {formatDistanceToNow(new Date(n.timestamp || n.createdAt || Date.now()), { addSuffix: true })}\n-                            </p>\n-                          </div>\n-                        </DropdownMenuItem>\n-                      ))}\n-                    </div>\n-                  )}\n-                  {notifications.length > 0 && <DropdownMenuSeparator className=\"my-1\" />}\n-                  <DropdownMenuItem \n-                      onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                      className=\"justify-center p-2.5 text-sm font-medium text-orange-600 hover:!bg-orange-100 hover:!text-orange-700 cursor-pointer\"\n-                  >\n-                    View All Notifications\n-                  </DropdownMenuItem>\n-                </DropdownMenuContent>\n-              </DropdownMenu>\n-\n-              <Button\n-                onClick={handleNewComplaint}\n-                className=\"bg-orange-500 hover:bg-orange-600 text-white font-semibold shadow-md hover:shadow-lg transition-all duration-300 rounded-lg px-5 py-2.5 text-base\"\n-                disabled={!user}\n-                size=\"lg\"\n-              >\n-                <Plus className=\"h-5 w-5 mr-2\" />\n-                New Complaint\n-              </Button>\n-            </div>\n-          </div>\n-        </header>\n-      \n-        <main className=\"space-y-8\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-5\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-6 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl transform hover:-translate-y-1\">\n-                <div className=\"flex items-center justify-between\">\n-                  <div>\n-                    <p className=\"text-sm font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-3xl font-bold text-gray-800 mt-1\">{stat.value}</p>\n-                  </div>\n-                  <div className={`p-3 rounded-full ${stat.color} shadow-md`}>\n-                    <stat.icon className=\"h-7 w-7 text-white\" />\n-                  </div>\n-                </div>\n-              </Card>\n-            ))}\n-          </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-5 shadow-lg rounded-xl\">\n-            <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n-              <div className=\"relative flex-grow w-full md:w-auto\">\n-                <Search className=\"absolute left-3.5 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-                <Input\n-                  type=\"text\"\n-                  placeholder=\"Search by ID, subject, or description...\"\n-                  value={searchQuery}\n-                  onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-12 pr-10 w-full md:min-w-[350px] lg:min-w-[400px] h-11 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 border-gray-300 shadow-sm\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-500 hover:text-gray-700\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4.5 w-4.5\" />\n-                  </Button>\n-                )}\n-              </div>\n-              <div className=\"flex items-center gap-3 self-start md:self-center w-full md:w-auto\">\n-                <span className=\"text-sm font-medium text-gray-600 whitespace-nowrap\">\n-                  <Filter className=\"h-5 w-5 inline mr-1.5 text-orange-500\" />Filter by Status:\n-                </span>\n-                <DropdownMenu>\n-                  <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-lg border-gray-300 hover:border-orange-500 shadow-sm w-full md:w-auto justify-between\">\n-                      {filter === 'all' ? 'All Statuses' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-60\" />\n-                    </Button>\n-                  </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl rounded-lg border-gray-200\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-100 py-2 px-3 text-sm\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </DropdownMenuContent>\n-                </DropdownMenu>\n-              </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && (\n-             <div className=\"flex items-center justify-center py-10\">\n-                <div className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-orange-600\"></div>\n-                <p className=\"ml-3 text-gray-600 text-lg\">Updating complaints list...</p>\n-             </div>\n-          )}\n-          <div className=\"space-y-5\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"relative p-5 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl overflow-hidden group transform hover:-translate-y-1\">\n-                <div className={`absolute left-0 top-0 bottom-0 w-1.5 rounded-l-xl ${getPriorityBorderClass(complaint.priority)} group-hover:w-2.5 transition-all duration-300`}></div>\n-                <div className=\"pl-4\"> {/* Offset content slightly more */}\n-                  <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                    <div className=\"flex items-start space-x-4 flex-1\">\n-                      <div className={`p-3.5 rounded-lg bg-orange-100 text-orange-600 mt-1 shadow-sm`}>\n-                        {getCategoryIcon(complaint.category)}\n-                      </div>\n-                      <div className=\"flex-1\">\n-                        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-1\">\n-                          <h3 className=\"text-lg font-semibold text-gray-800 group-hover:text-orange-600 transition-colors cursor-default line-clamp-1\" title={complaint.subject}>\n-                            {complaint.subject}\n-                          </h3>\n-                          <div className=\"sm:hidden self-end -mt-6\"> {/* Actions for mobile */}\n-                              <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                          </div>\n-                        </div>\n-                        <p className=\"text-xs text-gray-500 mb-2\">ID: <span className=\"font-medium text-gray-600\">{complaint.id}</span></p>\n-                        <p className=\"text-sm text-gray-700 mb-3 leading-relaxed line-clamp-2\">\n-                          {complaint.description}\n-                        </p>\n-                        <div className=\"flex flex-wrap items-center gap-x-3 gap-y-2\">\n-                          <Badge className={`text-xs font-medium px-2.5 py-1 border ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                            {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                          </Badge>\n-                          <Badge className={`text-xs font-medium px-2.5 py-1 border ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                            {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                          </Badge>\n-                          <span className=\"text-xs text-gray-500 flex items-center\">\n-                            <Calendar className=\"h-3.5 w-3.5 mr-1.5 text-gray-400\" />\n-                            {format(new Date(complaint.submittedAt), 'MMM d, yyyy, HH:mm')}\n-                          </span>\n-                        </div>\n-                      </div>\n-                    </div>\n-                    <div className=\"hidden sm:flex flex-col items-end space-y-2 mt-1 sm:mt-0 sm:ml-4\">\n-                      <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                      {/* You can add a \"View Details\" button here if needed */}\n-                    </div>\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && (\n-                <Card className=\"text-center py-16 shadow-lg rounded-xl bg-gradient-to-br from-gray-50 to-orange-50\">\n-                  <FileText className=\"h-24 w-24 text-orange-300 mx-auto mb-6\" />\n-                  <p className=\"text-gray-700 text-2xl font-semibold mb-2\">No Complaints Found</p>\n-                  <p className=\"text-gray-500 text-base mb-6 max-w-md mx-auto\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'It looks like you haven\\'t submitted any complaints yet. Get started by creating one!'\n-                      : 'Try adjusting your search query or filter settings to find what you\\'re looking for.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"lg\" className=\"bg-orange-500 hover:bg-orange-600 text-white text-lg px-8 py-3 rounded-lg shadow-md hover:shadow-lg transition-shadow\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-5 w-5 mr-2\" /> Create Your First Complaint\n-                    </Button>\n-                  )}\n-                </Card>\n-              )\n-            )}\n-          </div>\n-\n-          {/* Notifications Panel Section */}\n-          <div id=\"notifications-panel\" className=\"mt-12 pt-8 border-t border-gray-300\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3\">\n-              <h2 className=\"text-3xl font-semibold text-gray-800\">All Notifications</h2>\n-              {notifications.length > 0 && unreadNotifications > 0 && (\n-                <Button variant=\"outline\" size=\"sm\" onClick={markAllNotificationsAsRead} className=\"text-orange-600 border-orange-500 hover:bg-orange-50 hover:text-orange-700 rounded-md shadow-sm\">\n-                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read ({unreadNotifications})\n-                </Button>\n-              )}\n-            </div>\n-            {notifications.length === 0 ? (\n-              <Card className=\"p-10 text-center shadow-md rounded-xl bg-white\">\n-                <Bell className=\"h-20 w-20 text-gray-300 mx-auto mb-5\" />\n-                <p className=\"text-gray-600 text-xl font-medium\">No notifications to display.</p>\n-                <p className=\"text-gray-400 text-sm mt-1.5\">Updates about your complaints and other important alerts will appear here.</p>\n-              </Card>\n-            ) : (\n-              <div className=\"space-y-3.5 max-h-[600px] overflow-y-auto pr-2 -mr-2 nice-scrollbar\">\n-                {notifications.map(n => (\n-                  <Card \n-                    key={n.id} \n-                    className={`p-4 shadow-md hover:shadow-lg transition-all duration-200 rounded-lg cursor-pointer ${!n.read ? 'bg-orange-50 border-l-4 border-orange-500' : 'bg-white opacity-90 hover:opacity-100'}`}\n-                    onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                  >\n-                    <div className=\"flex items-start gap-4\">\n-                      <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(n.status || n.type)}</div>\n-                      <div className=\"flex-1\">\n-                        <p className={`text-sm ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-700'}`}>\n-                          {n.message}\n-                        </p>\n-                        <p className=\"text-xs text-gray-500 mt-1\">\n-                          {formatDistanceToNow(new Date(n.timestamp || n.createdAt || Date.now()), { addSuffix: true })}\n-                        </p>\n-                      </div>\n-                      {!n.read && (\n-                        <Button variant=\"link\" size=\"sm\" className=\"text-xs text-orange-600 hover:text-orange-700 p-0 h-auto self-start\" onClick={(e) => { e.stopPropagation(); markNotificationAsRead(n.id); }}>\n-                          Mark as read\n-                        </Button>\n-                      )}\n-                    </div>\n-                  </Card>\n-                ))}\n-              </div>\n-            )}\n-          </div>\n-        </main>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n-        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto p-0 nice-scrollbar rounded-lg\">\n-          <ComplaintForm \n-            onClose={() => setIsFormOpen(false)}\n-            onSubmit={handleComplaintSubmit}\n-          />\n-        </DialogContent>\n-      </Dialog>\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 8px;\n-          height: 8px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f0f0f0;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; /* orange-500 */\n-          border-radius: 10px;\n-          border: 2px solid #f0f0f0; /* Creates a nice offset */\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; /* orange-600 */\n-        }\n-        .line-clamp-1 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 1;\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-        /* Dialog content padding is removed in component, handled by ComplaintForm if needed */\n-        /* This ensures the scrollbar applies correctly to the DialogContent */\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-9 w-9 p-0 text-gray-500 hover:text-orange-600 hover:bg-orange-100 rounded-md\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl rounded-lg border-gray-200 w-48\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-100 text-gray-700 cursor-pointer py-2 px-3\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2.5 h-4 w-4 text-orange-500\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-100 text-gray-700 cursor-pointer py-2 px-3\" onClick={() => toast.info(\"Download PDF feature is being implemented.\")}>\n-        <Download className=\"mr-2.5 h-4 w-4 text-orange-500\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator className=\"my-1\" />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-100 focus:!text-red-700 cursor-pointer py-2 px-3\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2.5 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n-export default ComplaintDashboard;ing' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogHeader,\n-  DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-    // Remove any existing dialog with the same ID\n-    const existingDialog = document.querySelector('[role=\"dialog\"]');\n-    if (existingDialog) {\n-      existingDialog.remove();\n-    }\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n-          </div>\n-        </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      <div className=\"container mx-auto mb-6\">\n-        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Complaint Dashboard</h1>\n-        <p className=\"text-gray-600\">Manage and track your complaints in one place</p>\n-      </div>\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto\">\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n-        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n-          <ComplaintForm \n-            onClose={() => setIsFormOpen(false)}\n-            onSubmit={handleComplaintSubmit}\n-          />\n-        </DialogContent>\n-      </Dialog>\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pendimport React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  // DialogHeader, // No longer directly used, ComplaintForm might have its own\n-  // DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users, // Keep for potential future use, but financial might need own icon\n-  Building, // Example for Facility\n-  Briefcase, // Example for Academic\n-  UserX, // Example for Staff related issues\n-  DollarSign, // Example for Financial\n-  HelpCircle, // Example for Other\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-  MessageSquare, // Fallback icon for notifications\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  // const database = getDatabase(); // Initialized inside useEffect or where needed to avoid shadowing\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false);\n-      return;\n-    }\n-    setLoading(true);\n-    const db = getDatabase();\n-    const complaintsRef = ref(db, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    const notificationsToastRef = ref(db, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            let icon = 'ℹ️';\n-            if (notification.status === 'rejected') icon = '❌';\n-            else if (notification.status === 'resolved') icon = '✅';\n-            else if (notification.status === 'in_progress') icon = '⏳';\n-            \n-            toast(notification.message, {\n-              icon: icon,\n-              duration: 6000,\n-            });\n-            update(ref(db, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const db = getDatabase();\n-    const notificationsRef = ref(db, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        if (avgHours < 1) {\n-            const avgMinutes = Math.round((avgTimeMs / (1000 * 60)) * 10) / 10;\n-            return `${avgMinutes} min`;\n-        }\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-400';\n-      case 'in_progress': return 'bg-blue-100 text-blue-800 border-blue-400';\n-      case 'resolved': return 'bg-green-100 text-green-800 border-green-400';\n-      case 'rejected': return 'bg-red-100 text-red-800 border-red-400';\n-      case 'cancelled': return 'bg-gray-100 text-gray-800 border-gray-400';\n-      default: return 'bg-gray-100 text-gray-800 border-gray-400';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-800 border-red-400';\n-      case 'medium': return 'bg-orange-100 text-orange-800 border-orange-400';\n-      case 'low': return 'bg-sky-100 text-sky-800 border-sky-400'; // Changed low to sky for better contrast\n-      default: return 'bg-gray-100 text-gray-700 border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBorderClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-500';\n-      case 'medium': return 'bg-orange-500';\n-      case 'low': return 'bg-sky-500';\n-      default: return 'bg-gray-400';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-6 w-6\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <Briefcase {...iconProps} />;\n-      case 'facility': return <Building {...iconProps} />;\n-      case 'staff': return <UserX {...iconProps} />;\n-      case 'financial': return <DollarSign {...iconProps} />;\n-      case 'other': return <HelpCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    try {\n-      const db = getDatabase();\n-      await update(ref(db, `notifications/${user.uid}/${notificationId}`), { read: true });\n-      // toast.success('Notification marked as read'); // Can be too noisy, handled by UI change\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0 || unreadNotifications === 0) return;\n-    try {\n-      const db = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(db), updates);\n-        toast.success('All unread notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled as it's no longer pending.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        const db = getDatabase();\n-        await update(ref(db, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          lastUpdatedAt: new Date().toISOString(),\n-        });\n-        toast.success('Complaint cancelled successfully.');\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-  const getNotificationIcon = (statusOrType) => {\n-    switch (statusOrType?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />;\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />; // Usually admin action makes it pending, but for notification it's relevant\n-      case 'new_complaint_admin': // If admin gets notification for new complaint\n-      case 'submitted': // If user gets confirmation\n-        return <FileText className=\"h-5 w-5 text-indigo-500\" />;\n-      default: return <MessageSquare className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-4\">\n-      <Avatar className=\"h-14 w-14 border-2 border-orange-500 shadow-sm\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback className=\"text-lg bg-orange-100 text-orange-600\">\n-          {user?.displayName?.charAt(0).toUpperCase() || 'U'}\n-        </AvatarFallback>\n-      </Avatar>\n-      <div>\n-        <h2 className=\"text-2xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">\n-          ID: <span className=\"font-medium text-gray-600\">{user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</span>\n-        </p>\n-      </div>\n-    </div>\n-  );\n-\n-  if (loading && complaints.length === 0) {\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-gray-100 to-orange-100\">\n-        <div className=\"text-center\">\n-          <div className=\"animate-spin rounded-full h-20 w-20 border-t-4 border-b-4 border-orange-500 mx-auto\"></div>\n-          <p className=\"mt-4 text-lg font-semibold text-orange-600\">Loading Dashboard...</p>\n-        </div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-100 p-4 md:p-6 lg:p-8\">\n-      <div className=\"container mx-auto\">\n-        {/* Page Title Area */}\n-        <div className=\"mb-6 md:mb-8\">\n-          <h1 className=\"text-4xl font-bold text-gray-800\">Complaint Dashboard</h1>\n-          <p className=\"text-lg text-gray-600 mt-1\">Manage and track your complaints efficiently.</p>\n-        </div>\n-\n-        {/* Profile and Actions Header */}\n-        <header className=\"mb-6 md:mb-10 pb-6 border-b border-gray-300\">\n-          <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4\">\n-            {user ? <UserProfileDisplay user={user} /> : (\n-              <div className=\"flex items-center space-x-4 animate-pulse w-full sm:w-auto\">\n-                <div className=\"h-14 w-14 bg-gray-300 rounded-full\"></div>\n-                <div>\n-                  <div className=\"h-6 w-40 bg-gray-300 rounded mb-1.5\"></div>\n-                  <div className=\"h-4 w-32 bg-gray-300 rounded\"></div>\n-                </div>\n-              </div>\n-            )}\n-            <div className=\"flex items-center space-x-3 sm:space-x-4\">\n-              <DropdownMenu>\n-                <DropdownMenuTrigger asChild>\n-                  <Button variant=\"outline\" size=\"lg\" className=\"relative text-gray-700 hover:text-orange-600 hover:border-orange-400 rounded-lg shadow-sm\">\n-                    <Bell className=\"h-5 w-5\" />\n-                    {unreadNotifications > 0 && (\n-                      <span className=\"absolute -top-1 -right-1 flex h-5 w-5\">\n-                        <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75\"></span>\n-                        <span className=\"relative inline-flex rounded-full h-5 w-5 bg-red-500 text-white text-xs items-center justify-center\">\n-                          {unreadNotifications}\n-                        </span>\n-                      </span>\n-                    )}\n-                  </Button>\n-                </DropdownMenuTrigger>\n-                <DropdownMenuContent align=\"end\" className=\"w-80 md:w-96 shadow-xl rounded-lg border-gray-200 nice-scrollbar\">\n-                  <div className=\"p-3 font-semibold text-gray-700 text-base border-b border-gray-200\">Notifications</div>\n-                  {notifications.length === 0 ? (\n-                    <div className=\"p-4 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                  ) : (\n-                    <div className=\"max-h-96 overflow-y-auto\">\n-                      {notifications.slice(0, 7).map((n) => ( // Show more notifications initially\n-                        <DropdownMenuItem \n-                          key={n.id} \n-                          onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                          className={`flex items-start gap-3 p-3 cursor-pointer transition-colors hover:!bg-orange-100 ${!n.read ? 'bg-orange-50' : 'opacity-80'}`}\n-                        >\n-                          <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(n.status || n.type)}</div>\n-                          <div className=\"flex-1\">\n-                            <p className={`text-sm ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                              {n.message}\n-                            </p>\n-                            <p className=\"text-xs text-gray-500 mt-0.5\">\n-                              {formatDistanceToNow(new Date(n.timestamp || n.createdAt || Date.now()), { addSuffix: true })}\n-                            </p>\n-                          </div>\n-                        </DropdownMenuItem>\n-                      ))}\n-                    </div>\n-                  )}\n-                  {notifications.length > 0 && <DropdownMenuSeparator className=\"my-1\" />}\n-                  <DropdownMenuItem \n-                      onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                      className=\"justify-center p-2.5 text-sm font-medium text-orange-600 hover:!bg-orange-100 hover:!text-orange-700 cursor-pointer\"\n-                  >\n-                    View All Notifications\n-                  </DropdownMenuItem>\n-                </DropdownMenuContent>\n-              </DropdownMenu>\n-\n-              <Button\n-                onClick={handleNewComplaint}\n-                className=\"bg-orange-500 hover:bg-orange-600 text-white font-semibold shadow-md hover:shadow-lg transition-all duration-300 rounded-lg px-5 py-2.5 text-base\"\n-                disabled={!user}\n-                size=\"lg\"\n-              >\n-                <Plus className=\"h-5 w-5 mr-2\" />\n-                New Complaint\n-              </Button>\n-            </div>\n-          </div>\n-        </header>\n-      \n-        <main className=\"space-y-8\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-5\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-6 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl transform hover:-translate-y-1\">\n-                <div className=\"flex items-center justify-between\">\n-                  <div>\n-                    <p className=\"text-sm font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-3xl font-bold text-gray-800 mt-1\">{stat.value}</p>\n-                  </div>\n-                  <div className={`p-3 rounded-full ${stat.color} shadow-md`}>\n-                    <stat.icon className=\"h-7 w-7 text-white\" />\n-                  </div>\n-                </div>\n-              </Card>\n-            ))}\n-          </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-5 shadow-lg rounded-xl\">\n-            <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n-              <div className=\"relative flex-grow w-full md:w-auto\">\n-                <Search className=\"absolute left-3.5 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-                <Input\n-                  type=\"text\"\n-                  placeholder=\"Search by ID, subject, or description...\"\n-                  value={searchQuery}\n-                  onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-12 pr-10 w-full md:min-w-[350px] lg:min-w-[400px] h-11 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 border-gray-300 shadow-sm\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-500 hover:text-gray-700\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4.5 w-4.5\" />\n-                  </Button>\n-                )}\n-              </div>\n-              <div className=\"flex items-center gap-3 self-start md:self-center w-full md:w-auto\">\n-                <span className=\"text-sm font-medium text-gray-600 whitespace-nowrap\">\n-                  <Filter className=\"h-5 w-5 inline mr-1.5 text-orange-500\" />Filter by Status:\n-                </span>\n-                <DropdownMenu>\n-                  <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-lg border-gray-300 hover:border-orange-500 shadow-sm w-full md:w-auto justify-between\">\n-                      {filter === 'all' ? 'All Statuses' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-60\" />\n-                    </Button>\n-                  </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl rounded-lg border-gray-200\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-100 py-2 px-3 text-sm\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </DropdownMenuContent>\n-                </DropdownMenu>\n-              </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && (\n-             <div className=\"flex items-center justify-center py-10\">\n-                <div className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-orange-600\"></div>\n-                <p className=\"ml-3 text-gray-600 text-lg\">Updating complaints list...</p>\n-             </div>\n-          )}\n-          <div className=\"space-y-5\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"relative p-5 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl overflow-hidden group transform hover:-translate-y-1\">\n-                <div className={`absolute left-0 top-0 bottom-0 w-1.5 rounded-l-xl ${getPriorityBorderClass(complaint.priority)} group-hover:w-2.5 transition-all duration-300`}></div>\n-                <div className=\"pl-4\"> {/* Offset content slightly more */}\n-                  <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                    <div className=\"flex items-start space-x-4 flex-1\">\n-                      <div className={`p-3.5 rounded-lg bg-orange-100 text-orange-600 mt-1 shadow-sm`}>\n-                        {getCategoryIcon(complaint.category)}\n-                      </div>\n-                      <div className=\"flex-1\">\n-                        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-1\">\n-                          <h3 className=\"text-lg font-semibold text-gray-800 group-hover:text-orange-600 transition-colors cursor-default line-clamp-1\" title={complaint.subject}>\n-                            {complaint.subject}\n-                          </h3>\n-                          <div className=\"sm:hidden self-end -mt-6\"> {/* Actions for mobile */}\n-                              <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                          </div>\n-                        </div>\n-                        <p className=\"text-xs text-gray-500 mb-2\">ID: <span className=\"font-medium text-gray-600\">{complaint.id}</span></p>\n-                        <p className=\"text-sm text-gray-700 mb-3 leading-relaxed line-clamp-2\">\n-                          {complaint.description}\n-                        </p>\n-                        <div className=\"flex flex-wrap items-center gap-x-3 gap-y-2\">\n-                          <Badge className={`text-xs font-medium px-2.5 py-1 border ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                            {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                          </Badge>\n-                          <Badge className={`text-xs font-medium px-2.5 py-1 border ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                            {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                          </Badge>\n-                          <span className=\"text-xs text-gray-500 flex items-center\">\n-                            <Calendar className=\"h-3.5 w-3.5 mr-1.5 text-gray-400\" />\n-                            {format(new Date(complaint.submittedAt), 'MMM d, yyyy, HH:mm')}\n-                          </span>\n-                        </div>\n-                      </div>\n-                    </div>\n-                    <div className=\"hidden sm:flex flex-col items-end space-y-2 mt-1 sm:mt-0 sm:ml-4\">\n-                      <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                      {/* You can add a \"View Details\" button here if needed */}\n-                    </div>\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && (\n-                <Card className=\"text-center py-16 shadow-lg rounded-xl bg-gradient-to-br from-gray-50 to-orange-50\">\n-                  <FileText className=\"h-24 w-24 text-orange-300 mx-auto mb-6\" />\n-                  <p className=\"text-gray-700 text-2xl font-semibold mb-2\">No Complaints Found</p>\n-                  <p className=\"text-gray-500 text-base mb-6 max-w-md mx-auto\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'It looks like you haven\\'t submitted any complaints yet. Get started by creating one!'\n-                      : 'Try adjusting your search query or filter settings to find what you\\'re looking for.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"lg\" className=\"bg-orange-500 hover:bg-orange-600 text-white text-lg px-8 py-3 rounded-lg shadow-md hover:shadow-lg transition-shadow\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-5 w-5 mr-2\" /> Create Your First Complaint\n-                    </Button>\n-                  )}\n-                </Card>\n-              )\n-            )}\n-          </div>\n-\n-          {/* Notifications Panel Section */}\n-          <div id=\"notifications-panel\" className=\"mt-12 pt-8 border-t border-gray-300\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3\">\n-              <h2 className=\"text-3xl font-semibold text-gray-800\">All Notifications</h2>\n-              {notifications.length > 0 && unreadNotifications > 0 && (\n-                <Button variant=\"outline\" size=\"sm\" onClick={markAllNotificationsAsRead} className=\"text-orange-600 border-orange-500 hover:bg-orange-50 hover:text-orange-700 rounded-md shadow-sm\">\n-                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read ({unreadNotifications})\n-                </Button>\n-              )}\n-            </div>\n-            {notifications.length === 0 ? (\n-              <Card className=\"p-10 text-center shadow-md rounded-xl bg-white\">\n-                <Bell className=\"h-20 w-20 text-gray-300 mx-auto mb-5\" />\n-                <p className=\"text-gray-600 text-xl font-medium\">No notifications to display.</p>\n-                <p className=\"text-gray-400 text-sm mt-1.5\">Updates about your complaints and other important alerts will appear here.</p>\n-              </Card>\n-            ) : (\n-              <div className=\"space-y-3.5 max-h-[600px] overflow-y-auto pr-2 -mr-2 nice-scrollbar\">\n-                {notifications.map(n => (\n-                  <Card \n-                    key={n.id} \n-                    className={`p-4 shadow-md hover:shadow-lg transition-all duration-200 rounded-lg cursor-pointer ${!n.read ? 'bg-orange-50 border-l-4 border-orange-500' : 'bg-white opacity-90 hover:opacity-100'}`}\n-                    onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                  >\n-                    <div className=\"flex items-start gap-4\">\n-                      <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(n.status || n.type)}</div>\n-                      <div className=\"flex-1\">\n-                        <p className={`text-sm ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-700'}`}>\n-                          {n.message}\n-                        </p>\n-                        <p className=\"text-xs text-gray-500 mt-1\">\n-                          {formatDistanceToNow(new Date(n.timestamp || n.createdAt || Date.now()), { addSuffix: true })}\n-                        </p>\n-                      </div>\n-                      {!n.read && (\n-                        <Button variant=\"link\" size=\"sm\" className=\"text-xs text-orange-600 hover:text-orange-700 p-0 h-auto self-start\" onClick={(e) => { e.stopPropagation(); markNotificationAsRead(n.id); }}>\n-                          Mark as read\n-                        </Button>\n-                      )}\n-                    </div>\n-                  </Card>\n-                ))}\n-              </div>\n-            )}\n-          </div>\n-        </main>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n-        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto p-0 nice-scrollbar rounded-lg\">\n-          <ComplaintForm \n-            onClose={() => setIsFormOpen(false)}\n-            onSubmit={handleComplaintSubmit}\n-          />\n-        </DialogContent>\n-      </Dialog>\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 8px;\n-          height: 8px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f0f0f0;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; /* orange-500 */\n-          border-radius: 10px;\n-          border: 2px solid #f0f0f0; /* Creates a nice offset */\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; /* orange-600 */\n-        }\n-        .line-clamp-1 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 1;\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-        /* Dialog content padding is removed in component, handled by ComplaintForm if needed */\n-        /* This ensures the scrollbar applies correctly to the DialogContent */\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-9 w-9 p-0 text-gray-500 hover:text-orange-600 hover:bg-orange-100 rounded-md\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl rounded-lg border-gray-200 w-48\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-100 text-gray-700 cursor-pointer py-2 px-3\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2.5 h-4 w-4 text-orange-500\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-100 text-gray-700 cursor-pointer py-2 px-3\" onClick={() => toast.info(\"Download PDF feature is being implemented.\")}>\n-        <Download className=\"mr-2.5 h-4 w-4 text-orange-500\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator className=\"my-1\" />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-100 focus:!text-red-700 cursor-pointer py-2 px-3\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2.5 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n-export default ComplaintDashboard;ing' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748021189484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,620 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto\">\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n+          <DialogHeader>\n+            <DialogTitle>Submit a Complaint</DialogTitle>\n+          </DialogHeader>\n+          <ComplaintForm \n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+        </DialogContent>\n+      </Dialog>\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748021196705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,683 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n+        {/* Notifications Panel (Left Sidebar on LG+) */}\n+        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n+          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n+            <div className=\"p-4 border-b bg-white\">\n+              <div className=\"flex items-center justify-between\">\n+                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n+                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n+                  Activity Feed\n+                </h3>\n+                {unreadNotifications > 0 && (\n+                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n+                )}\n+              </div>\n+            </div>\n+            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n+              {notifications.length === 0 && (\n+                <div className=\"p-6 text-center text-gray-500\">\n+                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n+                  <p className=\"font-medium\">All caught up!</p>\n+                  <p className=\"text-sm\">No new notifications.</p>\n+                </div>\n+              )}\n+              {notifications.map((notification) => (\n+                <div\n+                  key={notification.id}\n+                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n+                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n+                  }`}\n+                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n+                >\n+                  <div className=\"flex items-start gap-3\">\n+                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n+                    <div className=\"flex-1\">\n+                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n+                        {notification.message}\n+                      </p>\n+                      <p className=\"text-xs text-gray-500 mt-1\">\n+                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n+                      </p>\n+                    </div>\n+                    {!notification.read && (\n+                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n+                    )}\n+                  </div>\n+                </div>\n+              ))}\n+            </div>\n+            {notifications.length > 0 && unreadNotifications > 0 && (\n+              <div className=\"p-3 border-t bg-white\">\n+                <Button\n+                  variant=\"outline\"\n+                  size=\"sm\"\n+                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n+                  onClick={markAllNotificationsAsRead}\n+                  disabled={unreadNotifications === 0}\n+                >\n+                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n+                </Button>\n+              </div>\n+            )}\n+          </Card>\n+        </div>\n+\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      {isFormOpen && (\n+        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n+          <div className=\"absolute inset-0 bg-black/50\" onClick={() => setIsFormOpen(false)} />\n+          <div className=\"relative bg-white rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto m-4\">\n+            <ComplaintForm \n+              onClose={() => setIsFormOpen(false)}\n+              onSubmit={handleComplaintSubmit}\n+            />\n+          </div>\n+        </div>\n+      )}\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748021203663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,683 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n+        {/* Notifications Panel (Left Sidebar on LG+) */}\n+        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n+          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n+            <div className=\"p-4 border-b bg-white\">\n+              <div className=\"flex items-center justify-between\">\n+                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n+                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n+                  Activity Feed\n+                </h3>\n+                {unreadNotifications > 0 && (\n+                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n+                )}\n+              </div>\n+            </div>\n+            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n+              {notifications.length === 0 && (\n+                <div className=\"p-6 text-center text-gray-500\">\n+                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n+                  <p className=\"font-medium\">All caught up!</p>\n+                  <p className=\"text-sm\">No new notifications.</p>\n+                </div>\n+              )}\n+              {notifications.map((notification) => (\n+                <div\n+                  key={notification.id}\n+                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n+                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n+                  }`}\n+                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n+                >\n+                  <div className=\"flex items-start gap-3\">\n+                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n+                    <div className=\"flex-1\">\n+                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n+                        {notification.message}\n+                      </p>\n+                      <p className=\"text-xs text-gray-500 mt-1\">\n+                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n+                      </p>\n+                    </div>\n+                    {!notification.read && (\n+                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n+                    )}\n+                  </div>\n+                </div>\n+              ))}\n+            </div>\n+            {notifications.length > 0 && unreadNotifications > 0 && (\n+              <div className=\"p-3 border-t bg-white\">\n+                <Button\n+                  variant=\"outline\"\n+                  size=\"sm\"\n+                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n+                  onClick={markAllNotificationsAsRead}\n+                  disabled={unreadNotifications === 0}\n+                >\n+                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n+                </Button>\n+              </div>\n+            )}\n+          </Card>\n+        </div>\n+\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n+          <DialogHeader>\n+            <DialogTitle>Submit a Complaint</DialogTitle>\n+          </DialogHeader>\n+          <ComplaintForm \n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+        </DialogContent>\n+      </Dialog>\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748021211649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,615 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto\">\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form */}\n+      {isFormOpen && (\n+        <ComplaintForm \n+          onClose={() => setIsFormOpen(false)}\n+          onSubmit={handleComplaintSubmit}\n+        />\n+      )}\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748021223788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,683 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n+        {/* Notifications Panel (Left Sidebar on LG+) */}\n+        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n+          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n+            <div className=\"p-4 border-b bg-white\">\n+              <div className=\"flex items-center justify-between\">\n+                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n+                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n+                  Activity Feed\n+                </h3>\n+                {unreadNotifications > 0 && (\n+                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n+                )}\n+              </div>\n+            </div>\n+            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n+              {notifications.length === 0 && (\n+                <div className=\"p-6 text-center text-gray-500\">\n+                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n+                  <p className=\"font-medium\">All caught up!</p>\n+                  <p className=\"text-sm\">No new notifications.</p>\n+                </div>\n+              )}\n+              {notifications.map((notification) => (\n+                <div\n+                  key={notification.id}\n+                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n+                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n+                  }`}\n+                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n+                >\n+                  <div className=\"flex items-start gap-3\">\n+                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n+                    <div className=\"flex-1\">\n+                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n+                        {notification.message}\n+                      </p>\n+                      <p className=\"text-xs text-gray-500 mt-1\">\n+                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n+                      </p>\n+                    </div>\n+                    {!notification.read && (\n+                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n+                    )}\n+                  </div>\n+                </div>\n+              ))}\n+            </div>\n+            {notifications.length > 0 && unreadNotifications > 0 && (\n+              <div className=\"p-3 border-t bg-white\">\n+                <Button\n+                  variant=\"outline\"\n+                  size=\"sm\"\n+                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n+                  onClick={markAllNotificationsAsRead}\n+                  disabled={unreadNotifications === 0}\n+                >\n+                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n+                </Button>\n+              </div>\n+            )}\n+          </Card>\n+        </div>\n+\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      {isFormOpen && (\n+        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n+          <div className=\"absolute inset-0 bg-black/50\" onClick={() => setIsFormOpen(false)} />\n+          <div className=\"relative bg-white rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto m-4\">\n+            <ComplaintForm \n+              onClose={() => setIsFormOpen(false)}\n+              onSubmit={handleComplaintSubmit}\n+            />\n+          </div>\n+        </div>\n+      )}\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748021234126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -607,19 +607,14 @@\n           </div>\n         </div>\n       </div>\n \n-      {/* Complaint Form Modal */}\n+      {/* Complaint Form */}\n       {isFormOpen && (\n-        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n-          <div className=\"absolute inset-0 bg-black/50\" onClick={() => setIsFormOpen(false)} />\n-          <div className=\"relative bg-white rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto m-4\">\n-            <ComplaintForm \n-              onClose={() => setIsFormOpen(false)}\n-              onSubmit={handleComplaintSubmit}\n-            />\n-          </div>\n-        </div>\n+        <ComplaintForm \n+          onClose={() => setIsFormOpen(false)}\n+          onSubmit={handleComplaintSubmit}\n+        />\n       )}\n       <style jsx global>{`\n         .nice-scrollbar::-webkit-scrollbar {\n           width: 6px;\n"
                },
                {
                    "date": 1748021241992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,676 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };    const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n+        {/* Notifications Panel (Left Sidebar on LG+) */}\n+        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n+          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n+            <div className=\"p-4 border-b bg-white\">\n+              <div className=\"flex items-center justify-between\">\n+                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n+                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n+                  Activity Feed\n+                </h3>\n+                {unreadNotifications > 0 && (\n+                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n+                )}\n+              </div>\n+            </div>\n+            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n+              {notifications.length === 0 && (\n+                <div className=\"p-6 text-center text-gray-500\">\n+                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n+                  <p className=\"font-medium\">All caught up!</p>\n+                  <p className=\"text-sm\">No new notifications.</p>\n+                </div>\n+              )}\n+              {notifications.map((notification) => (\n+                <div\n+                  key={notification.id}\n+                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n+                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n+                  }`}\n+                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n+                >\n+                  <div className=\"flex items-start gap-3\">\n+                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n+                    <div className=\"flex-1\">\n+                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n+                        {notification.message}\n+                      </p>\n+                      <p className=\"text-xs text-gray-500 mt-1\">\n+                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n+                      </p>\n+                    </div>\n+                    {!notification.read && (\n+                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n+                    )}\n+                  </div>\n+                </div>\n+              ))}\n+            </div>\n+            {notifications.length > 0 && unreadNotifications > 0 && (\n+              <div className=\"p-3 border-t bg-white\">\n+                <Button\n+                  variant=\"outline\"\n+                  size=\"sm\"\n+                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n+                  onClick={markAllNotificationsAsRead}\n+                  disabled={unreadNotifications === 0}\n+                >\n+                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n+                </Button>\n+              </div>\n+            )}\n+          </Card>\n+        </div>\n+\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      {isFormOpen && (\n+        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n+          <div className=\"absolute inset-0 bg-black/50\" onClick={() => setIsFormOpen(false)} />\n+          <div className=\"relative bg-white rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto m-4\">\n+            <ComplaintForm \n+              onClose={() => setIsFormOpen(false)}\n+              onSubmit={handleComplaintSubmit}\n+            />\n+          </div>\n+        </div>\n+      )}\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748021248644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -608,19 +608,19 @@\n         </div>\n       </div>\n \n       {/* Complaint Form Modal */}\n-      {isFormOpen && (\n-        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n-          <div className=\"absolute inset-0 bg-black/50\" onClick={() => setIsFormOpen(false)} />\n-          <div className=\"relative bg-white rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto m-4\">\n-            <ComplaintForm \n-              onClose={() => setIsFormOpen(false)}\n-              onSubmit={handleComplaintSubmit}\n-            />\n-          </div>\n-        </div>\n-      )}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n+          <DialogHeader>\n+            <DialogTitle>Submit a Complaint</DialogTitle>\n+          </DialogHeader>\n+          <ComplaintForm \n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+        </DialogContent>\n+      </Dialog>\n       <style jsx global>{`\n         .nice-scrollbar::-webkit-scrollbar {\n           width: 6px;\n         }\n"
                },
                {
                    "date": 1748021260583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,615 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto\">\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form */}\n+      {isFormOpen && (\n+        <ComplaintForm \n+          onClose={() => setIsFormOpen(false)}\n+          onSubmit={handleComplaintSubmit}\n+        />\n+      )}\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748021396322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,617 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto\">\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n+          <ComplaintForm \n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+        </DialogContent>\n+      </Dialog>\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748021522898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,615 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto\">\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <ComplaintForm \n+        isOpen={isFormOpen}\n+        onClose={() => setIsFormOpen(false)}\n+        onSubmit={handleComplaintSubmit}\n+      />\n+\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748021570052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,619 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto\">\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n+          <ComplaintForm \n+            isOpen={isFormOpen}\n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+        </DialogContent>\n+      </Dialog>\n+\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748021582877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -552,9 +552,8 @@\n             isOpen={isFormOpen}\n             onClose={() => setIsFormOpen(false)}\n             onSubmit={handleComplaintSubmit}\n           />\n-        </DialogContent>\n       </Dialog>\n \n       <style jsx global>{`\n         .nice-scrollbar::-webkit-scrollbar {\n"
                },
                {
                    "date": 1748021589008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -546,9 +546,8 @@\n       </div>\n \n       {/* Complaint Form Modal */}\n       <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n-        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n           <ComplaintForm \n             isOpen={isFormOpen}\n             onClose={() => setIsFormOpen(false)}\n             onSubmit={handleComplaintSubmit}\n"
                },
                {
                    "date": 1748025508699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,21 +105,22 @@\n     \n     // This part handles TOASTS for unread notifications and marks them as read in DB.\n     // It might be better to integrate this with the main notification fetching logic\n     // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const notificationsToastRef = ref(database, `users/${user.uid}/notifications`);\n     const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n       const notificationsSnapshot = snapshot.val();\n       if (notificationsSnapshot) {\n         Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n           if (!notification.read) {\n             toast(notification.message, {\n               icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+                    notification.status === 'resolved' ? '✅' : \n+                    notification.status === 'in_progress' ? '🔄' : 'ℹ️',\n               duration: 5000,\n             });\n             // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+            update(ref(database, `users/${user.uid}/notifications/${key}`), { read: true });\n           }\n         });\n       }\n     });\n@@ -134,9 +135,9 @@\n   useEffect(() => {\n     if (!user) return;\n \n     const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const notificationsRef = ref(database, `users/${user.uid}/notifications`);\n     const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n       const notificationsData = [];\n       if (snapshot.exists()) {\n         snapshot.forEach((child) => {\n@@ -144,10 +145,13 @@\n             id: child.key,\n             ...child.val(),\n             read: child.val().read || false\n           };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+          // Include all complaint-related notifications\n+          if (notification.type === 'complaint' || \n+              notification.category === 'complaint' ||\n+              notification.type === 'status_update' ||\n+              notification.type === 'vote_confirmation') {\n             notificationsData.push(notification);\n           }\n         });\n       }\n@@ -251,11 +255,10 @@\n     if (!user || !notificationId) return;\n     \n     try {\n       const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      const notificationRef = ref(database, `users/${user.uid}/notifications/${notificationId}`);\n       await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n     } catch (error) {\n       console.error('Error marking notification as read:', error);\n       toast.error('Could not update notification status');\n     }\n@@ -366,10 +369,10 @@\n                   <div className=\"max-h-80 overflow-y-auto\">\n                     {notifications.slice(0, 5).map((n) => (\n                       <DropdownMenuItem \n                         key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                        onClick={() => markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 cursor-pointer ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n                       >\n                         <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n                         <div className=\"flex-1\">\n                           <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n@@ -613,6427 +616,5 @@\n     </DropdownMenuContent>\n   </DropdownMenu>\n );\n \n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogHeader,\n-  DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-    // Remove any existing dialog with the same ID\n-    const existingDialog = document.querySelector('[role=\"dialog\"]');\n-    if (existingDialog) {\n-      existingDialog.remove();\n-    }\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n-          </div>\n-        </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto\">\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      <ComplaintForm \n-        isOpen={isFormOpen}\n-        onClose={() => setIsFormOpen(false)}\n-        onSubmit={handleComplaintSubmit}\n-      />\n-\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogHeader,\n-  DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-    // Remove any existing dialog with the same ID\n-    const existingDialog = document.querySelector('[role=\"dialog\"]');\n-    if (existingDialog) {\n-      existingDialog.remove();\n-    }\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n-          </div>\n-        </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto\">\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n-        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n-          <ComplaintForm \n-            onClose={() => setIsFormOpen(false)}\n-            onSubmit={handleComplaintSubmit}\n-          />\n-        </DialogContent>\n-      </Dialog>\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogHeader,\n-  DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-    // Remove any existing dialog with the same ID\n-    const existingDialog = document.querySelector('[role=\"dialog\"]');\n-    if (existingDialog) {\n-      existingDialog.remove();\n-    }\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n-          </div>\n-        </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto\">\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form */}\n-      {isFormOpen && (\n-        <ComplaintForm \n-          onClose={() => setIsFormOpen(false)}\n-          onSubmit={handleComplaintSubmit}\n-        />\n-      )}\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogHeader,\n-  DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };    const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n-          </div>\n-        </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n-        {/* Notifications Panel (Left Sidebar on LG+) */}\n-        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n-          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n-            <div className=\"p-4 border-b bg-white\">\n-              <div className=\"flex items-center justify-between\">\n-                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n-                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n-                  Activity Feed\n-                </h3>\n-                {unreadNotifications > 0 && (\n-                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n-                )}\n-              </div>\n-            </div>\n-            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n-              {notifications.length === 0 && (\n-                <div className=\"p-6 text-center text-gray-500\">\n-                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n-                  <p className=\"font-medium\">All caught up!</p>\n-                  <p className=\"text-sm\">No new notifications.</p>\n-                </div>\n-              )}\n-              {notifications.map((notification) => (\n-                <div\n-                  key={notification.id}\n-                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n-                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n-                  }`}\n-                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n-                >\n-                  <div className=\"flex items-start gap-3\">\n-                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n-                    <div className=\"flex-1\">\n-                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n-                        {notification.message}\n-                      </p>\n-                      <p className=\"text-xs text-gray-500 mt-1\">\n-                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n-                      </p>\n-                    </div>\n-                    {!notification.read && (\n-                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n-                    )}\n-                  </div>\n-                </div>\n-              ))}\n-            </div>\n-            {notifications.length > 0 && unreadNotifications > 0 && (\n-              <div className=\"p-3 border-t bg-white\">\n-                <Button\n-                  variant=\"outline\"\n-                  size=\"sm\"\n-                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n-                  onClick={markAllNotificationsAsRead}\n-                  disabled={unreadNotifications === 0}\n-                >\n-                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n-                </Button>\n-              </div>\n-            )}\n-          </Card>\n-        </div>\n-\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n-        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n-          <DialogHeader>\n-            <DialogTitle>Submit a Complaint</DialogTitle>\n-          </DialogHeader>\n-          <ComplaintForm \n-            onClose={() => setIsFormOpen(false)}\n-            onSubmit={handleComplaintSubmit}\n-          />\n-        </DialogContent>\n-      </Dialog>\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogHeader,\n-  DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-    // Remove any existing dialog with the same ID\n-    const existingDialog = document.querySelector('[role=\"dialog\"]');\n-    if (existingDialog) {\n-      existingDialog.remove();\n-    }\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n-          </div>\n-        </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n-        {/* Notifications Panel (Left Sidebar on LG+) */}\n-        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n-          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n-            <div className=\"p-4 border-b bg-white\">\n-              <div className=\"flex items-center justify-between\">\n-                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n-                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n-                  Activity Feed\n-                </h3>\n-                {unreadNotifications > 0 && (\n-                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n-                )}\n-              </div>\n-            </div>\n-            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n-              {notifications.length === 0 && (\n-                <div className=\"p-6 text-center text-gray-500\">\n-                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n-                  <p className=\"font-medium\">All caught up!</p>\n-                  <p className=\"text-sm\">No new notifications.</p>\n-                </div>\n-              )}\n-              {notifications.map((notification) => (\n-                <div\n-                  key={notification.id}\n-                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n-                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n-                  }`}\n-                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n-                >\n-                  <div className=\"flex items-start gap-3\">\n-                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n-                    <div className=\"flex-1\">\n-                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n-                        {notification.message}\n-                      </p>\n-                      <p className=\"text-xs text-gray-500 mt-1\">\n-                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n-                      </p>\n-                    </div>\n-                    {!notification.read && (\n-                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n-                    )}\n-                  </div>\n-                </div>\n-              ))}\n-            </div>\n-            {notifications.length > 0 && unreadNotifications > 0 && (\n-              <div className=\"p-3 border-t bg-white\">\n-                <Button\n-                  variant=\"outline\"\n-                  size=\"sm\"\n-                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n-                  onClick={markAllNotificationsAsRead}\n-                  disabled={unreadNotifications === 0}\n-                >\n-                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n-                </Button>\n-              </div>\n-            )}\n-          </Card>\n-        </div>\n-\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form */}\n-      {isFormOpen && (\n-        <ComplaintForm \n-          onClose={() => setIsFormOpen(false)}\n-          onSubmit={handleComplaintSubmit}\n-        />\n-      )}\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogHeader,\n-  DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-    // Remove any existing dialog with the same ID\n-    const existingDialog = document.querySelector('[role=\"dialog\"]');\n-    if (existingDialog) {\n-      existingDialog.remove();\n-    }\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n-          </div>\n-        </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto\">\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form */}\n-      {isFormOpen && (\n-        <ComplaintForm \n-          onClose={() => setIsFormOpen(false)}\n-          onSubmit={handleComplaintSubmit}\n-        />\n-      )}\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogHeader,\n-  DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-    // Remove any existing dialog with the same ID\n-    const existingDialog = document.querySelector('[role=\"dialog\"]');\n-    if (existingDialog) {\n-      existingDialog.remove();\n-    }\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n-          </div>\n-        </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n-        {/* Notifications Panel (Left Sidebar on LG+) */}\n-        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n-          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n-            <div className=\"p-4 border-b bg-white\">\n-              <div className=\"flex items-center justify-between\">\n-                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n-                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n-                  Activity Feed\n-                </h3>\n-                {unreadNotifications > 0 && (\n-                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n-                )}\n-              </div>\n-            </div>\n-            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n-              {notifications.length === 0 && (\n-                <div className=\"p-6 text-center text-gray-500\">\n-                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n-                  <p className=\"font-medium\">All caught up!</p>\n-                  <p className=\"text-sm\">No new notifications.</p>\n-                </div>\n-              )}\n-              {notifications.map((notification) => (\n-                <div\n-                  key={notification.id}\n-                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n-                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n-                  }`}\n-                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n-                >\n-                  <div className=\"flex items-start gap-3\">\n-                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n-                    <div className=\"flex-1\">\n-                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n-                        {notification.message}\n-                      </p>\n-                      <p className=\"text-xs text-gray-500 mt-1\">\n-                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n-                      </p>\n-                    </div>\n-                    {!notification.read && (\n-                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n-                    )}\n-                  </div>\n-                </div>\n-              ))}\n-            </div>\n-            {notifications.length > 0 && unreadNotifications > 0 && (\n-              <div className=\"p-3 border-t bg-white\">\n-                <Button\n-                  variant=\"outline\"\n-                  size=\"sm\"\n-                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n-                  onClick={markAllNotificationsAsRead}\n-                  disabled={unreadNotifications === 0}\n-                >\n-                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n-                </Button>\n-              </div>\n-            )}\n-          </Card>\n-        </div>\n-\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n-        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n-          <DialogHeader>\n-            <DialogTitle>Submit a Complaint</DialogTitle>\n-          </DialogHeader>\n-          <ComplaintForm \n-            onClose={() => setIsFormOpen(false)}\n-            onSubmit={handleComplaintSubmit}\n-          />\n-        </DialogContent>\n-      </Dialog>\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogHeader,\n-  DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-    // Remove any existing dialog with the same ID\n-    const existingDialog = document.querySelector('[role=\"dialog\"]');\n-    if (existingDialog) {\n-      existingDialog.remove();\n-    }\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n-          </div>\n-        </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n-        {/* Notifications Panel (Left Sidebar on LG+) */}\n-        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n-          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n-            <div className=\"p-4 border-b bg-white\">\n-              <div className=\"flex items-center justify-between\">\n-                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n-                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n-                  Activity Feed\n-                </h3>\n-                {unreadNotifications > 0 && (\n-                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n-                )}\n-              </div>\n-            </div>\n-            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n-              {notifications.length === 0 && (\n-                <div className=\"p-6 text-center text-gray-500\">\n-                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n-                  <p className=\"font-medium\">All caught up!</p>\n-                  <p className=\"text-sm\">No new notifications.</p>\n-                </div>\n-              )}\n-              {notifications.map((notification) => (\n-                <div\n-                  key={notification.id}\n-                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n-                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n-                  }`}\n-                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n-                >\n-                  <div className=\"flex items-start gap-3\">\n-                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n-                    <div className=\"flex-1\">\n-                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n-                        {notification.message}\n-                      </p>\n-                      <p className=\"text-xs text-gray-500 mt-1\">\n-                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n-                      </p>\n-                    </div>\n-                    {!notification.read && (\n-                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n-                    )}\n-                  </div>\n-                </div>\n-              ))}\n-            </div>\n-            {notifications.length > 0 && unreadNotifications > 0 && (\n-              <div className=\"p-3 border-t bg-white\">\n-                <Button\n-                  variant=\"outline\"\n-                  size=\"sm\"\n-                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n-                  onClick={markAllNotificationsAsRead}\n-                  disabled={unreadNotifications === 0}\n-                >\n-                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n-                </Button>\n-              </div>\n-            )}\n-          </Card>\n-        </div>\n-\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      {isFormOpen && (\n-        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n-          <div className=\"absolute inset-0 bg-black/50\" onClick={() => setIsFormOpen(false)} />\n-          <div className=\"relative bg-white rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto m-4\">\n-            <ComplaintForm \n-              onClose={() => setIsFormOpen(false)}\n-              onSubmit={handleComplaintSubmit}\n-            />\n-          </div>\n-        </div>\n-      )}\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogHeader,\n-  DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-    // Remove any existing dialog with the same ID\n-    const existingDialog = document.querySelector('[role=\"dialog\"]');\n-    if (existingDialog) {\n-      existingDialog.remove();\n-    }\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n-          </div>\n-        </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto\">\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n-        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n-          <DialogHeader>\n-            <DialogTitle>Submit a Complaint</DialogTitle>\n-          </DialogHeader>\n-          <ComplaintForm \n-            onClose={() => setIsFormOpen(false)}\n-            onSubmit={handleComplaintSubmit}\n-          />\n-        </DialogContent>\n-      </Dialog>\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n-export default ComplaintDashboard;\n-import React, { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Badge } from '@/components/ui/badge';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogHeader,\n-  DialogTitle,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Search,\n-  Filter,\n-  Plus,\n-  FileText,\n-  Clock,\n-  CheckCircle,\n-  X,\n-  ChevronDown,\n-  Download,\n-  AlertCircle,\n-  MoreVertical,\n-  Calendar,\n-  Users,\n-  Bell,\n-  Trash2,\n-  MailCheck,\n-} from 'lucide-react';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuTrigger,\n-  DropdownMenuSeparator,\n-} from '@/components/ui/dropdown-menu';\n-import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n-import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n-import { database, auth } from '@/config/firebase';\n-import { useAuthState } from 'react-firebase-hooks/auth';\n-import { toast } from 'react-hot-toast';\n-import { format, formatDistanceToNow } from 'date-fns';\n-import ComplaintForm from './ComplaintForm';\n-\n-const ComplaintDashboard = () => {\n-  const [user] = useAuthState(auth);\n-  const [isFormOpen, setIsFormOpen] = useState(false);\n-  const [filter, setFilter] = useState('all');\n-  const [searchQuery, setSearchQuery] = useState('');\n-  const [complaints, setComplaints] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const database = getDatabase();\n-  const [stats, setStats] = useState({\n-    total: 0,\n-    pending: 0,\n-    inProgress: 0,\n-    resolved: 0,\n-    rejected: 0,\n-    averageResolutionTime: 'N/A',\n-    highPriority: 0\n-  });\n-  const [notifications, setNotifications] = useState([]);\n-  const [unreadNotifications, setUnreadNotifications] = useState(0);\n-\n-  // Fetch user's complaints\n-  useEffect(() => {\n-    if (!user) {\n-      setLoading(false); // Stop loading if no user\n-      return;\n-    }\n-    setLoading(true);\n-    const complaintsRef = ref(database, 'complaintRequests');\n-    const userComplaintsQuery = query(\n-      complaintsRef,\n-      orderByChild('studentId'),\n-      equalTo(user.uid)\n-    );\n-\n-    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n-      const complaintsData = [];\n-      snapshot.forEach((childSnapshot) => {\n-        complaintsData.push({\n-          id: childSnapshot.key,\n-          ...childSnapshot.val()\n-        });\n-      });\n-      \n-      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n-      setComplaints(complaintsData);\n-      setLoading(false);\n-\n-      const newStats = {\n-        total: complaintsData.length,\n-        pending: complaintsData.filter(c => c.status === 'pending').length,\n-        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n-        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n-        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n-        highPriority: complaintsData.filter(c => c.priority === 'high').length\n-      };\n-      setStats({\n-        ...newStats,\n-        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n-      });\n-    });\n-    \n-    // This part handles TOASTS for unread notifications and marks them as read in DB.\n-    // It might be better to integrate this with the main notification fetching logic\n-    // to avoid multiple listeners or race conditions, but following current structure for now.\n-    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n-      const notificationsSnapshot = snapshot.val();\n-      if (notificationsSnapshot) {\n-        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n-          if (!notification.read) {\n-            toast(notification.message, {\n-              icon: notification.status === 'rejected' ? '❌' : \n-                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n-              duration: 5000,\n-            });\n-            // Mark notification as read in Firebase after toasting\n-            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n-          }\n-        });\n-      }\n-    });\n-\n-    return () => {\n-      unsubscribeComplaints();\n-      unsubscribeNotificationsToast();\n-    };\n-  }, [user]);\n-\n-  // Update the notifications useEffect to fetch from the correct database path\n-  useEffect(() => {\n-    if (!user) return;\n-\n-    const database = getDatabase();\n-    const notificationsRef = ref(database, `notifications/${user.uid}`);\n-    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n-      const notificationsData = [];\n-      if (snapshot.exists()) {\n-        snapshot.forEach((child) => {\n-          const notification = {\n-            id: child.key,\n-            ...child.val(),\n-            read: child.val().read || false\n-          };\n-          // Only include complaint-related notifications\n-          if (notification.type === 'complaint' || notification.category === 'complaint') {\n-            notificationsData.push(notification);\n-          }\n-        });\n-      }\n-      \n-      // Sort notifications by date, most recent first\n-      notificationsData.sort((a, b) => {\n-        const dateA = new Date(b.timestamp || b.createdAt || 0);\n-        const dateB = new Date(a.timestamp || a.createdAt || 0);\n-        return dateA - dateB;\n-      });\n-      \n-      setNotifications(notificationsData);\n-      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n-    });\n-\n-    return () => unsubscribeNotificationsDisplay();\n-  }, [user]);\n-\n-\n-  const calculateAverageResolutionTime = (complaints) => {\n-    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n-    if (resolvedComplaints.length === 0) return 'N/A';\n-\n-    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n-      const submitted = new Date(complaint.submittedAt);\n-      const resolved = new Date(complaint.reviewedAt);\n-      return acc + (resolved.getTime() - submitted.getTime());\n-    }, 0);\n-\n-    const avgTimeMs = totalTime / resolvedComplaints.length;\n-    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n-    if (avgDays < 1) {\n-        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n-        return `${avgHours} hours`;\n-    }\n-    return `${avgDays} days`;\n-  };\n-\n-  const getStatusBadgeClass = (status) => {\n-    switch (status) {\n-      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n-      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n-      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n-      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getPriorityBadgeClass = (priority) => {\n-    switch (priority) {\n-      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n-      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n-      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n-      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n-    }\n-  };\n-\n-  const getCategoryIcon = (category) => {\n-    const iconProps = { className: \"h-5 w-5\" };\n-    switch (category?.toLowerCase()) {\n-      case 'academic': return <FileText {...iconProps} />;\n-      case 'facility': return <Calendar {...iconProps} />;\n-      case 'staff': return <Users {...iconProps} />;\n-      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n-      case 'other': return <AlertCircle {...iconProps} />;\n-      default: return <FileText {...iconProps} />;\n-    }\n-  };\n-\n-  const handleNewComplaint = () => {\n-    if (!user) {\n-      toast.error('You must be logged in to submit a complaint.');\n-      return;\n-    }\n-    setIsFormOpen(true);\n-    // Remove any existing dialog with the same ID\n-    const existingDialog = document.querySelector('[role=\"dialog\"]');\n-    if (existingDialog) {\n-      existingDialog.remove();\n-    }\n-  };\n-\n-  const handleComplaintSubmit = (formData) => {\n-    // The ComplaintForm itself handles submission to Firebase.\n-    // This callback is mainly for post-submission actions like closing form and toasting.\n-    toast.success('Complaint submitted successfully!');\n-    setIsFormOpen(false);\n-  };\n-\n-  const filteredComplaints = complaints.filter(complaint => {\n-    const matchesStatus = filter === 'all' || complaint.status === filter;\n-    const matchesSearch = searchQuery === '' || \n-      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n-      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n-    return matchesStatus && matchesSearch;\n-  });\n-\n-  const markNotificationAsRead = async (notificationId) => {\n-    if (!user || !notificationId) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n-      await update(notificationRef, { read: true });\n-      toast.success('Notification marked as read');\n-    } catch (error) {\n-      console.error('Error marking notification as read:', error);\n-      toast.error('Could not update notification status');\n-    }\n-  };\n-\n-  const markAllNotificationsAsRead = async () => {\n-    if (!user || notifications.length === 0) return;\n-    \n-    try {\n-      const database = getDatabase();\n-      const updates = {};\n-      notifications.forEach(notification => {\n-        if (!notification.read) {\n-          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n-        }\n-      });\n-      \n-      if (Object.keys(updates).length > 0) {\n-        await update(ref(database), updates);\n-        toast.success('All notifications marked as read');\n-      }\n-    } catch (error) {\n-      console.error('Error marking all notifications as read:', error);\n-      toast.error('Could not update notifications');\n-    }\n-  };\n-\n-  const handleCancelComplaint = async (complaintId) => {\n-    if (!user || !complaintId) return;\n-    \n-    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n-    const complaintToCancel = complaints.find(c => c.id === complaintId);\n-    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n-        toast.error(\"This complaint cannot be cancelled.\");\n-        return;\n-    }\n-\n-    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n-      try {\n-        await update(ref(database, `complaintRequests/${complaintId}`), {\n-          status: 'cancelled',\n-          // Optionally, add a cancelledAt timestamp\n-          // cancelledAt: new Date().toISOString(), \n-        });\n-        toast.success('Complaint cancelled successfully.');\n-        // State will update via onValue listener\n-      } catch (error) {\n-        console.error('Error cancelling complaint:', error);\n-        toast.error('Could not cancel the complaint.');\n-      }\n-    }\n-  };\n-\n-\n-  const getNotificationIcon = (type) => {\n-    switch (type?.toLowerCase()) {\n-      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n-      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n-      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n-      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n-      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n-    }\n-  };\n-  \n-  const UserProfileDisplay = ({ user }) => (\n-    <div className=\"flex items-center space-x-3\">\n-      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n-        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n-        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n-          </Avatar>\n-          <div>\n-        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n-        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n-          </div>\n-        </div>\n-  );\n-\n-  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n-      </div>\n-    );\n-  }\n-\n-  return (\n-    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n-      {/* Header */}\n-      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n-        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n-          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n-          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n-            <DropdownMenu>\n-              <DropdownMenuTrigger asChild>\n-                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n-                  <Bell className=\"h-6 w-6\" />\n-                  {unreadNotifications > 0 && (\n-                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n-                  )}\n-                </Button>\n-              </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n-                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n-                <DropdownMenuSeparator />\n-                {notifications.length === 0 ? (\n-                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n-                ) : (\n-                  <div className=\"max-h-80 overflow-y-auto\">\n-                    {notifications.slice(0, 5).map((n) => (\n-                      <DropdownMenuItem \n-                        key={n.id} \n-                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n-                      >\n-                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n-                        <div className=\"flex-1\">\n-                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n-                            {n.message}\n-                          </p>\n-                          <p className=\"text-xs text-gray-500 mt-0.5\">\n-                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n-                          </p>\n-                        </div>\n-                      </DropdownMenuItem>\n-                    ))}\n-                  </div>\n-                )}\n-                 {notifications.length > 0 && <DropdownMenuSeparator />}\n-                <DropdownMenuItem \n-                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n-                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n-                >\n-                  View All in Panel\n-                </DropdownMenuItem>\n-              </DropdownMenuContent>\n-            </DropdownMenu>\n-\n-        <Button\n-          onClick={handleNewComplaint}\n-              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n-              disabled={!user}\n-        >\n-          <Plus className=\"h-5 w-5 mr-2\" />\n-          New Complaint\n-        </Button>\n-      </div>\n-        </div>\n-      </header>\n-      \n-      {/* Main Content Grid */}\n-      <div className=\"container mx-auto\">\n-        {/* Main Content Area (Complaints, Stats) */}\n-        <div className=\"space-y-6\">\n-          {/* Statistics Grid */}\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n-            {[\n-              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n-              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n-              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n-              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n-            ].map(stat => (\n-              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n-                <div className=\"flex items-center\">\n-                  <div className={`p-3 rounded-lg ${stat.color}`}>\n-                    <stat.icon className=\"h-6 w-6 text-white\" />\n-                  </div>\n-                  <div className=\"ml-4\">\n-                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n-                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n-                </div>\n-              </div>\n-            </Card>\n-            ))}\n-      </div>\n-\n-          {/* Filters and Search */}\n-          <Card className=\"p-4 shadow-md rounded-xl\">\n-            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n-              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n-            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n-            <Input\n-              type=\"text\"\n-                  placeholder=\"Search by subject, description, ID...\"\n-              value={searchQuery}\n-              onChange={(e) => setSearchQuery(e.target.value)}\n-                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n-                />\n-                {searchQuery && (\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n-                    onClick={() => setSearchQuery('')}\n-                  >\n-                    <X className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-          </div>\n-              <div className=\"flex items-center gap-2\">\n-                <span className=\"text-sm text-gray-500\">Status:</span>\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n-                      <Filter className=\"h-4 w-4 text-orange-500\" />\n-                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n-                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n-                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n-                        {f.replace('_', ' ')}\n-                      </DropdownMenuItem>\n-                    ))}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-            </div>\n-          </Card>\n-\n-          {/* Complaints List */}\n-          {loading && complaints.length > 0 && ( // Show inline loader if updating\n-             <div className=\"flex items-center justify-center py-8\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n-                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n-             </div>\n-          )}\n-      <div className=\"space-y-4\">\n-            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n-              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n-                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n-                  <div className=\"flex items-start space-x-4 flex-1\">\n-                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n-                    {getCategoryIcon(complaint.category)}\n-                  </div>\n-                    <div className=\"flex-1\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n-                          {complaint.subject}\n-                        </h3>\n-                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n-                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                        </div>\n-                      </div>\n-                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n-                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n-                        {complaint.description}\n-                      </p>\n-                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n-                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n-                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n-                      </Badge>\n-                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n-                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n-                        </Badge>\n-                        <span className=\"text-xs text-gray-500 flex items-center\">\n-                          <Calendar className=\"h-3 w-3 mr-1\" />\n-                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n-                        </span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n-                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n-                  </div>\n-                </div>\n-              </Card>\n-            )) : (\n-              !loading && ( // Only show \"No complaints\" if not loading\n-                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n-                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n-                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n-                  <p className=\"text-gray-400 text-sm mt-1\">\n-                    {filter === 'all' && searchQuery === ''\n-                      ? 'You haven\\'t submitted any complaints yet.'\n-                      : 'Try adjusting your search or filters.'}\n-                  </p>\n-                  {filter === 'all' && searchQuery === '' && (\n-                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n-                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n-                    </Button>\n-                  )}\n-            </Card>\n-              )\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Complaint Form Modal */}\n-      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n-        <DialogContent className=\"max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n-          <DialogHeader>\n-            <DialogTitle>Submit a Complaint</DialogTitle>\n-          </DialogHeader>\n-          <ComplaintForm \n-            onClose={() => setIsFormOpen(false)}\n-            onSubmit={handleComplaintSubmit}\n-          />\n-        </DialogContent>\n-      </Dialog>\n-      <style jsx global>{`\n-        .nice-scrollbar::-webkit-scrollbar {\n-          width: 6px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-track {\n-          background: #f1f1f1;\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb {\n-          background: #f97316; // orange-500\n-          border-radius: 10px;\n-        }\n-        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n-          background: #ea580c; // orange-600\n-        }\n-        .line-clamp-2 {\n-          overflow: hidden;\n-          display: -webkit-box;\n-          -webkit-box-orient: vertical;\n-          -webkit-line-clamp: 2;\n-        }\n-      `}</style>\n-    </div>\n-  );\n-};\n-\n-\n-const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n-  <DropdownMenu>\n-    <DropdownMenuTrigger asChild>\n-      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n-        <span className=\"sr-only\">Open menu</span>\n-        <MoreVertical className=\"h-5 w-5\" />\n-      </Button>\n-    </DropdownMenuTrigger>\n-    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n-        <FileText className=\"mr-2 h-4 w-4\" />\n-        View Details\n-      </DropdownMenuItem>\n-      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n-        <Download className=\"mr-2 h-4 w-4\" />\n-        Download PDF\n-      </DropdownMenuItem>\n-      {complaint.status === 'pending' && (\n-        <>\n-          <DropdownMenuSeparator />\n-          <DropdownMenuItem \n-            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n-            onClick={() => handleCancelComplaint(complaint.id)}\n-          >\n-            <Trash2 className=\"mr-2 h-4 w-4\" />\n-            Cancel Complaint\n-          </DropdownMenuItem>\n-        </>\n-      )}\n-    </DropdownMenuContent>\n-  </DropdownMenu>\n-);\n-\n export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748025687453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,630 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `users/${user.uid}/notifications`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : \n+                    notification.status === 'in_progress' ? '🔄' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `users/${user.uid}/notifications/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `users/${user.uid}/notifications`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Include all complaint-related notifications\n+          if (notification.type === 'complaint' || \n+              notification.category === 'complaint' ||\n+              notification.type === 'status_update' ||\n+              notification.type === 'vote_confirmation') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `users/${user.uid}/notifications/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-96 shadow-xl p-2\">\n+                <div className=\"px-4 py-3 font-semibold text-gray-900 border-b\">Notifications</div>\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-4 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-[400px] overflow-y-auto\">\n+                    {notifications.map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-4 cursor-pointer border-b last:border-b-0 hover:bg-gray-50 ${!n.read ? 'bg-blue-50' : ''}`}\n+                      >\n+                        <div className={`flex-shrink-0 p-2 rounded-full ${\n+                          n.status === 'rejected' ? 'bg-red-100' :\n+                          n.status === 'resolved' ? 'bg-green-100' :\n+                          'bg-blue-100'\n+                        }`}>\n+                          {getNotificationIcon(n.status)}\n+                        </div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-sm ${!n.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-1\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && (\n+                  <div className=\"p-3 text-center border-t\">\n+                    <Button\n+                      variant=\"ghost\"\n+                      size=\"sm\"\n+                      onClick={markAllNotificationsAsRead}\n+                      className=\"text-sm text-blue-600 hover:text-blue-700 hover:bg-blue-50\"\n+                    >\n+                      Mark all as read\n+                    </Button>\n+                  </div>\n+                 )}\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto\">\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+          <ComplaintForm \n+            isOpen={isFormOpen}\n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+      </Dialog>\n+\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748025693142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,619 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `users/${user.uid}/notifications`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : \n+                    notification.status === 'in_progress' ? '🔄' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `users/${user.uid}/notifications/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `users/${user.uid}/notifications`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Include all complaint-related notifications\n+          if (notification.type === 'complaint' || \n+              notification.category === 'complaint' ||\n+              notification.type === 'status_update' ||\n+              notification.type === 'vote_confirmation') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `users/${user.uid}/notifications/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-96 shadow-xl p-2\">\n+                <div className=\"px-4 py-3 font-semibold text-gray-900 border-b\">Notifications</div>\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-4 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-[400px] overflow-y-auto\">\n+                    {notifications.map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-4 cursor-pointer border-b last:border-b-0 hover:bg-gray-50 ${!n.read ? 'bg-blue-50' : ''}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto\">\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+          <ComplaintForm \n+            isOpen={isFormOpen}\n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+      </Dialog>\n+\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748025699236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,620 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `users/${user.uid}/notifications`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : \n+                    notification.status === 'in_progress' ? '🔄' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `users/${user.uid}/notifications/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `users/${user.uid}/notifications`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Include all complaint-related notifications\n+          if (notification.type === 'complaint' || \n+              notification.category === 'complaint' ||\n+              notification.type === 'status_update' ||\n+              notification.type === 'vote_confirmation') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `users/${user.uid}/notifications/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto\">\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+          <ComplaintForm \n+            isOpen={isFormOpen}\n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+      </Dialog>\n+\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748025706353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,617 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto\">\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+          <ComplaintForm \n+            isOpen={isFormOpen}\n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+      </Dialog>\n+\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748025857994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -356,51 +356,41 @@\n                     <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n                   )}\n                 </Button>\n               </DropdownMenuTrigger>\n-              <DropdownMenuContent align=\"end\" className=\"w-96 shadow-xl\">\n-                <div className=\"px-4 py-3 font-semibold text-gray-900\">Notifications</div>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n                 {notifications.length === 0 ? (\n-                  <div className=\"p-4 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n                 ) : (\n-                  <div className=\"max-h-[480px] overflow-y-auto\">\n-                    {notifications.map((n) => (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n                       <DropdownMenuItem \n                         key={n.id} \n-                        onClick={() => markNotificationAsRead(n.id)}\n-                        className={`flex items-start gap-3 px-4 py-3 border-b border-gray-100 cursor-pointer hover:bg-gray-50 ${!n.read ? 'bg-blue-50' : ''}`}\n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n                       >\n-                        <div className={`flex-shrink-0 p-2 rounded-full ${\n-                          n.status === 'rejected' ? 'bg-red-100' :\n-                          n.status === 'resolved' ? 'bg-green-100' :\n-                          'bg-blue-100'\n-                        }`}>\n-                          {getNotificationIcon(n.status)}\n-                        </div>\n-                        <div className=\"flex-1 min-w-0\">\n-                          <p className={`text-sm ${!n.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n                             {n.message}\n                           </p>\n-                          <p className=\"text-xs text-gray-500 mt-1\">\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n                             {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n                           </p>\n                         </div>\n                       </DropdownMenuItem>\n                     ))}\n                   </div>\n                 )}\n-                {notifications.length > 0 && (\n-                  <div className=\"p-3 text-center border-t border-gray-100\">\n-                    <Button\n-                      variant=\"ghost\"\n-                      size=\"sm\"\n-                      onClick={markAllNotificationsAsRead}\n-                      className=\"text-sm text-blue-600 hover:text-blue-700 hover:bg-blue-50\"\n-                    >\n-                      Mark all as read\n-                    </Button>\n-                  </div>\n-                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n               </DropdownMenuContent>\n             </DropdownMenu>\n \n         <Button\n"
                },
                {
                    "date": 1748026089750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,617 @@\n+import React, { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Input } from '@/components/ui/input';\n+import { Badge } from '@/components/ui/badge';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  Search,\n+  Filter,\n+  Plus,\n+  FileText,\n+  Clock,\n+  CheckCircle,\n+  X,\n+  ChevronDown,\n+  Download,\n+  AlertCircle,\n+  MoreVertical,\n+  Calendar,\n+  Users,\n+  Bell,\n+  Trash2,\n+  MailCheck,\n+} from 'lucide-react';\n+import {\n+  DropdownMenu,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuTrigger,\n+  DropdownMenuSeparator,\n+} from '@/components/ui/dropdown-menu';\n+import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n+import { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\n+import { database, auth } from '@/config/firebase';\n+import { useAuthState } from 'react-firebase-hooks/auth';\n+import { toast } from 'react-hot-toast';\n+import { format, formatDistanceToNow } from 'date-fns';\n+import ComplaintForm from './ComplaintForm';\n+\n+const ComplaintDashboard = () => {\n+  const [user] = useAuthState(auth);\n+  const [isFormOpen, setIsFormOpen] = useState(false);\n+  const [filter, setFilter] = useState('all');\n+  const [searchQuery, setSearchQuery] = useState('');\n+  const [complaints, setComplaints] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const database = getDatabase();\n+  const [stats, setStats] = useState({\n+    total: 0,\n+    pending: 0,\n+    inProgress: 0,\n+    resolved: 0,\n+    rejected: 0,\n+    averageResolutionTime: 'N/A',\n+    highPriority: 0\n+  });\n+  const [notifications, setNotifications] = useState([]);\n+  const [unreadNotifications, setUnreadNotifications] = useState(0);\n+\n+  // Fetch user's complaints\n+  useEffect(() => {\n+    if (!user) {\n+      setLoading(false); // Stop loading if no user\n+      return;\n+    }\n+    setLoading(true);\n+    const complaintsRef = ref(database, 'complaintRequests');\n+    const userComplaintsQuery = query(\n+      complaintsRef,\n+      orderByChild('studentId'),\n+      equalTo(user.uid)\n+    );\n+\n+    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n+      const complaintsData = [];\n+      snapshot.forEach((childSnapshot) => {\n+        complaintsData.push({\n+          id: childSnapshot.key,\n+          ...childSnapshot.val()\n+        });\n+      });\n+      \n+      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n+      setComplaints(complaintsData);\n+      setLoading(false);\n+\n+      const newStats = {\n+        total: complaintsData.length,\n+        pending: complaintsData.filter(c => c.status === 'pending').length,\n+        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n+        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n+        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n+        highPriority: complaintsData.filter(c => c.priority === 'high').length\n+      };\n+      setStats({\n+        ...newStats,\n+        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n+      });\n+    });\n+    \n+    // This part handles TOASTS for unread notifications and marks them as read in DB.\n+    // It might be better to integrate this with the main notification fetching logic\n+    // to avoid multiple listeners or race conditions, but following current structure for now.\n+    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n+      const notificationsSnapshot = snapshot.val();\n+      if (notificationsSnapshot) {\n+        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n+          if (!notification.read) {\n+            toast(notification.message, {\n+              icon: notification.status === 'rejected' ? '❌' : \n+                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n+              duration: 5000,\n+            });\n+            // Mark notification as read in Firebase after toasting\n+            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n+          }\n+        });\n+      }\n+    });\n+\n+    return () => {\n+      unsubscribeComplaints();\n+      unsubscribeNotificationsToast();\n+    };\n+  }, [user]);\n+\n+  // Update the notifications useEffect to fetch from the correct database path\n+  useEffect(() => {\n+    if (!user) return;\n+\n+    const database = getDatabase();\n+    const notificationsRef = ref(database, `notifications/${user.uid}`);\n+    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n+      const notificationsData = [];\n+      if (snapshot.exists()) {\n+        snapshot.forEach((child) => {\n+          const notification = {\n+            id: child.key,\n+            ...child.val(),\n+            read: child.val().read || false\n+          };\n+          // Only include complaint-related notifications\n+          if (notification.type === 'complaint' || notification.category === 'complaint') {\n+            notificationsData.push(notification);\n+          }\n+        });\n+      }\n+      \n+      // Sort notifications by date, most recent first\n+      notificationsData.sort((a, b) => {\n+        const dateA = new Date(b.timestamp || b.createdAt || 0);\n+        const dateB = new Date(a.timestamp || a.createdAt || 0);\n+        return dateA - dateB;\n+      });\n+      \n+      setNotifications(notificationsData);\n+      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n+    });\n+\n+    return () => unsubscribeNotificationsDisplay();\n+  }, [user]);\n+\n+\n+  const calculateAverageResolutionTime = (complaints) => {\n+    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n+    if (resolvedComplaints.length === 0) return 'N/A';\n+\n+    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n+      const submitted = new Date(complaint.submittedAt);\n+      const resolved = new Date(complaint.reviewedAt);\n+      return acc + (resolved.getTime() - submitted.getTime());\n+    }, 0);\n+\n+    const avgTimeMs = totalTime / resolvedComplaints.length;\n+    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n+    if (avgDays < 1) {\n+        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n+        return `${avgHours} hours`;\n+    }\n+    return `${avgDays} days`;\n+  };\n+\n+  const getStatusBadgeClass = (status) => {\n+    switch (status) {\n+      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n+      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n+      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n+      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getPriorityBadgeClass = (priority) => {\n+    switch (priority) {\n+      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n+      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n+      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n+      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n+    }\n+  };\n+\n+  const getCategoryIcon = (category) => {\n+    const iconProps = { className: \"h-5 w-5\" };\n+    switch (category?.toLowerCase()) {\n+      case 'academic': return <FileText {...iconProps} />;\n+      case 'facility': return <Calendar {...iconProps} />;\n+      case 'staff': return <Users {...iconProps} />;\n+      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n+      case 'other': return <AlertCircle {...iconProps} />;\n+      default: return <FileText {...iconProps} />;\n+    }\n+  };\n+\n+  const handleNewComplaint = () => {\n+    if (!user) {\n+      toast.error('You must be logged in to submit a complaint.');\n+      return;\n+    }\n+    setIsFormOpen(true);\n+    // Remove any existing dialog with the same ID\n+    const existingDialog = document.querySelector('[role=\"dialog\"]');\n+    if (existingDialog) {\n+      existingDialog.remove();\n+    }\n+  };\n+\n+  const handleComplaintSubmit = (formData) => {\n+    // The ComplaintForm itself handles submission to Firebase.\n+    // This callback is mainly for post-submission actions like closing form and toasting.\n+    toast.success('Complaint submitted successfully!');\n+    setIsFormOpen(false);\n+  };\n+\n+  const filteredComplaints = complaints.filter(complaint => {\n+    const matchesStatus = filter === 'all' || complaint.status === filter;\n+    const matchesSearch = searchQuery === '' || \n+      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n+    return matchesStatus && matchesSearch;\n+  });\n+\n+  const markNotificationAsRead = async (notificationId) => {\n+    if (!user || !notificationId) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n+      await update(notificationRef, { read: true });\n+      toast.success('Notification marked as read');\n+    } catch (error) {\n+      console.error('Error marking notification as read:', error);\n+      toast.error('Could not update notification status');\n+    }\n+  };\n+\n+  const markAllNotificationsAsRead = async () => {\n+    if (!user || notifications.length === 0) return;\n+    \n+    try {\n+      const database = getDatabase();\n+      const updates = {};\n+      notifications.forEach(notification => {\n+        if (!notification.read) {\n+          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n+        }\n+      });\n+      \n+      if (Object.keys(updates).length > 0) {\n+        await update(ref(database), updates);\n+        toast.success('All notifications marked as read');\n+      }\n+    } catch (error) {\n+      console.error('Error marking all notifications as read:', error);\n+      toast.error('Could not update notifications');\n+    }\n+  };\n+\n+  const handleCancelComplaint = async (complaintId) => {\n+    if (!user || !complaintId) return;\n+    \n+    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n+    const complaintToCancel = complaints.find(c => c.id === complaintId);\n+    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n+        toast.error(\"This complaint cannot be cancelled.\");\n+        return;\n+    }\n+\n+    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n+      try {\n+        await update(ref(database, `complaintRequests/${complaintId}`), {\n+          status: 'cancelled',\n+          // Optionally, add a cancelledAt timestamp\n+          // cancelledAt: new Date().toISOString(), \n+        });\n+        toast.success('Complaint cancelled successfully.');\n+        // State will update via onValue listener\n+      } catch (error) {\n+        console.error('Error cancelling complaint:', error);\n+        toast.error('Could not cancel the complaint.');\n+      }\n+    }\n+  };\n+\n+\n+  const getNotificationIcon = (type) => {\n+    switch (type?.toLowerCase()) {\n+      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n+      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n+      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n+      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n+      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n+    }\n+  };\n+  \n+  const UserProfileDisplay = ({ user }) => (\n+    <div className=\"flex items-center space-x-3\">\n+      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n+        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n+        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n+          </Avatar>\n+          <div>\n+        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n+        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n+          </div>\n+        </div>\n+  );\n+\n+  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n+        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n+      {/* Header */}\n+      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n+        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n+          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n+          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n+            <DropdownMenu>\n+              <DropdownMenuTrigger asChild>\n+                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n+                  <Bell className=\"h-6 w-6\" />\n+                  {unreadNotifications > 0 && (\n+                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n+                  )}\n+                </Button>\n+              </DropdownMenuTrigger>\n+              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n+                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n+                <DropdownMenuSeparator />\n+                {notifications.length === 0 ? (\n+                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n+                ) : (\n+                  <div className=\"max-h-80 overflow-y-auto\">\n+                    {notifications.slice(0, 5).map((n) => (\n+                      <DropdownMenuItem \n+                        key={n.id} \n+                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n+                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n+                      >\n+                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n+                        <div className=\"flex-1\">\n+                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n+                            {n.message}\n+                          </p>\n+                          <p className=\"text-xs text-gray-500 mt-0.5\">\n+                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n+                          </p>\n+                        </div>\n+                      </DropdownMenuItem>\n+                    ))}\n+                  </div>\n+                )}\n+                 {notifications.length > 0 && <DropdownMenuSeparator />}\n+                <DropdownMenuItem \n+                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n+                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n+                >\n+                  View All in Panel\n+                </DropdownMenuItem>\n+              </DropdownMenuContent>\n+            </DropdownMenu>\n+\n+        <Button\n+          onClick={handleNewComplaint}\n+              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n+              disabled={!user}\n+        >\n+          <Plus className=\"h-5 w-5 mr-2\" />\n+          New Complaint\n+        </Button>\n+      </div>\n+        </div>\n+      </header>\n+      \n+      {/* Main Content Grid */}\n+      <div className=\"container mx-auto\">\n+        {/* Main Content Area (Complaints, Stats) */}\n+        <div className=\"space-y-6\">\n+          {/* Statistics Grid */}\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n+            {[\n+              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n+              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n+              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n+              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n+            ].map(stat => (\n+              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n+                <div className=\"flex items-center\">\n+                  <div className={`p-3 rounded-lg ${stat.color}`}>\n+                    <stat.icon className=\"h-6 w-6 text-white\" />\n+                  </div>\n+                  <div className=\"ml-4\">\n+                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n+                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n+                </div>\n+              </div>\n+            </Card>\n+            ))}\n+      </div>\n+\n+          {/* Filters and Search */}\n+          <Card className=\"p-4 shadow-md rounded-xl\">\n+            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n+              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n+            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n+            <Input\n+              type=\"text\"\n+                  placeholder=\"Search by subject, description, ID...\"\n+              value={searchQuery}\n+              onChange={(e) => setSearchQuery(e.target.value)}\n+                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n+                />\n+                {searchQuery && (\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n+                    onClick={() => setSearchQuery('')}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+          </div>\n+              <div className=\"flex items-center gap-2\">\n+                <span className=\"text-sm text-gray-500\">Status:</span>\n+          <DropdownMenu>\n+            <DropdownMenuTrigger asChild>\n+                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n+                      <Filter className=\"h-4 w-4 text-orange-500\" />\n+                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n+                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n+              </Button>\n+            </DropdownMenuTrigger>\n+                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n+                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n+                        {f.replace('_', ' ')}\n+                      </DropdownMenuItem>\n+                    ))}\n+            </DropdownMenuContent>\n+          </DropdownMenu>\n+        </div>\n+            </div>\n+          </Card>\n+\n+          {/* Complaints List */}\n+          {loading && complaints.length > 0 && ( // Show inline loader if updating\n+             <div className=\"flex items-center justify-center py-8\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n+                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n+             </div>\n+          )}\n+      <div className=\"space-y-4\">\n+            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n+              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n+                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n+                  <div className=\"flex items-start space-x-4 flex-1\">\n+                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n+                    {getCategoryIcon(complaint.category)}\n+                  </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n+                          {complaint.subject}\n+                        </h3>\n+                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n+                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                        </div>\n+                      </div>\n+                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n+                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n+                        {complaint.description}\n+                      </p>\n+                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n+                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n+                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n+                      </Badge>\n+                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n+                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n+                        </Badge>\n+                        <span className=\"text-xs text-gray-500 flex items-center\">\n+                          <Calendar className=\"h-3 w-3 mr-1\" />\n+                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n+                        </span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n+                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n+                  </div>\n+                </div>\n+              </Card>\n+            )) : (\n+              !loading && ( // Only show \"No complaints\" if not loading\n+                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n+                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n+                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n+                  <p className=\"text-gray-400 text-sm mt-1\">\n+                    {filter === 'all' && searchQuery === ''\n+                      ? 'You haven\\'t submitted any complaints yet.'\n+                      : 'Try adjusting your search or filters.'}\n+                  </p>\n+                  {filter === 'all' && searchQuery === '' && (\n+                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n+                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n+                    </Button>\n+                  )}\n+            </Card>\n+              )\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Complaint Form Modal */}\n+      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n+          <ComplaintForm \n+            isOpen={isFormOpen}\n+            onClose={() => setIsFormOpen(false)}\n+            onSubmit={handleComplaintSubmit}\n+          />\n+      </Dialog>\n+\n+      <style jsx global>{`\n+        .nice-scrollbar::-webkit-scrollbar {\n+          width: 6px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-track {\n+          background: #f1f1f1;\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb {\n+          background: #f97316; // orange-500\n+          border-radius: 10px;\n+        }\n+        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n+          background: #ea580c; // orange-600\n+        }\n+        .line-clamp-2 {\n+          overflow: hidden;\n+          display: -webkit-box;\n+          -webkit-box-orient: vertical;\n+          -webkit-line-clamp: 2;\n+        }\n+      `}</style>\n+    </div>\n+  );\n+};\n+\n+\n+const ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n+  <DropdownMenu>\n+    <DropdownMenuTrigger asChild>\n+      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n+        <span className=\"sr-only\">Open menu</span>\n+        <MoreVertical className=\"h-5 w-5\" />\n+      </Button>\n+    </DropdownMenuTrigger>\n+    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n+        <FileText className=\"mr-2 h-4 w-4\" />\n+        View Details\n+      </DropdownMenuItem>\n+      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n+        <Download className=\"mr-2 h-4 w-4\" />\n+        Download PDF\n+      </DropdownMenuItem>\n+      {complaint.status === 'pending' && (\n+        <>\n+          <DropdownMenuSeparator />\n+          <DropdownMenuItem \n+            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n+            onClick={() => handleCancelComplaint(complaint.id)}\n+          >\n+            <Trash2 className=\"mr-2 h-4 w-4\" />\n+            Cancel Complaint\n+          </DropdownMenuItem>\n+        </>\n+      )}\n+    </DropdownMenuContent>\n+  </DropdownMenu>\n+);\n+\n+export default ComplaintDashboard;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1748019505546,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { ID } from 'appwrite';\nimport {\n  Search,\n  Filter,\n  Plus,\n  FileText,\n  Clock,\n  CheckCircle,\n  X,\n  ChevronDown,\n  Download,\n  AlertCircle,\n  MoreVertical,\n  Calendar,\n  Users,\n  Bell,\n  Trash2,\n  MailCheck,\n} from 'lucide-react';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from '@/components/ui/dropdown-menu';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { ref, onValue, query, orderByChild, equalTo, update, getDatabase } from 'firebase/database';\nimport { database, auth } from '@/config/firebase';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { toast } from 'react-hot-toast';\nimport { format, formatDistanceToNow } from 'date-fns';\nimport ComplaintForm from './ComplaintForm';\n\nconst ComplaintDashboard = () => {\n  const [user] = useAuthState(auth);\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [filter, setFilter] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [complaints, setComplaints] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const database = getDatabase();\n  const [stats, setStats] = useState({\n    total: 0,\n    pending: 0,\n    inProgress: 0,\n    resolved: 0,\n    rejected: 0,\n    averageResolutionTime: 'N/A',\n    highPriority: 0\n  });\n  const [notifications, setNotifications] = useState([]);\n  const [unreadNotifications, setUnreadNotifications] = useState(0);\n\n  // Fetch user's complaints\n  useEffect(() => {\n    if (!user) {\n      setLoading(false); // Stop loading if no user\n      return;\n    }\n    setLoading(true);\n    const complaintsRef = ref(database, 'complaintRequests');\n    const userComplaintsQuery = query(\n      complaintsRef,\n      orderByChild('studentId'),\n      equalTo(user.uid)\n    );\n\n    const unsubscribeComplaints = onValue(userComplaintsQuery, (snapshot) => {\n      const complaintsData = [];\n      snapshot.forEach((childSnapshot) => {\n        complaintsData.push({\n          id: childSnapshot.key,\n          ...childSnapshot.val()\n        });\n      });\n      \n      complaintsData.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n      setComplaints(complaintsData);\n      setLoading(false);\n\n      const newStats = {\n        total: complaintsData.length,\n        pending: complaintsData.filter(c => c.status === 'pending').length,\n        inProgress: complaintsData.filter(c => c.status === 'in_progress').length,\n        resolved: complaintsData.filter(c => c.status === 'resolved').length,\n        rejected: complaintsData.filter(c => c.status === 'rejected').length,\n        highPriority: complaintsData.filter(c => c.priority === 'high').length\n      };\n      setStats({\n        ...newStats,\n        averageResolutionTime: calculateAverageResolutionTime(complaintsData)\n      });\n    });\n    \n    // This part handles TOASTS for unread notifications and marks them as read in DB.\n    // It might be better to integrate this with the main notification fetching logic\n    // to avoid multiple listeners or race conditions, but following current structure for now.\n    const notificationsToastRef = ref(database, `notifications/${user.uid}`);\n    const unsubscribeNotificationsToast = onValue(notificationsToastRef, (snapshot) => {\n      const notificationsSnapshot = snapshot.val();\n      if (notificationsSnapshot) {\n        Object.entries(notificationsSnapshot).forEach(([key, notification]) => {\n          if (!notification.read) {\n            toast(notification.message, {\n              icon: notification.status === 'rejected' ? '❌' : \n                    notification.status === 'resolved' ? '✅' : 'ℹ️',\n              duration: 5000,\n            });\n            // Mark notification as read in Firebase after toasting\n            update(ref(database, `notifications/${user.uid}/${key}`), { read: true });\n          }\n        });\n      }\n    });\n\n    return () => {\n      unsubscribeComplaints();\n      unsubscribeNotificationsToast();\n    };\n  }, [user]);\n\n  // Update the notifications useEffect to fetch from the correct database path\n  useEffect(() => {\n    if (!user) return;\n\n    const database = getDatabase();\n    const notificationsRef = ref(database, `notifications/${user.uid}`);\n    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\n      const notificationsData = [];\n      if (snapshot.exists()) {\n        snapshot.forEach((child) => {\n          const notification = {\n            id: child.key,\n            ...child.val(),\n            read: child.val().read || false\n          };\n          // Only include complaint-related notifications\n          if (notification.type === 'complaint' || notification.category === 'complaint') {\n            notificationsData.push(notification);\n          }\n        });\n      }\n      \n      // Sort notifications by date, most recent first\n      notificationsData.sort((a, b) => {\n        const dateA = new Date(b.timestamp || b.createdAt || 0);\n        const dateB = new Date(a.timestamp || a.createdAt || 0);\n        return dateA - dateB;\n      });\n      \n      setNotifications(notificationsData);\n      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\n    });\n\n    return () => unsubscribeNotificationsDisplay();\n  }, [user]);\n\n\n  const calculateAverageResolutionTime = (complaints) => {\n    const resolvedComplaints = complaints.filter(c => c.status === 'resolved' && c.submittedAt && c.reviewedAt);\n    if (resolvedComplaints.length === 0) return 'N/A';\n\n    const totalTime = resolvedComplaints.reduce((acc, complaint) => {\n      const submitted = new Date(complaint.submittedAt);\n      const resolved = new Date(complaint.reviewedAt);\n      return acc + (resolved.getTime() - submitted.getTime());\n    }, 0);\n\n    const avgTimeMs = totalTime / resolvedComplaints.length;\n    const avgDays = Math.round((avgTimeMs / (1000 * 60 * 60 * 24)) * 10) / 10;\n    if (avgDays < 1) {\n        const avgHours = Math.round((avgTimeMs / (1000 * 60 * 60)) * 10) / 10;\n        return `${avgHours} hours`;\n    }\n    return `${avgDays} days`;\n  };\n\n  const getStatusBadgeClass = (status) => {\n    switch (status) {\n      case 'pending': return 'bg-yellow-100 text-yellow-700 border border-yellow-300';\n      case 'in_progress': return 'bg-blue-100 text-blue-700 border border-blue-300';\n      case 'resolved': return 'bg-green-100 text-green-700 border border-green-300';\n      case 'rejected': return 'bg-red-100 text-red-700 border border-red-300';\n      case 'cancelled': return 'bg-gray-100 text-gray-700 border border-gray-300';\n      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n    }\n  };\n\n  const getPriorityBadgeClass = (priority) => {\n    switch (priority) {\n      case 'high': return 'bg-red-100 text-red-700 border border-red-300';\n      case 'medium': return 'bg-orange-100 text-orange-700 border border-orange-300';\n      case 'low': return 'bg-green-100 text-green-700 border border-green-300';\n      default: return 'bg-gray-100 text-gray-700 border border-gray-300';\n    }\n  };\n\n  const getCategoryIcon = (category) => {\n    const iconProps = { className: \"h-5 w-5\" };\n    switch (category?.toLowerCase()) {\n      case 'academic': return <FileText {...iconProps} />;\n      case 'facility': return <Calendar {...iconProps} />;\n      case 'staff': return <Users {...iconProps} />;\n      case 'financial': return <Users {...iconProps} />; // Example, replace with appropriate icon\n      case 'other': return <AlertCircle {...iconProps} />;\n      default: return <FileText {...iconProps} />;\n    }\n  };\n\n  const handleNewComplaint = () => {\n    if (!user) {\n      toast.error('You must be logged in to submit a complaint.');\n      return;\n    }\n    setIsFormOpen(true);\n  };\n\n  const handleComplaintSubmit = (formData) => {\n    // The ComplaintForm itself handles submission to Firebase.\n    // This callback is mainly for post-submission actions like closing form and toasting.\n    toast.success('Complaint submitted successfully!');\n    setIsFormOpen(false);\n  };\n\n  const filteredComplaints = complaints.filter(complaint => {\n    const matchesStatus = filter === 'all' || complaint.status === filter;\n    const matchesSearch = searchQuery === '' || \n      complaint.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      complaint.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      complaint.id?.toLowerCase().includes(searchQuery.toLowerCase());\n    return matchesStatus && matchesSearch;\n  });\n\n  const markNotificationAsRead = async (notificationId) => {\n    if (!user || !notificationId) return;\n    \n    try {\n      const database = getDatabase();\n      const notificationRef = ref(database, `notifications/${user.uid}/${notificationId}`);\n      await update(notificationRef, { read: true });\n      toast.success('Notification marked as read');\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      toast.error('Could not update notification status');\n    }\n  };\n\n  const markAllNotificationsAsRead = async () => {\n    if (!user || notifications.length === 0) return;\n    \n    try {\n      const database = getDatabase();\n      const updates = {};\n      notifications.forEach(notification => {\n        if (!notification.read) {\n          updates[`notifications/${user.uid}/${notification.id}/read`] = true;\n        }\n      });\n      \n      if (Object.keys(updates).length > 0) {\n        await update(ref(database), updates);\n        toast.success('All notifications marked as read');\n      }\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n      toast.error('Could not update notifications');\n    }\n  };\n\n  const handleCancelComplaint = async (complaintId) => {\n    if (!user || !complaintId) return;\n    \n    // Find the complaint to ensure it's cancellable (e.g., status is 'pending')\n    const complaintToCancel = complaints.find(c => c.id === complaintId);\n    if (!complaintToCancel || complaintToCancel.status !== 'pending') {\n        toast.error(\"This complaint cannot be cancelled.\");\n        return;\n    }\n\n    if (window.confirm(\"Are you sure you want to cancel this complaint? This action cannot be undone.\")) {\n      try {\n        await update(ref(database, `complaintRequests/${complaintId}`), {\n          status: 'cancelled',\n          // Optionally, add a cancelledAt timestamp\n          // cancelledAt: new Date().toISOString(), \n        });\n        toast.success('Complaint cancelled successfully.');\n        // State will update via onValue listener\n      } catch (error) {\n        console.error('Error cancelling complaint:', error);\n        toast.error('Could not cancel the complaint.');\n      }\n    }\n  };\n\n\n  const getNotificationIcon = (type) => {\n    switch (type?.toLowerCase()) {\n      case 'resolved': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n      case 'in_progress': return <Clock className=\"h-5 w-5 text-blue-500\" />; // Added for in_progress\n      case 'pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n      default: return <Bell className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n  \n  const UserProfileDisplay = ({ user }) => (\n    <div className=\"flex items-center space-x-3\">\n      <Avatar className=\"h-12 w-12 border-2 border-orange-500\">\n        <AvatarImage src={user?.photoURL || undefined} alt={user?.displayName || 'User'} />\n        <AvatarFallback>{user?.displayName?.charAt(0) || 'U'}</AvatarFallback>\n          </Avatar>\n          <div>\n        <h2 className=\"text-xl font-semibold text-gray-800\">{user?.displayName || 'Student User'}</h2>\n        <p className=\"text-sm text-gray-500\">ID: {user?.uid ? user.uid.substring(0, 10) + '...' : 'N/A'}</p>\n          </div>\n        </div>\n  );\n\n  if (loading && complaints.length === 0) { // Show full page loader only on initial load\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-orange-500\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4 md:p-6\">\n      {/* Header */}\n      <header className=\"mb-6 md:mb-8 pb-4 border-b border-gray-200\">\n        <div className=\"container mx-auto flex flex-col sm:flex-row justify-between items-center gap-4\">\n          {user ? <UserProfileDisplay user={user} /> : <div>Loading user...</div>}\n          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"relative text-gray-600 hover:text-orange-500\">\n                  <Bell className=\"h-6 w-6\" />\n                  {unreadNotifications > 0 && (\n                    <span className=\"absolute top-0 right-0 block h-2.5 w-2.5 transform -translate-y-1/2 translate-x-1/2 rounded-full bg-red-500 ring-2 ring-white\" />\n                  )}\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-80 shadow-xl\">\n                <div className=\"p-3 font-medium text-gray-700\">Notifications</div>\n                <DropdownMenuSeparator />\n                {notifications.length === 0 ? (\n                  <div className=\"p-3 text-sm text-gray-500 text-center\">No notifications yet.</div>\n                ) : (\n                  <div className=\"max-h-80 overflow-y-auto\">\n                    {notifications.slice(0, 5).map((n) => (\n                      <DropdownMenuItem \n                        key={n.id} \n                        onClick={() => !n.read && markNotificationAsRead(n.id)}\n                        className={`flex items-start gap-3 p-3 ${!n.read ? 'bg-orange-50' : 'opacity-75'}`}\n                      >\n                        <div className=\"flex-shrink-0 mt-0.5\">{getNotificationIcon(n.status)}</div>\n                        <div className=\"flex-1\">\n                          <p className={`text-xs ${!n.read ? 'font-semibold text-gray-800' : 'text-gray-600'}`}>\n                            {n.message}\n                          </p>\n                          <p className=\"text-xs text-gray-500 mt-0.5\">\n                            {formatDistanceToNow(new Date(n.timestamp), { addSuffix: true })}\n                          </p>\n                        </div>\n                      </DropdownMenuItem>\n                    ))}\n                  </div>\n                )}\n                 {notifications.length > 0 && <DropdownMenuSeparator />}\n                <DropdownMenuItem \n                    onClick={() => document.getElementById('notifications-panel')?.scrollIntoView({ behavior: 'smooth' })}\n                    className=\"justify-center p-2 text-sm text-orange-600 hover:!bg-orange-100\"\n                >\n                  View All in Panel\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n        <Button\n          onClick={handleNewComplaint}\n              className=\"bg-orange-500 hover:bg-orange-600 text-white font-medium shadow-md hover:shadow-lg transition-shadow\"\n              disabled={!user}\n        >\n          <Plus className=\"h-5 w-5 mr-2\" />\n          New Complaint\n        </Button>\n      </div>\n        </div>\n      </header>\n      \n      {/* Main Content Grid */}\n      <div className=\"container mx-auto grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6\">\n        {/* Notifications Panel (Left Sidebar on LG+) */}\n        <div id=\"notifications-panel\" className=\"lg:sticky lg:top-6 h-fit\">\n          <Card className=\"shadow-lg rounded-xl overflow-hidden\">\n            <div className=\"p-4 border-b bg-white\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n                  <Bell className=\"h-5 w-5 mr-2 text-orange-500\" />\n                  Activity Feed\n                </h3>\n                {unreadNotifications > 0 && (\n                  <Badge variant=\"destructive\" className=\"text-xs\">{unreadNotifications} New</Badge>\n                )}\n              </div>\n            </div>\n            <div className=\"p-1 max-h-[calc(100vh-250px)] overflow-y-auto nice-scrollbar\"> {/* Adjusted max-h */}\n              {notifications.length === 0 && (\n                <div className=\"p-6 text-center text-gray-500\">\n                  <MailCheck className=\"h-12 w-12 mx-auto text-gray-300 mb-3\" />\n                  <p className=\"font-medium\">All caught up!</p>\n                  <p className=\"text-sm\">No new notifications.</p>\n                </div>\n              )}\n              {notifications.map((notification) => (\n                <div\n                  key={notification.id}\n                  className={`p-3 m-2 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md ${\n                    notification.read ? 'bg-white border-gray-200' : 'bg-orange-50 border-orange-200 shadow-sm'\n                  }`}\n                  onClick={() => !notification.read && markNotificationAsRead(notification.id)}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"flex-shrink-0 mt-1\">{getNotificationIcon(notification.status)}</div>\n                    <div className=\"flex-1\">\n                      <p className={`text-sm ${!notification.read ? 'font-semibold text-gray-900' : 'text-gray-700'}`}>\n                        {notification.message}\n                      </p>\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        {formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true })}\n                      </p>\n                    </div>\n                    {!notification.read && (\n                      <div className=\"h-2 w-2 rounded-full bg-orange-500 self-center animate-pulse\"></div>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n            {notifications.length > 0 && unreadNotifications > 0 && (\n              <div className=\"p-3 border-t bg-white\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"w-full text-orange-600 border-orange-300 hover:bg-orange-50 hover:text-orange-700\"\n                  onClick={markAllNotificationsAsRead}\n                  disabled={unreadNotifications === 0}\n                >\n                  <MailCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n                </Button>\n              </div>\n            )}\n          </Card>\n        </div>\n\n        {/* Main Content Area (Complaints, Stats) */}\n        <div className=\"space-y-6\">\n          {/* Statistics Grid */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\n            {[\n              { title: 'Total Complaints', value: stats.total, icon: FileText, color: 'bg-orange-500' },\n              { title: 'Resolved', value: stats.resolved, icon: CheckCircle, color: 'bg-green-500' },\n              { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-yellow-500' },\n              { title: 'Avg. Resolution', value: stats.averageResolutionTime, icon: AlertCircle, color: 'bg-blue-500' }\n            ].map(stat => (\n              <Card key={stat.title} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl\">\n                <div className=\"flex items-center\">\n                  <div className={`p-3 rounded-lg ${stat.color}`}>\n                    <stat.icon className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wider\">{stat.title}</p>\n                    <p className=\"text-2xl font-semibold text-gray-800\">{stat.value}</p>\n                </div>\n              </div>\n            </Card>\n            ))}\n      </div>\n\n          {/* Filters and Search */}\n          <Card className=\"p-4 shadow-md rounded-xl\">\n            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3\">\n              <div className=\"relative flex-grow sm:flex-grow-0 w-full sm:w-auto\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n            <Input\n              type=\"text\"\n                  placeholder=\"Search by subject, description, ID...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 pr-10 w-full sm:w-[300px] lg:w-[350px] rounded-md focus:ring-orange-500 focus:border-orange-500\"\n                />\n                {searchQuery && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-1 h-auto text-gray-400 hover:text-gray-600\"\n                    onClick={() => setSearchQuery('')}\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                )}\n          </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm text-gray-500\">Status:</span>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n                    <Button variant=\"outline\" className=\"flex items-center gap-2 capitalize rounded-md border-gray-300 hover:border-orange-500\">\n                      <Filter className=\"h-4 w-4 text-orange-500\" />\n                      {filter === 'all' ? 'All' : filter.replace('_', ' ')}\n                      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n              </Button>\n            </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n                    {['all', 'pending', 'in_progress', 'resolved', 'rejected', 'cancelled'].map(f => (\n                      <DropdownMenuItem key={f} onClick={() => setFilter(f)} className=\"capitalize hover:!bg-orange-50\">\n                        {f.replace('_', ' ')}\n                      </DropdownMenuItem>\n                    ))}\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n            </div>\n          </Card>\n\n          {/* Complaints List */}\n          {loading && complaints.length > 0 && ( // Show inline loader if updating\n             <div className=\"flex items-center justify-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500\"></div>\n                <p className=\"ml-2 text-gray-600\">Updating complaints...</p>\n             </div>\n          )}\n      <div className=\"space-y-4\">\n            {filteredComplaints.length > 0 ? filteredComplaints.map((complaint) => (\n              <Card key={complaint.id} className=\"p-5 shadow-md hover:shadow-lg transition-shadow rounded-xl overflow-hidden\">\n                <div className=\"flex flex-col sm:flex-row items-start justify-between\">\n                  <div className=\"flex items-start space-x-4 flex-1\">\n                    <div className={`p-3 rounded-lg bg-orange-100 text-orange-600 hidden sm:block`}>\n                    {getCategoryIcon(complaint.category)}\n                  </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between\">\n                        <h3 className=\"text-md font-semibold text-gray-800 hover:text-orange-600 cursor-pointer\">\n                          {complaint.subject}\n                        </h3>\n                        <div className=\"sm:hidden\"> {/* Actions for mobile */}\n                            <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n                        </div>\n                      </div>\n                      <p className=\"text-xs text-gray-400 mb-1\">ID: {complaint.id}</p>\n                      <p className=\"text-sm text-gray-600 mt-1 leading-relaxed line-clamp-2\">\n                        {complaint.description}\n                      </p>\n                      <div className=\"flex flex-wrap items-center gap-2 mt-3\">\n                        <Badge className={`text-xs px-2 py-0.5 ${getStatusBadgeClass(complaint.status)}`} variant=\"outline\">\n                          {complaint.status?.replace('_', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}\n                      </Badge>\n                        <Badge className={`text-xs px-2 py-0.5 ${getPriorityBadgeClass(complaint.priority)}`} variant=\"outline\">\n                          {complaint.priority?.charAt(0).toUpperCase() + complaint.priority?.slice(1)} Priority\n                        </Badge>\n                        <span className=\"text-xs text-gray-500 flex items-center\">\n                          <Calendar className=\"h-3 w-3 mr-1\" />\n                          {format(new Date(complaint.submittedAt), 'MMM d, yyyy')}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"hidden sm:block ml-4\"> {/* Actions for desktop */}\n                    <ComplaintActionsDropdown complaint={complaint} handleCancelComplaint={handleCancelComplaint} />\n                  </div>\n                </div>\n              </Card>\n            )) : (\n              !loading && ( // Only show \"No complaints\" if not loading\n                <Card className=\"text-center py-12 shadow-md rounded-xl\">\n                  <AlertCircle className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n                  <p className=\"text-gray-600 text-xl font-medium\">No Complaints Found</p>\n                  <p className=\"text-gray-400 text-sm mt-1\">\n                    {filter === 'all' && searchQuery === ''\n                      ? 'You haven\\'t submitted any complaints yet.'\n                      : 'Try adjusting your search or filters.'}\n                  </p>\n                  {filter === 'all' && searchQuery === '' && (\n                    <Button size=\"sm\" className=\"mt-6 bg-orange-500 hover:bg-orange-600\" onClick={handleNewComplaint}>\n                      <Plus className=\"h-4 w-4 mr-1.5\" /> Create First Complaint\n                    </Button>\n                  )}\n            </Card>\n              )\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Complaint Form Modal */}\n      {isFormOpen && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n          <div className=\"absolute inset-0 bg-black/50\" onClick={() => setIsFormOpen(false)} />\n          <div className=\"relative bg-white p-6 rounded-lg shadow-xl w-full max-w-[600px] max-h-[90vh] overflow-y-auto\">\n            <button\n              onClick={() => setIsFormOpen(false)}\n              className=\"absolute top-4 right-4 text-gray-500 hover:text-gray-700\"\n            >\n              <X className=\"h-5 w-5\" />\n            </button>\n            <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">Submit a New Complaint</h2>\n        <ComplaintForm \n          onClose={() => setIsFormOpen(false)}\n              onSubmitSuccess={handleComplaintSubmit}\n            />\n          </div>\n        </div>\n      )}\n      <style jsx global>{`\n        .nice-scrollbar::-webkit-scrollbar {\n          width: 6px;\n        }\n        .nice-scrollbar::-webkit-scrollbar-track {\n          background: #f1f1f1;\n          border-radius: 10px;\n        }\n        .nice-scrollbar::-webkit-scrollbar-thumb {\n          background: #f97316; // orange-500\n          border-radius: 10px;\n        }\n        .nice-scrollbar::-webkit-scrollbar-thumb:hover {\n          background: #ea580c; // orange-600\n        }\n        .line-clamp-2 {\n          overflow: hidden;\n          display: -webkit-box;\n          -webkit-box-orient: vertical;\n          -webkit-line-clamp: 2;\n        }\n      `}</style>\n    </div>\n  );\n};\n\n\nconst ComplaintActionsDropdown = ({ complaint, handleCancelComplaint }) => (\n  <DropdownMenu>\n    <DropdownMenuTrigger asChild>\n      <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-500 hover:text-orange-500\">\n        <span className=\"sr-only\">Open menu</span>\n        <MoreVertical className=\"h-5 w-5\" />\n      </Button>\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"end\" className=\"shadow-xl\">\n      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"View Details feature coming soon!\")}>\n        <FileText className=\"mr-2 h-4 w-4\" />\n        View Details\n      </DropdownMenuItem>\n      <DropdownMenuItem className=\"hover:!bg-orange-50\" onClick={() => toast.info(\"Download feature coming soon!\")}>\n        <Download className=\"mr-2 h-4 w-4\" />\n        Download PDF\n      </DropdownMenuItem>\n      {complaint.status === 'pending' && (\n        <>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem \n            className=\"text-red-600 hover:!bg-red-50 hover:!text-red-700 focus:!bg-red-50 focus:!text-red-700\"\n            onClick={() => handleCancelComplaint(complaint.id)}\n          >\n            <Trash2 className=\"mr-2 h-4 w-4\" />\n            Cancel Complaint\n          </DropdownMenuItem>\n        </>\n      )}\n    </DropdownMenuContent>\n  </DropdownMenu>\n);\n\nexport default ComplaintDashboard;"
        }
    ]
}