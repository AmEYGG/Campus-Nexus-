{
    "sourceFile": "src/components/features/Elections/ElectionDashboard.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1748024623689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1748024623689,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { \r\n  Users,\r\n  Vote,\r\n  BarChart2,\r\n  Clock,\r\n  CheckCircle,\r\n  AlertCircle,\r\n  Home,\r\n  PieChart,\r\n  Building,\r\n  FileText,\r\n  Settings,\r\n  LogOut,\r\n  Book,\r\n  Calendar,\r\n  Trophy,\r\n  Star,\r\n  Award,\r\n  TrendingUp,\r\n  Activity,\r\n  Shield,\r\n  Medal,\r\n  Plus,\r\n  Loader2,\r\n  Bell,\r\n  ChevronRight\r\n} from 'lucide-react';\r\nimport CandidateApplicationForm from './CandidateApplicationForm';\r\nimport { getDatabase, ref, onValue, push, query, orderByChild, equalTo, set, get, update } from 'firebase/database';\r\nimport { firebaseAuthService } from '../../../services/firebaseAuth.service';\r\nimport { toast } from 'react-hot-toast';\r\nimport { Button } from '@/components/ui/button';\r\n\r\nconst ElectionDashboard = () => {\r\n  const [activeElection, setActiveElection] = useState('student-council-2024');\r\n  const [timeRemaining, setTimeRemaining] = useState({ days: 3, hours: 14, minutes: 32 });\r\n  const [liveUpdate, setLiveUpdate] = useState(true);\r\n  const navigate = useNavigate();\r\n  const [isCandidateFormOpen, setIsCandidateFormOpen] = useState(false);\r\n  const [candidates, setCandidates] = useState([]);\r\n  const [isLoadingCandidates, setIsLoadingCandidates] = useState(true);\r\n  const [user, setUser] = useState(null);\r\n  const [hasVoted, setHasVoted] = useState(false);\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [isLoadingNotifications, setIsLoadingNotifications] = useState(true);\r\n  const [rawCandidates, setRawCandidates] = useState([]);\r\n  const [rawVotes, setRawVotes] = useState({});\r\n  const [unreadNotifications, setUnreadNotifications] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      try {\r\n        const currentUser = await firebaseAuthService.getCurrentUser();\r\n        if (currentUser && currentUser.userProfile) {\r\n          setUser(currentUser);\r\n        } else {\r\n          setUser(null);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching current user:', error);\r\n        setUser(null);\r\n      }\r\n    };\r\n\r\n    fetchUser();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!activeElection) return;\r\n\r\n    setIsLoadingCandidates(true);\r\n    const database = getDatabase();\r\n    const approvedCandidatesQuery = query(\r\n      ref(database, 'election_candidates'),\r\n      orderByChild('status'),\r\n      equalTo('approved')\r\n    );\r\n\r\n    const unsubscribeCandidates = onValue(approvedCandidatesQuery, (snapshot) => {\r\n      const data = snapshot.val();\r\n      const loadedCandidates = [];\r\n      if (data) {\r\n        for (const key in data) {\r\n          loadedCandidates.push({\r\n            id: key,\r\n            ...data[key],\r\n          });\r\n        }\r\n      }\r\n      setRawCandidates(loadedCandidates);\r\n    }, (error) => {\r\n      console.error('Error fetching approved candidates:', error);\r\n      toast({ title: 'Error', description: 'Failed to load candidates.', variant: 'destructive' });\r\n      setIsLoadingCandidates(false);\r\n    });\r\n\r\n    const votesRef = ref(database, `votes/${activeElection}`);\r\n    const unsubscribeVotes = onValue(votesRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      setRawVotes(data || {});\r\n    }, (error) => {\r\n      console.error('Error fetching votes:', error);\r\n      toast({ title: 'Error', description: 'Failed to load vote data.', variant: 'destructive' });\r\n      setIsLoadingCandidates(false);\r\n    });\r\n\r\n    return () => {\r\n      unsubscribeCandidates();\r\n      unsubscribeVotes();\r\n    };\r\n  }, [activeElection]);\r\n\r\n  useEffect(() => {\r\n    if (rawCandidates.length > 0 || Object.keys(rawVotes).length > 0) {\r\n      const processedCandidates = rawCandidates.map(candidate => ({\r\n        ...candidate,\r\n        votes: 0,\r\n        percentage: 0,\r\n        trending: 'up'\r\n      }));\r\n      let totalVotes = 0;\r\n\r\n      for (const userId in rawVotes) {\r\n        const vote = rawVotes[userId];\r\n        if (vote && vote.candidateId) {\r\n          const candidate = processedCandidates.find(c => c.id === vote.candidateId);\r\n          if (candidate) {\r\n            candidate.votes = (candidate.votes || 0) + 1;\r\n            totalVotes++;\r\n          }\r\n        }\r\n      }\r\n\r\n      processedCandidates.forEach(candidate => {\r\n        candidate.percentage = totalVotes > 0 ? Math.round((candidate.votes / totalVotes) * 100) : 0;\r\n      });\r\n\r\n      processedCandidates.sort((a, b) => b.votes - a.votes);\r\n\r\n      setCandidates(processedCandidates);\r\n      setIsLoadingCandidates(false);\r\n    } else if (rawCandidates.length === 0 && Object.keys(rawVotes).length === 0 && !isLoadingCandidates) {\r\n      setCandidates([]);\r\n      setIsLoadingCandidates(false);\r\n    }\r\n  }, [rawCandidates, rawVotes]);\r\n\r\n  useEffect(() => {\r\n    if (!user || !activeElection) {\r\n      setHasVoted(false);\r\n      setNotifications([]);\r\n      setIsLoadingNotifications(false);\r\n      return;\r\n    }\r\n\r\n    const database = getDatabase();\r\n    const userId = user.authUser.uid;\r\n\r\n    // Check vote status\r\n    const userVoteRef = ref(database, `votes/${activeElection}/${userId}`);\r\n    const unsubscribeVoteCheck = onValue(userVoteRef, (snapshot) => {\r\n      setHasVoted(snapshot.exists());\r\n    }, (error) => {\r\n      console.error('Error checking user vote status:', error);\r\n    });\r\n\r\n    // Fetch notifications\r\n    setIsLoadingNotifications(true);\r\n    const userNotificationsRef = ref(database, `users/${userId}/notifications`);\r\n    const unsubscribeNotifications = onValue(userNotificationsRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      const loadedNotifications = [];\r\n      if (data) {\r\n        Object.entries(data).forEach(([key, notification]) => {\r\n          loadedNotifications.push({\r\n            id: key,\r\n            ...notification\r\n          });\r\n        });\r\n        // Sort notifications by timestamp, newest first\r\n        loadedNotifications.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n      }\r\n      setNotifications(loadedNotifications);\r\n      setIsLoadingNotifications(false);\r\n    }, (error) => {\r\n      console.error('Error fetching notifications:', error);\r\n      toast.error('Failed to load notifications');\r\n      setIsLoadingNotifications(false);\r\n    });\r\n\r\n    return () => {\r\n      unsubscribeVoteCheck();\r\n      unsubscribeNotifications();\r\n    };\r\n  }, [user, activeElection]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setTimeRemaining(prev => {\r\n        if (prev.minutes > 0) return { ...prev, minutes: prev.minutes - 1 };\r\n        if (prev.hours > 0) return { ...prev, minutes: 59, hours: prev.hours - 1 };\r\n        if (prev.days > 0) return { days: prev.days - 1, hours: 23, minutes: 59 };\r\n        clearInterval(interval);\r\n        return { days: 0, hours: 0, minutes: 0 };\r\n      });\r\n    }, 60000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!user) return;    const database = getDatabase();\r\n    const notificationsRef = ref(database, `users/${user.authUser.uid}/notifications`);\r\n    const unsubscribeNotificationsDisplay = onValue(notificationsRef, (snapshot) => {\r\n      const notificationsData = [];\r\n      if (snapshot.exists()) {\r\n        snapshot.forEach((child) => {\r\n          const notification = {\r\n            id: child.key,\r\n            ...child.val(),\r\n            read: child.val().read || false\r\n          };\r\n          // Only include election-related notifications\r\n          if (notification.type === 'election' || \r\n              notification.category === 'election' ||\r\n              notification.type === 'vote_confirmation' ||\r\n              notification.type === 'election_application_status') {\r\n            notificationsData.push(notification);\r\n          }\r\n        });\r\n      }\r\n      \r\n      // Sort notifications by date, most recent first\r\n      notificationsData.sort((a, b) => {\r\n        const dateA = new Date(b.timestamp || b.createdAt || 0);\r\n        const dateB = new Date(a.timestamp || a.createdAt || 0);\r\n        return dateA - dateB;\r\n      });\r\n      \r\n      setNotifications(notificationsData);\r\n      setUnreadNotifications(notificationsData.filter(n => !n.read).length);\r\n    });\r\n\r\n    return () => unsubscribeNotificationsDisplay();\r\n  }, [user]);\r\n\r\n  const handleLogout = () => {\r\n    firebaseAuthService.logout();\r\n  };\r\n\r\n  const handleCloseCandidateForm = () => {\r\n    setIsCandidateFormOpen(false);\r\n  };\r\n\r\n  const handleVote = async (candidateId) => {\r\n    if (!user?.authUser?.uid) {\r\n      toast.error('Please log in to vote');\r\n      return;\r\n    }\r\n\r\n    if (hasVoted) {\r\n      toast.error('You have already voted in this election');\r\n      return;\r\n    }\r\n\r\n    const database = getDatabase();\r\n    const userId = user.authUser.uid;\r\n    const voteRef = ref(database, `votes/${activeElection}/${userId}`);\r\n    const userNotificationsRef = ref(database, `users/${userId}/notifications`);\r\n\r\n    try {\r\n      const voteSnapshot = await get(voteRef);\r\n      if (voteSnapshot.exists()) {\r\n        toast.error('You have already cast your vote');\r\n        return;\r\n      }\r\n\r\n      const candidate = candidates.find(c => c.id === candidateId);\r\n      const candidateName = candidate ? candidate.name : 'the selected candidate';\r\n\r\n      // Record vote\r\n      await set(voteRef, {\r\n        candidateId,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      // Create notification\r\n      await push(userNotificationsRef, {\r\n        type: 'vote_confirmation',\r\n        message: `You have successfully voted for ${candidateName}!`,\r\n        timestamp: new Date().toISOString(),\r\n        read: false\r\n      });\r\n\r\n      toast.success('Vote successfully cast!');\r\n      setHasVoted(true);\r\n    } catch (error) {\r\n      console.error('Error casting vote:', error);\r\n      toast.error('Failed to cast vote. Please try again.');\r\n    }\r\n  };\r\n\r\n  const getTrendIcon = (trend) => {\r\n    return trend === 'up' ? \r\n      <TrendingUp className=\"h-4 w-4 text-green-500\" /> : \r\n      <TrendingUp className=\"h-4 w-4 text-red-500 transform rotate-180\" />;\r\n  };\r\n\r\n  const totalVotesCast = candidates.reduce((sum, candidate) => sum + (candidate.votes || 0), 0);\r\n  const eligibleVoters = 1200;\r\n  const turnoutPercentage = eligibleVoters > 0 ? Math.round((totalVotesCast / eligibleVoters) * 100) : 0;\r\n\r\n  const electionInfo = {\r\n    period: 'Mar 1-15, 2024',\r\n    eligibleVoters: eligibleVoters,\r\n    votesCast: totalVotesCast,\r\n    turnoutPercentage: turnoutPercentage\r\n  };\r\n\r\n  const votingGuidelines = [\r\n    { id: 1, text: 'All registered students are eligible to vote once in each election', icon: <AlertCircle className=\"h-4 w-4 text-blue-600\" /> },\r\n    { id: 2, text: 'Your vote remains confidential and secure with end-to-end encryption', icon: <Shield className=\"h-4 w-4 text-green-600\" /> },\r\n    { id: 3, text: 'Results are announced immediately after the election closes', icon: <Activity className=\"h-4 w-4 text-purple-600\" /> },\r\n  ];\r\n\r\n  const electionPositions = [\r\n    { value: 'President', label: 'President' },\r\n    { value: 'Vice President', label: 'Vice President' },\r\n    { value: 'Secretary', label: 'Secretary' },\r\n    { value: 'Treasurer', label: 'Treasurer' },\r\n    { value: 'Student Representative', label: 'Student Representative' },\r\n    { value: 'Other', label: 'Other (Please specify)' },\r\n  ];\r\n\r\n  const markNotificationAsRead = async (notificationId) => {\r\n    if (!user || !notificationId) return;\r\n      try {\r\n      const database = getDatabase();\r\n      const notificationRef = ref(database, `users/${user.authUser.uid}/notifications/${notificationId}`);\r\n      await update(notificationRef, { read: true });\r\n      toast.success('Notification marked as read');\r\n    } catch (error) {\r\n      console.error('Error marking notification as read:', error);\r\n      toast.error('Could not update notification status');\r\n    }\r\n  };\r\n\r\n  const markAllNotificationsAsRead = async () => {\r\n    if (!user || notifications.length === 0) return;\r\n    \r\n    try {\r\n      const database = getDatabase();\r\n      const updates = {};      notifications.forEach(notification => {\r\n        if (!notification.read) {\r\n          updates[`users/${user.authUser.uid}/notifications/${notification.id}/read`] = true;\r\n        }\r\n      });\r\n      \r\n      if (Object.keys(updates).length > 0) {\r\n        await update(ref(database), updates);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error marking all notifications as read:', error);\r\n      toast.error('Could not update notifications');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100\">\r\n      <div className=\"relative bg-gradient-to-r from-blue-600 via-purple-600 to-blue-800 text-white overflow-hidden\">\r\n        <div className=\"absolute inset-0 bg-black opacity-10\"></div>\r\n        <div className=\"absolute -top-4 -right-4 w-96 h-96 bg-white opacity-5 rounded-full\"></div>\r\n        <div className=\"absolute -bottom-4 -left-4 w-64 h-64 bg-white opacity-5 rounded-full\"></div>\r\n        \r\n        <div className=\"relative px-8 py-16\">\r\n          <div className=\"max-w-6xl mx-auto\">\r\n            <div className=\"flex justify-between items-start md:items-center\">\r\n              <div className=\"space-y-4\">\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <div className=\"w-3 h-3 bg-green-400 rounded-full animate-pulse\"></div>\r\n                  <span className=\"text-sm font-medium bg-white bg-opacity-20 px-3 py-1 rounded-full\">\r\n                    Live Results\r\n                  </span>\r\n                </div>\r\n                <h1 className=\"text-5xl font-bold bg-gradient-to-r from-white to-blue-100 bg-clip-text text-transparent\">\r\n                  Student Elections 2024\r\n                </h1>\r\n                <p className=\"text-blue-100 text-xl font-medium\">Your voice shapes our future</p>\r\n                <div className=\"flex items-center space-x-6 text-sm\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Activity className=\"h-4 w-4\" />\r\n                    <span>Real-time updates</span>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Shield className=\"h-4 w-4\" />\r\n                    <span>Secure voting</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"text-right space-y-4 flex flex-col items-end\">\r\n                <div className=\"bg-white bg-opacity-15 backdrop-blur-sm rounded-2xl p-6\">\r\n                  <div className=\"text-4xl font-bold\">{electionInfo.turnoutPercentage}%</div>\r\n                  <div className=\"text-blue-100 text-sm font-medium\">Voter Turnout</div>\r\n                  <div className=\"w-full bg-white bg-opacity-20 rounded-full h-2 mt-3\">\r\n                    <div className=\"bg-gradient-to-r from-green-400 to-green-500 h-2 rounded-full\" style={{ width: `${electionInfo.turnoutPercentage}%` }}></div>\r\n                  </div>\r\n                </div>\r\n                {/* Fixed: Always show button for demo, remove conditional rendering */}\r\n                <button \r\n                  className=\"bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-xl font-semibold transition-all duration-200 flex items-center space-x-2 shadow-lg\"\r\n                  onClick={() => setIsCandidateFormOpen(true)}\r\n                >\r\n                  <Plus className=\"h-5 w-5\" />\r\n                  <span>Apply to be a Candidate</span>\r\n                  <ChevronRight className=\"h-5 w-5\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"px-8 py-12\">\r\n        <div className=\"max-w-6xl mx-auto\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12 -mt-8\">\r\n            <div className=\"bg-white rounded-2xl p-6 shadow-xl border border-gray-100 hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <div className=\"p-3 rounded-xl bg-gradient-to-r from-green-100 to-emerald-100\">\r\n                  <Clock className=\"h-7 w-7 text-green-600\" />\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <p className=\"text-sm text-gray-500 font-medium mb-1\">Time Remaining</p>\r\n                <div className=\"flex items-baseline space-x-1\">\r\n                  <span className=\"text-3xl font-bold text-gray-900\">{timeRemaining.days}</span>\r\n                  <span className=\"text-sm text-gray-600\">d</span>\r\n                  <span className=\"text-2xl font-bold text-gray-700\">{timeRemaining.hours}</span>\r\n                  <span className=\"text-sm text-gray-600\">h</span>\r\n                  <span className=\"text-xl font-bold text-gray-600\">{timeRemaining.minutes}</span>\r\n                  <span className=\"text-sm text-gray-600\">m</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"bg-white rounded-2xl p-6 shadow-xl border border-gray-100 hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <div className=\"p-3 rounded-xl bg-gradient-to-r from-blue-100 to-cyan-100\">\r\n                  <Users className=\"h-7 w-7 text-blue-600\" />\r\n                </div>\r\n                <TrendingUp className=\"h-5 w-5 text-green-500\" />\r\n              </div>\r\n              <div>\r\n                <p className=\"text-sm text-gray-500 font-medium mb-1\">Total Votes</p>\r\n                <p className=\"text-3xl font-bold text-gray-900\">{electionInfo.votesCast.toLocaleString()}</p>\r\n                <p className=\"text-sm text-green-600 font-medium\">+23 in last hour</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"bg-white rounded-2xl p-6 shadow-xl border border-gray-100 hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <div className=\"p-3 rounded-xl bg-gradient-to-r from-purple-100 to-violet-100\">\r\n                  <BarChart2 className=\"h-7 w-7 text-purple-600\" />\r\n                </div>\r\n                <Medal className=\"h-5 w-5 text-purple-500\" />\r\n              </div>\r\n              <div>\r\n                <p className=\"text-sm text-gray-500 font-medium mb-1\">Candidates</p>\r\n                <p className=\"text-3xl font-bold text-gray-900\">{candidates.length}</p>\r\n                <p className=\"text-sm text-purple-600 font-medium\">Presidential race</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"bg-white rounded-2xl p-6 shadow-xl border border-gray-100 hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <div className=\"p-3 rounded-xl bg-gradient-to-r from-yellow-100 to-orange-100\">\r\n                  <Trophy className=\"h-7 w-7 text-yellow-600\" />\r\n                </div>\r\n                <div className=\"flex items-center space-x-1\">\r\n                  <div className=\"w-2 h-2 bg-yellow-500 rounded-full animate-pulse\"></div>\r\n                  <span className=\"text-xs text-yellow-600 font-bold\">LIVE</span>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <p className=\"text-sm text-gray-500 font-medium mb-1\">Current Leader</p>\r\n                <p className=\"text-lg font-bold text-gray-900\">{candidates.length > 0 ? candidates[0].name : 'N/A'}</p>\r\n                <p className=\"text-sm text-yellow-600 font-medium\">{candidates.length > 0 ? `${candidates[0].percentage}% support` : 'N/A'}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-12 gap-8\">\r\n            <div className=\"col-span-12 lg:col-span-8\">\r\n              <div className=\"bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden\">\r\n                <div className=\"p-6 border-b border-gray-100 bg-gradient-to-r from-blue-50 to-purple-50\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"flex items-center space-x-3\">\r\n                      <div className=\"p-2 rounded-lg bg-blue-100\">\r\n                        <Vote className=\"h-6 w-6 text-blue-600\" />\r\n                      </div>\r\n                      <h2 className=\"text-2xl font-bold text-gray-900\">Presidential Candidates</h2>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-3\">\r\n                      <div className=\"flex items-center space-x-2 bg-green-100 px-3 py-1 rounded-full\">\r\n                        {hasVoted ? (\r\n                          <div className=\"flex items-center space-x-2 bg-green-100 px-3 py-1 rounded-full\">\r\n                            <CheckCircle className=\"h-4 w-4 text-green-700\" />\r\n                            <span className=\"text-sm text-green-700 font-semibold\">Vote Cast</span>\r\n                          </div>\r\n                        ) : (\r\n                          <div className=\"flex items-center space-x-2 bg-green-100 px-3 py-1 rounded-full\">\r\n                            <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n                            <span className=\"text-sm text-green-700 font-semibold\">Voting Active</span>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"p-6\">\r\n                  {isLoadingCandidates ? (\r\n                     <div className=\"p-8 text-center\">\r\n                       <Loader2 className=\"h-12 w-12 animate-spin text-blue-600 mx-auto\" />\r\n                       <p className=\"mt-4 text-lg text-gray-600\">Loading candidates...</p>\r\n                     </div>\r\n                  ) : candidates.length > 0 ? (\r\n                    <div className=\"space-y-8\">\r\n                      {candidates.map((candidate, index) => (\r\n                        <div key={candidate.id} className=\"group relative border border-gray-100 rounded-2xl p-6 hover:border-blue-200 hover:bg-blue-50 transition-all duration-300\">\r\n                          <div className=\"absolute -top-3 -left-3 z-10\">\r\n                            <div className={`w-12 h-12 rounded-full flex items-center justify-center text-white font-bold text-lg shadow-lg ${\r\n                              index === 0 ? 'bg-gradient-to-r from-yellow-400 to-yellow-600' :\r\n                              index === 1 ? 'bg-gradient-to-r from-gray-400 to-gray-600' :\r\n                              'bg-gradient-to-r from-orange-400 to-orange-600'\r\n                            }`}>\r\n                              {index + 1}\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"flex items-start space-x-6\">\r\n                            <div className=\"relative\">\r\n                              <img\r\n                                src={candidate.image || `/api/placeholder/150/150?text=${candidate.name.split(' ')[0][0]}${candidate.name.split(' ')[1][0]}`}\r\n                                alt={candidate.name}\r\n                                className=\"w-28 h-28 rounded-2xl object-cover shadow-lg group-hover:scale-105 transition-transform duration-300\"\r\n                              />\r\n                              <div className=\"absolute bottom-2 right-2 bg-white rounded-full p-1 shadow-lg\">\r\n                                {getTrendIcon(candidate.trending)}\r\n                              </div>\r\n                            </div>\r\n                            \r\n                            <div className=\"flex-1\">\r\n                            <div className=\"flex items-start justify-between mb-4\">\r\n                              <div className=\"space-y-2 flex-1\">\r\n                                <div className=\"flex items-center space-x-3\">\r\n                                  <h3 className=\"text-xl font-bold text-gray-900\">{candidate.name}</h3>\r\n                                  {index === 0 && (\r\n                                    <div className=\"flex items-center bg-yellow-100 px-2 py-1 rounded-full\">\r\n                                      <Trophy className=\"h-3 w-3 text-yellow-600 mr-1\" />\r\n                                      <span className=\"text-xs font-bold text-yellow-700\">LEADING</span>\r\n                                    </div>\r\n                                  )}\r\n                                </div>\r\n                                <p className=\"text-gray-600 font-medium\">\r\n                                  {candidate.position} • {candidate.year} • {candidate.department}\r\n                                </p>\r\n                                <div className=\"flex items-center space-x-4\">\r\n                                  {candidate.experience && (\r\n                                    <div className=\"flex items-center bg-blue-50 px-2 py-1 rounded-lg\">\r\n                                      <Star className=\"h-3 w-3 text-blue-500 mr-1\" />\r\n                                      <span className=\"text-xs text-blue-700 font-medium\">{candidate.experience}</span>\r\n                                    </div>\r\n                                  )}\r\n                                  {candidate.achievements && candidate.achievements.length > 0 && (\r\n                                    <div className=\"flex space-x-2\">\r\n                                      {candidate.achievements.map((achievement, idx) => (\r\n                                        <span key={idx} className=\"text-xs bg-purple-100 text-purple-700 px-2 py-1 rounded-lg font-medium\">\r\n                                          {achievement}\r\n                                        </span>\r\n                                      ))}\r\n                                    </div>\r\n                                  )}\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"ml-6 flex-shrink-0\">\r\n                                <Button\r\n                                  className={`${\r\n                                    hasVoted && candidate.id === rawVotes[user?.authUser?.uid]?.candidateId\r\n                                      ? 'bg-green-600 hover:bg-green-700'\r\n                                      : 'bg-blue-600 hover:bg-blue-700'\r\n                                  } text-white px-6 py-3 rounded-xl font-semibold transition-all duration-200 flex items-center space-x-2 shadow-lg min-w-[120px]`}\r\n                                  onClick={() => handleVote(candidate.id)}\r\n                                  disabled={!user?.authUser?.uid || hasVoted}\r\n                                >\r\n                                  <div className=\"flex items-center space-x-2\">\r\n                                    {hasVoted ? (\r\n                                      candidate.id === rawVotes[user?.authUser?.uid]?.candidateId ? (\r\n                                        <>\r\n                                          <CheckCircle className=\"h-5 w-5\" />\r\n                                          <span>Voted</span>\r\n                                        </>\r\n                                      ) : (\r\n                                        <>\r\n                                          <Vote className=\"h-5 w-5\" />\r\n                                          <span>Already Voted</span>\r\n                                        </>\r\n                                      )\r\n                                    ) : (\r\n                                      <>\r\n                                        <Vote className=\"h-5 w-5\" />\r\n                                        <span>Vote Now</span>\r\n                                      </>\r\n                                    )}\r\n                                  </div>\r\n                                </Button>\r\n                              </div>\r\n                            </div>\r\n                              \r\n                              <p className=\"text-gray-700 mb-6 line-clamp-3 leading-relaxed\">{candidate.manifesto}</p>\r\n                              \r\n                              <div className=\"space-y-3\">\r\n                                <div className=\"flex items-center justify-between\">\r\n                                  <span className=\"text-sm text-gray-600 font-medium\">Current Support</span>\r\n                                  <div className=\"flex items-center space-x-2\">\r\n                                    {getTrendIcon(candidate.trending)}\r\n                                    <span className=\"font-bold text-gray-900 text-lg\">\r\n                                      {(candidate.votes || 0).toLocaleString()} votes ({candidate.percentage || 0}%)\r\n                                    </span>\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"relative w-full bg-gray-200 rounded-full h-3 overflow-hidden\">\r\n                                  <div\r\n                                    className={`h-3 rounded-full transition-all duration-1000 ease-out ${\r\n                                      index === 0 ? 'bg-gradient-to-r from-blue-500 to-blue-600' :\r\n                                      index === 1 ? 'bg-gradient-to-r from-green-500 to-green-600' :\r\n                                      'bg-gradient-to-r from-purple-500 to-purple-600'\r\n                                    }`}\r\n                                    style={{ width: `${candidate.percentage || 0}%` }}\r\n                                  />\r\n                                  <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent opacity-30 transform -skew-x-12 animate-pulse\"></div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  ) : (\r\n                     <div className=\"p-8 text-center text-gray-500\">\r\n                       <Users className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\r\n                       <p className=\"font-medium text-lg\">No Candidates Approved Yet</p>\r\n                       <p className=\"text-sm\">Check back later to see the list of approved candidates for this election.</p>\r\n                     </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-span-12 lg:col-span-4 space-y-6\">\r\n              <div className=\"bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden\">\r\n                <div className=\"p-4 border-b border-gray-100 bg-gradient-to-r from-green-50 to-emerald-50\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <div className=\"p-2 rounded-lg bg-green-100\">\r\n                        <BarChart2 className=\"h-5 w-5 text-green-600\" />\r\n                      </div>\r\n                      <h3 className=\"text-lg font-bold text-gray-900\">Live Results</h3>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-1 bg-green-100 px-2 py-1 rounded-full\">\r\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n                      <span className=\"text-xs text-green-700 font-bold\">LIVE</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {isLoadingCandidates ? (\r\n                   <div className=\"p-4 text-center\">\r\n                     <Loader2 className=\"h-8 w-8 animate-spin text-blue-600 mx-auto\" />\r\n                     <p className=\"mt-2 text-gray-600\">Loading results...</p>\r\n                   </div>\r\n                ) : candidates.length > 0 ? (\r\n                  <div className=\"p-4\">\r\n                    <div className=\"space-y-4\">\r\n                      {candidates.map((candidate, index) => (\r\n                        <div key={candidate.id} className=\"flex items-center group hover:bg-gray-50 p-2 rounded-xl transition-colors\">\r\n                          <div className={`w-10 h-10 rounded-full flex items-center justify-center text-white text-sm font-bold shadow-lg ${\r\n                            index === 0 ? 'bg-gradient-to-r from-blue-500 to-blue-600' :\r\n                            index === 1 ? 'bg-gradient-to-r from-green-500 to-green-600' :\r\n                            'bg-gradient-to-r from-purple-500 to-purple-600'\r\n                          }`}>\r\n                            {index + 1}\r\n                          </div>\r\n                          <div className=\"ml-3 flex-1\">\r\n                            <div className=\"flex items-center justify-between mb-1\">\r\n                              <p className=\"text-sm font-bold text-gray-900\">{candidate.name}</p>\r\n                              <div className=\"flex items-center space-x-1\">\r\n                                {getTrendIcon(candidate.trending)}\r\n                                <span className=\"text-sm font-bold text-gray-900\">{candidate.percentage || 0}%</span>\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"relative w-full bg-gray-200 rounded-full h-2\">\r\n                              <div\r\n                                className={`h-2 rounded-full transition-all duration-1000 ${\r\n                                  index === 0 ? 'bg-gradient-to-r from-blue-500 to-blue-600' :\r\n                                  index === 1 ? 'bg-gradient-to-r from-green-500 to-green-600' :\r\n                                  'bg-gradient-to-r from-purple-500 to-purple-600'\r\n                                }`}\r\n                                style={{ width: `${candidate.percentage || 0}%` }}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                   <div className=\"p-4 text-center text-gray-500\">\r\n                      <BarChart2 className=\"h-10 w-10 mx-auto mb-2 text-gray-400\" />\r\n                      <p className=\"text-sm\">Live results will appear here once candidates are approved.</p>\r\n                   </div>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden\">\r\n                <div className=\"p-4 border-b border-gray-100 bg-gradient-to-r from-blue-50 to-indigo-50\">\r\n                  <h3 className=\"text-lg font-bold text-gray-900\">Election Information</h3>\r\n                </div>\r\n                <div className=\"p-4\">\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-xl\">\r\n                      <div className=\"flex items-center space-x-3\">\r\n                        <div className=\"p-2 rounded-lg bg-blue-100\">\r\n                          <Calendar className=\"h-4 w-4 text-blue-600\" />\r\n                        </div>\r\n                        <span className=\"text-sm font-medium text-gray-700\">Election Period</span>\r\n                      </div>\r\n                      <span className=\"text-sm font-bold text-gray-900\">{electionInfo.period}</span>\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-xl\">\r\n                      <div className=\"flex items-center space-x-3\">\r\n                        <div className=\"p-2 rounded-lg bg-green-100\">\r\n                          <Users className=\"h-4 w-4 text-green-600\" />\r\n                        </div>\r\n                        <span className=\"text-sm font-medium text-gray-700\">Eligible Voters</span>\r\n                      </div>\r\n                      <span className=\"text-sm font-bold text-gray-900\">{electionInfo.eligibleVoters.toLocaleString()}</span>\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-xl\">\r\n                      <div className=\"flex items-center space-x-3\">\r\n                        <div className=\"p-2 rounded-lg bg-purple-100\">\r\n                          <Vote className=\"h-4 w-4 text-purple-600\" />\r\n                        </div>\r\n                        <span className=\"text-sm font-medium text-gray-700\">Votes Cast</span>\r\n                      </div>\r\n                      <span className=\"text-sm font-bold text-gray-900\">{electionInfo.votesCast.toLocaleString()}</span>\r\n                    </div>\r\n                    <div className=\"p-3 bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl border border-blue-100\">\r\n                      <div className=\"flex items-center justify-between mb-2\">\r\n                        <span className=\"text-sm font-medium text-gray-700\">Turnout Progress</span>\r\n                        <span className=\"text-sm font-bold text-blue-700\">{electionInfo.turnoutPercentage}%</span>\r\n                      </div>\r\n                      <div className=\"w-full bg-white rounded-full h-2\">\r\n                        <div className=\"bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full\" style={{ width: `${electionInfo.turnoutPercentage}%` }}></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden\">\r\n                <div className=\"p-4 border-b border-gray-100 bg-gradient-to-r from-yellow-50 to-orange-50\">\r\n                  <h3 className=\"text-lg font-bold text-gray-900 flex items-center\">\r\n                    <Bell className=\"h-5 w-5 mr-2 text-yellow-600\"/>\r\n                    Your Notifications\r\n                    {notifications.filter(n => !n.read).length > 0 && (\r\n                      <span className=\"ml-2 bg-red-500 text-white text-xs font-bold px-2 py-0.5 rounded-full\">\r\n                        {notifications.filter(n => !n.read).length}\r\n                      </span>\r\n                    )}\r\n                  </h3>\r\n                </div>\r\n                {isLoadingNotifications ? (\r\n                   <div className=\"p-4 text-center\">\r\n                     <Loader2 className=\"h-8 w-8 animate-spin text-blue-600 mx-auto\" />\r\n                     <p className=\"mt-2 text-gray-600\">Loading notifications...</p>\r\n                   </div>\r\n                ) : notifications.length > 0 ? (\r\n                  <div className=\"p-4 space-y-3\">\r\n                    {notifications.map(notification => (\r\n                      <div \r\n                        key={notification.id} \r\n                        className={`p-3 rounded-xl border ${\r\n                          notification.type === 'vote_confirmation' ? 'bg-green-50 border-green-100' :\r\n                          notification.type === 'election_application_status' && notification.status === 'approved' ? 'bg-blue-50 border-blue-100' :\r\n                          notification.type === 'election_application_status' && notification.status === 'rejected' ? 'bg-red-50 border-red-100' :\r\n                          'bg-gray-50 border-gray-100'\r\n                        }`}\r\n                      >\r\n                        <div className=\"flex items-center\">\r\n                          {notification.type === 'vote_confirmation' && <CheckCircle className=\"h-5 w-5 mr-2 text-green-600\"/>}\r\n                          {notification.type === 'election_application_status' && notification.status === 'approved' && \r\n                            <CheckCircle className=\"h-5 w-5 mr-2 text-blue-600\"/>}\r\n                          {notification.type === 'election_application_status' && notification.status === 'rejected' && \r\n                            <AlertCircle className=\"h-5 w-5 mr-2 text-red-600\"/>}\r\n                          <p className=\"text-sm font-medium text-gray-800 flex-1\">{notification.message}</p>\r\n                          {!notification.read && (\r\n                            <span className=\"ml-2 w-2 h-2 bg-blue-500 rounded-full\"></span>\r\n                          )}\r\n                        </div>\r\n                        <p className=\"text-xs text-gray-500 mt-1\">\r\n                          {new Date(notification.timestamp).toLocaleString()}\r\n                        </p>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                ) : (\r\n                   <div className=\"p-4 text-center text-gray-500\">\r\n                      <Bell className=\"h-10 w-10 mx-auto mb-2 text-gray-400\" />\r\n                      <p className=\"text-sm\">You have no notifications.</p>\r\n                   </div>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden\">\r\n                <div className=\"p-4 border-b border-gray-100 bg-gradient-to-r from-purple-50 to-pink-50\">\r\n                  <h3 className=\"text-lg font-bold text-gray-900\">Voting Guidelines</h3>\r\n                </div>\r\n                <div className=\"p-4\">\r\n                  <div className=\"space-y-4\">\r\n                    {votingGuidelines.map((item) => (\r\n                      <div key={item.id} className=\"flex items-start space-x-3 p-3 bg-blue-50 rounded-xl border border-blue-100\">\r\n                        <div className=\"flex-shrink-0 p-1 rounded-full bg-blue-100\">\r\n                          {item.icon}\r\n                        </div>\r\n                        <p className=\"text-sm text-gray-700 font-medium flex-1\">\r\n                          {item.text}\r\n                        </p>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {isCandidateFormOpen && (\r\n        <div\r\n          className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\"\r\n          style={{\r\n            position: 'fixed',\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n            zIndex: 50,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            padding: '1rem',\r\n          }}\r\n        >\r\n          <div className=\"bg-white rounded-lg w-full max-w-4xl max-h-[90vh] overflow-y-auto relative\">\r\n            <CandidateApplicationForm onClose={handleCloseCandidateForm} electionPositions={electionPositions} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ElectionDashboard;"
        }
    ]
}