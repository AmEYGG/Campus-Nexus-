{
    "sourceFile": "src/services/appwriteAuth.service.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1747814398480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747814844591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,257 @@\n+import { ID, Query, Permission, Role } from 'appwrite';\r\n+import { account, databases, client } from '../config/appwrite.config';\r\n+\r\n+// --- Configuration ---\r\n+const DATABASE_ID = '682cc58b003717b8f2b8'; // <-- Replace with your actual database ID (e.g. 'campus_nexus_db')\r\n+const USER_PROFILES_COLLECTION_ID = '682cc598002c2ae4ffc8'; // Use the provided users collection ID\r\n+\r\n+class AppwriteAuthService {\r\n+    async register(userData) {\r\n+        const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n+\r\n+        try {\r\n+            // Create the user account in Appwrite Auth\r\n+            // In the browser SDK, create takes ID.unique() or 'unique()' string, email, password, name\r\n+            const user = await account.create(\r\n+                ID.unique(), // Use ID.unique() or 'unique()'\r\n+                email,\r\n+                password,\r\n+                `${firstName} ${lastName}` // Name (optional)\r\n+            );\r\n+\r\n+            console.log('Appwrite Auth user created:', user);            // Create a session for the new user\r\n+            const session = await account.createSession(email, password);\r\n+            \r\n+            // The session is automatically handled by the Appwrite SDK\r\n+            // No need to manually set the session            // Create User Profile Document in the users collection (now authorized)\r\n+            // Generate a valid userId that meets Appwrite requirements\r\n+            const validUserId = `user_${user.$id.replace(/[^a-zA-Z0-9_-]/g, '_')}`.substring(0, 36);\r\n+            \r\n+            const profileDocument = await databases.createDocument(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                validUserId, // Use the formatted valid userId\r\n+                {\r\n+                    user_id: user.$id, // Link profile to auth user\r\n+                    firstname: firstName,\r\n+                    lastname: lastName,\r\n+                    role: role,\r\n+                    studentID: studentId || null,\r\n+                    department: department || null,\r\n+                    email: email\r\n+                },\r\n+                [\r\n+                    Permission.read(Role.user(user.$id)),\r\n+                    Permission.write(Role.user(user.$id))\r\n+                ]\r\n+            );\r\n+\r\n+            console.log('User profile document created in Appwrite DB:', profileDocument);\r\n+\r\n+            return { authUser: user, userProfile: profileDocument };\r\n+\r\n+        } catch (error) {\r\n+            console.error('Appwrite Registration error:', error);\r\n+            if (error.code === 409) {\r\n+                 throw new Error('A user with this email already exists.');\r\n+            } else if (error.code === 400) {\r\n+                 // Appwrite gives specific messages for password/email format errors\r\n+                 throw new Error(`Registration failed: ${error.message || 'Invalid input.'}`);\r\n+            }\r\n+            // Handle other errors like network issues\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async login(email, password) {\r\n+        try {\r\n+            // Appwrite Auth Login (Create Session)\r\n+            // In the browser SDK, createEmailSession logs the user in and sets the session automatically.\r\n+            const session = await account.createEmailSession(email, password);\r\n+            console.log('User logged in successfully (Session created):', session);\r\n+\r\n+            // Get the User Account Details\r\n+            // account.get() fetches the currently logged-in user based on the active session.\r\n+            const user = await account.get();\r\n+            console.log('Current Appwrite Auth user fetched:', user);\r\n+\r\n+            if (!user) {\r\n+                 // This should rarely happen after a successful createEmailSession, but included for robustness.\r\n+                 await this.logout(); // Ensure logout if user data is missing\r\n+                 throw new Error('Login failed: Authentication successful, but user data could not be retrieved.');\r\n+            }\r\n+\r\n+            // Fetch the User's Profile from 'users' collection\r\n+            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n+            const profileResponse = await databases.listDocuments(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                [\r\n+                    // Query to find the profile where user_id equals the logged-in user's ID\r\n+                    Query.equal('user_id', user.$id),\r\n+                    // Optionally, limit to 1 result if you expect only one profile per user\r\n+                    Query.limit(1)\r\n+                ]\r\n+            );\r\n+\r\n+            const profileDocuments = profileResponse.documents;\r\n+            console.log('User profile documents fetched from Appwrite DB:', profileDocuments);\r\n+\r\n+            if (profileDocuments.length === 0) {\r\n+                 console.error('User profile document not found in Appwrite DB for user ID:', user.$id);\r\n+                 // If profile is not found, it might indicate an incomplete registration.\r\n+                 // Decide how to handle this - maybe log out or return partial data.\r\n+                 // For now, we'll log out and inform the user.\r\n+                 await this.logout();\r\n+                 throw new Error('Login failed: User profile missing. Please try registering again or contact support.');\r\n+            }\r\n+\r\n+            // Assuming one profile per user, take the first document\r\n+            const userProfile = profileDocuments[0];\r\n+\r\n+            // Return session, auth user data, and profile data\r\n+            // Note: Appwrite session handling might differ slightly from Supabase.\r\n+            // You might need to store the session token (session.providerAccessToken) in your app's state management.\r\n+            // However, createEmailSession in browser SDK usually handles session setting automatically.\r\n+            return { session: session, authUser: user, userProfile: userProfile };\r\n+\r\n+        } catch (error) {\r\n+            console.error('Appwrite Login error:', error);\r\n+            // Ensure logout on login failure\r\n+            try { await this.logout(); } catch (e) { /* ignore logout errors during login failure */ }\r\n+            // Handle specific Appwrite errors if needed (e.g., 401 for invalid credentials)\r\n+            if (error.code === 401) {\r\n+                 throw new Error('Invalid email or password.');\r\n+            }\r\n+            // Rethrow other errors\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async logout() {\r\n+        try {\r\n+            // Appwrite Auth Logout (Delete Current Session)\r\n+            // In the browser SDK, deleteSession('current') or deleteSession(sessionId)\r\n+            const result = await account.deleteSession('current'); // Deletes the 'current' active session\r\n+            console.log('User logged out successfully (Session deleted).');\r\n+            // You should also clear any stored session tokens on the client side (e.g., in localStorage, state management) if you were manually managing them.\r\n+            // Appwrite browser SDK handles session cookies/local storage automatically usually.\r\n+        } catch (error) {\r\n+            // Ignore errors if the user is already logged out or the session is invalid (e.g., 401)\r\n+            if (error.code === 401) {\r\n+                 console.log('Logout called, but no active session found (already logged out?).');\r\n+                 return;\r\n+            }\r\n+            console.error('Appwrite Logout error (non-401):', error);\r\n+            // Optionally rethrow if you want to handle other logout errors\r\n+            // throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async getCurrentUser() {\r\n+        try {\r\n+            // Get the Current Appwrite Auth User\r\n+            // account.get() checks for an active session and returns the user or throws 401.\r\n+            const user = await account.get();\r\n+            console.log('Current Appwrite Auth user fetched in getCurrentUser:', user);\r\n+\r\n+            if (!user) {\r\n+                return null; // No logged-in user or session expired/invalid\r\n+            }\r\n+\r\n+            // Fetch the User's Profile from 'users' collection\r\n+            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n+            const profileResponse = await databases.listDocuments(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                [Query.equal('user_id', user.$id)]\r\n+            );\r\n+\r\n+            const profileDocuments = profileResponse.documents;\r\n+            console.log('User profile documents fetched from Appwrite DB in getCurrentUser:', profileDocuments);\r\n+\r\n+            // Similar logic to login - handle missing profile\r\n+            if (profileDocuments.length === 0) {\r\n+                 console.warn('User profile document not found in Appwrite DB for logged-in user ID:', user.$id);\r\n+                 // Decide how to handle missing profile (e.g., log out, return partial data)\r\n+                 // For now, log out to ensure consistent state.\r\n+                 await this.logout(); // Logs out the user if their profile is somehow missing.\r\n+                 // Clear any local session storage if needed\r\n+                 // localStorage.removeItem('appwrite_session'); // Example\r\n+                 console.warn('Logged out due to missing profile in getCurrentUser.');\r\n+                 return null;\r\n+            }\r\n+\r\n+            const userProfile = profileDocuments[0]; // Get the first (and hopefully only) profile\r\n+\r\n+            // Return auth user data and profile data\r\n+            return { authUser: user, userProfile: userProfile };\r\n+\r\n+        } catch (error) {\r\n+            // Ignore 401 (Unauthorized) errors, as they likely mean the user is simply not logged in\r\n+            if (error.code === 401) {\r\n+                 console.log('getCurrentUser called, but no active session found (not logged in).');\r\n+                 return null;\r\n+            }\r\n+            console.error('Appwrite getCurrentUser error (non-401):', error);\r\n+            // Handle other potential errors (e.g., network issues) - maybe return null or partial data\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    // --- Placeholder for Profile Update (Implement as needed) ---\r\n+    // async updateUserProfile(userId, dataToUpdate) {\r\n+    //     try {\r\n+    //         // 1. Find the profile document ID for the given userId (user_id)\r\n+    //         const profileResponse = await databases.listDocuments(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             [Query.equal('user_id', userId)]\r\n+    //         );\r\n+    //         const profileDoc = profileResponse.documents[0];\r\n+    //         if (!profileDoc) throw new Error('Profile not found for update.');\r\n+    //\r\n+    //         // 2. Update the document\r\n+    //         const updatedDoc = await databases.updateDocument(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             profileDoc.$id, // Use the document's unique ID\r\n+    //             dataToUpdate // Ensure dataToUpdate matches your collection's attributes\r\n+    //         );\r\n+    //         console.log('User profile updated in Appwrite DB:', updatedDoc);\r\n+    //         return updatedDoc;\r\n+    //     } catch (error) {\r\n+    //         console.error('Appwrite updateUserProfile error:', error);\r\n+    //         throw error;\r\n+    //     }\r\n+    // }\r\n+\r\n+\r\n+    // --- Placeholder for Fetching Profile (Implement if needed elsewhere) ---\r\n+    // async getUserProfileFromDB(userId) {\r\n+    //     try {\r\n+    //         const profileResponse = await databases.listDocuments(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             [Query.equal('user_id', userId)]\r\n+    //         );\r\n+    //         const profileDoc = profileResponse.documents[0];\r\n+    //         if (!profileDoc) {\r\n+    //              console.warn('User profile not found in Appwrite DB for user ID:', userId);\r\n+    //              return null;\r\n+    //         }\r\n+    //         console.log('User profile fetched from Appwrite DB (getUserProfileFromDB):', profileDoc);\r\n+    //         return profileDoc;\r\n+    //     } catch (error) {\r\n+    //          console.error('Appwrite getUserProfileFromDB error:', error);\r\n+    //          throw error;\r\n+    //     }\r\n+    // }\r\n+}\r\n+\r\n+export const appwriteAuthService = new AppwriteAuthService();\r\n+export default appwriteAuthService; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747814914548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n             console.log('Appwrite Auth user created:', user);            // Create a session for the new user\r\n             const session = await account.createSession(email, password);\r\n             \r\n             // The session is automatically handled by the Appwrite SDK\r\n-            // No need to manually set the session            // Create User Profile Document in the users collection (now authorized)\r\n+Registration failed: Registration failed: Invalid `userId` param: Parameter must contain at most 36 chars. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char            // No need to manually set the session            // Create User Profile Document in the users collection (now authorized)\r\n             // Generate a valid userId that meets Appwrite requirements\r\n             const validUserId = `user_${user.$id.replace(/[^a-zA-Z0-9_-]/g, '_')}`.substring(0, 36);\r\n             \r\n             const profileDocument = await databases.createDocument(\r\n@@ -253,261 +253,5 @@\n     // }\r\n }\r\n \r\n export const appwriteAuthService = new AppwriteAuthService();\r\n-export default appwriteAuthService; \n-import { ID, Query, Permission, Role } from 'appwrite';\r\n-import { account, databases, client } from '../config/appwrite.config';\r\n-\r\n-// --- Configuration ---\r\n-const DATABASE_ID = '682cc58b003717b8f2b8'; // <-- Replace with your actual database ID (e.g. 'campus_nexus_db')\r\n-const USER_PROFILES_COLLECTION_ID = '682cc598002c2ae4ffc8'; // Use the provided users collection ID\r\n-\r\n-class AppwriteAuthService {\r\n-    async register(userData) {\r\n-        const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n-\r\n-        try {\r\n-            // Create the user account in Appwrite Auth\r\n-            // In the browser SDK, create takes ID.unique() or 'unique()' string, email, password, name\r\n-            const user = await account.create(\r\n-                ID.unique(), // Use ID.unique() or 'unique()'\r\n-                email,\r\n-                password,\r\n-                `${firstName} ${lastName}` // Name (optional)\r\n-            );\r\n-\r\n-            console.log('Appwrite Auth user created:', user);            // Create a session for the new user\r\n-            const session = await account.createSession(email, password);\r\n-            \r\n-            // The session is automatically handled by the Appwrite SDK\r\n-            // No need to manually set the session\r\n-\r\n-            // Create User Profile Document in the users collection (now authorized)\r\n-            // In the browser SDK, createDocument takes databaseId, collectionId, documentId, data, permissions (optional)\r\n-            const profileDocument = await databases.createDocument(\r\n-                DATABASE_ID,\r\n-                USER_PROFILES_COLLECTION_ID,\r\n-                ID.unique(), // Use ID.unique() or 'unique()' for document ID\r\n-                {\r\n-                    user_id: user.$id, // Link profile to auth user\r\n-                    firstname: firstName, // Match Appwrite attribute name\r\n-                    lastname: lastName,   // Match Appwrite attribute name\r\n-                    role: role, // You might enforce 'student' here or via Appwrite rules\r\n-                    studentID: studentId || null, // Match Appwrite attribute name\r\n-                    department: department || null,\r\n-                    email: email,\r\n-                    // Add any other fields your profile requires\r\n-                },\r\n-                // Optional: Set document-level permissions\r\n-                // [Permission.read(Role.user(user.$id)), Permission.write(Role.user(user.$id))]\r\n-            );\r\n-\r\n-            console.log('User profile document created in Appwrite DB:', profileDocument);\r\n-\r\n-            return { authUser: user, userProfile: profileDocument };\r\n-\r\n-        } catch (error) {\r\n-            console.error('Appwrite Registration error:', error);\r\n-            if (error.code === 409) {\r\n-                 throw new Error('A user with this email already exists.');\r\n-            } else if (error.code === 400) {\r\n-                 // Appwrite gives specific messages for password/email format errors\r\n-                 throw new Error(`Registration failed: ${error.message || 'Invalid input.'}`);\r\n-            }\r\n-            // Handle other errors like network issues\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async login(email, password) {\r\n-        try {\r\n-            // Appwrite Auth Login (Create Session)\r\n-            // In the browser SDK, createEmailSession logs the user in and sets the session automatically.\r\n-            const session = await account.createEmailSession(email, password);\r\n-            console.log('User logged in successfully (Session created):', session);\r\n-\r\n-            // Get the User Account Details\r\n-            // account.get() fetches the currently logged-in user based on the active session.\r\n-            const user = await account.get();\r\n-            console.log('Current Appwrite Auth user fetched:', user);\r\n-\r\n-            if (!user) {\r\n-                 // This should rarely happen after a successful createEmailSession, but included for robustness.\r\n-                 await this.logout(); // Ensure logout if user data is missing\r\n-                 throw new Error('Login failed: Authentication successful, but user data could not be retrieved.');\r\n-            }\r\n-\r\n-            // Fetch the User's Profile from 'users' collection\r\n-            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n-            const profileResponse = await databases.listDocuments(\r\n-                DATABASE_ID,\r\n-                USER_PROFILES_COLLECTION_ID,\r\n-                [\r\n-                    // Query to find the profile where user_id equals the logged-in user's ID\r\n-                    Query.equal('user_id', user.$id),\r\n-                    // Optionally, limit to 1 result if you expect only one profile per user\r\n-                    Query.limit(1)\r\n-                ]\r\n-            );\r\n-\r\n-            const profileDocuments = profileResponse.documents;\r\n-            console.log('User profile documents fetched from Appwrite DB:', profileDocuments);\r\n-\r\n-            if (profileDocuments.length === 0) {\r\n-                 console.error('User profile document not found in Appwrite DB for user ID:', user.$id);\r\n-                 // If profile is not found, it might indicate an incomplete registration.\r\n-                 // Decide how to handle this - maybe log out or return partial data.\r\n-                 // For now, we'll log out and inform the user.\r\n-                 await this.logout();\r\n-                 throw new Error('Login failed: User profile missing. Please try registering again or contact support.');\r\n-            }\r\n-\r\n-            // Assuming one profile per user, take the first document\r\n-            const userProfile = profileDocuments[0];\r\n-\r\n-            // Return session, auth user data, and profile data\r\n-            // Note: Appwrite session handling might differ slightly from Supabase.\r\n-            // You might need to store the session token (session.providerAccessToken) in your app's state management.\r\n-            // However, createEmailSession in browser SDK usually handles session setting automatically.\r\n-            return { session: session, authUser: user, userProfile: userProfile };\r\n-\r\n-        } catch (error) {\r\n-            console.error('Appwrite Login error:', error);\r\n-            // Ensure logout on login failure\r\n-            try { await this.logout(); } catch (e) { /* ignore logout errors during login failure */ }\r\n-            // Handle specific Appwrite errors if needed (e.g., 401 for invalid credentials)\r\n-            if (error.code === 401) {\r\n-                 throw new Error('Invalid email or password.');\r\n-            }\r\n-            // Rethrow other errors\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async logout() {\r\n-        try {\r\n-            // Appwrite Auth Logout (Delete Current Session)\r\n-            // In the browser SDK, deleteSession('current') or deleteSession(sessionId)\r\n-            const result = await account.deleteSession('current'); // Deletes the 'current' active session\r\n-            console.log('User logged out successfully (Session deleted).');\r\n-            // You should also clear any stored session tokens on the client side (e.g., in localStorage, state management) if you were manually managing them.\r\n-            // Appwrite browser SDK handles session cookies/local storage automatically usually.\r\n-        } catch (error) {\r\n-            // Ignore errors if the user is already logged out or the session is invalid (e.g., 401)\r\n-            if (error.code === 401) {\r\n-                 console.log('Logout called, but no active session found (already logged out?).');\r\n-                 return;\r\n-            }\r\n-            console.error('Appwrite Logout error (non-401):', error);\r\n-            // Optionally rethrow if you want to handle other logout errors\r\n-            // throw error;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async getCurrentUser() {\r\n-        try {\r\n-            // Get the Current Appwrite Auth User\r\n-            // account.get() checks for an active session and returns the user or throws 401.\r\n-            const user = await account.get();\r\n-            console.log('Current Appwrite Auth user fetched in getCurrentUser:', user);\r\n-\r\n-            if (!user) {\r\n-                return null; // No logged-in user or session expired/invalid\r\n-            }\r\n-\r\n-            // Fetch the User's Profile from 'users' collection\r\n-            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n-            const profileResponse = await databases.listDocuments(\r\n-                DATABASE_ID,\r\n-                USER_PROFILES_COLLECTION_ID,\r\n-                [Query.equal('user_id', user.$id)]\r\n-            );\r\n-\r\n-            const profileDocuments = profileResponse.documents;\r\n-            console.log('User profile documents fetched from Appwrite DB in getCurrentUser:', profileDocuments);\r\n-\r\n-            // Similar logic to login - handle missing profile\r\n-            if (profileDocuments.length === 0) {\r\n-                 console.warn('User profile document not found in Appwrite DB for logged-in user ID:', user.$id);\r\n-                 // Decide how to handle missing profile (e.g., log out, return partial data)\r\n-                 // For now, log out to ensure consistent state.\r\n-                 await this.logout(); // Logs out the user if their profile is somehow missing.\r\n-                 // Clear any local session storage if needed\r\n-                 // localStorage.removeItem('appwrite_session'); // Example\r\n-                 console.warn('Logged out due to missing profile in getCurrentUser.');\r\n-                 return null;\r\n-            }\r\n-\r\n-            const userProfile = profileDocuments[0]; // Get the first (and hopefully only) profile\r\n-\r\n-            // Return auth user data and profile data\r\n-            return { authUser: user, userProfile: userProfile };\r\n-\r\n-        } catch (error) {\r\n-            // Ignore 401 (Unauthorized) errors, as they likely mean the user is simply not logged in\r\n-            if (error.code === 401) {\r\n-                 console.log('getCurrentUser called, but no active session found (not logged in).');\r\n-                 return null;\r\n-            }\r\n-            console.error('Appwrite getCurrentUser error (non-401):', error);\r\n-            // Handle other potential errors (e.g., network issues) - maybe return null or partial data\r\n-            return null;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    // --- Placeholder for Profile Update (Implement as needed) ---\r\n-    // async updateUserProfile(userId, dataToUpdate) {\r\n-    //     try {\r\n-    //         // 1. Find the profile document ID for the given userId (user_id)\r\n-    //         const profileResponse = await databases.listDocuments(\r\n-    //             DATABASE_ID,\r\n-    //             USER_PROFILES_COLLECTION_ID,\r\n-    //             [Query.equal('user_id', userId)]\r\n-    //         );\r\n-    //         const profileDoc = profileResponse.documents[0];\r\n-    //         if (!profileDoc) throw new Error('Profile not found for update.');\r\n-    //\r\n-    //         // 2. Update the document\r\n-    //         const updatedDoc = await databases.updateDocument(\r\n-    //             DATABASE_ID,\r\n-    //             USER_PROFILES_COLLECTION_ID,\r\n-    //             profileDoc.$id, // Use the document's unique ID\r\n-    //             dataToUpdate // Ensure dataToUpdate matches your collection's attributes\r\n-    //         );\r\n-    //         console.log('User profile updated in Appwrite DB:', updatedDoc);\r\n-    //         return updatedDoc;\r\n-    //     } catch (error) {\r\n-    //         console.error('Appwrite updateUserProfile error:', error);\r\n-    //         throw error;\r\n-    //     }\r\n-    // }\r\n-\r\n-\r\n-    // --- Placeholder for Fetching Profile (Implement if needed elsewhere) ---\r\n-    // async getUserProfileFromDB(userId) {\r\n-    //     try {\r\n-    //         const profileResponse = await databases.listDocuments(\r\n-    //             DATABASE_ID,\r\n-    //             USER_PROFILES_COLLECTION_ID,\r\n-    //             [Query.equal('user_id', userId)]\r\n-    //         );\r\n-    //         const profileDoc = profileResponse.documents[0];\r\n-    //         if (!profileDoc) {\r\n-    //              console.warn('User profile not found in Appwrite DB for user ID:', userId);\r\n-    //              return null;\r\n-    //         }\r\n-    //         console.log('User profile fetched from Appwrite DB (getUserProfileFromDB):', profileDoc);\r\n-    //         return profileDoc;\r\n-    //     } catch (error) {\r\n-    //          console.error('Appwrite getUserProfileFromDB error:', error);\r\n-    //          throw error;\r\n-    //     }\r\n-    // }\r\n-}\r\n-\r\n-export const appwriteAuthService = new AppwriteAuthService();\r\n export default appwriteAuthService; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747815028227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,16 +22,16 @@\n             console.log('Appwrite Auth user created:', user);            // Create a session for the new user\r\n             const session = await account.createSession(email, password);\r\n             \r\n             // The session is automatically handled by the Appwrite SDK\r\n-Registration failed: Registration failed: Invalid `userId` param: Parameter must contain at most 36 chars. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char            // No need to manually set the session            // Create User Profile Document in the users collection (now authorized)\r\n+            // No need to manually set the session            // Create User Profile Document in the users collection (now authorized)\r\n             // Generate a valid userId that meets Appwrite requirements\r\n             const validUserId = `user_${user.$id.replace(/[^a-zA-Z0-9_-]/g, '_')}`.substring(0, 36);\r\n             \r\n             const profileDocument = await databases.createDocument(\r\n                 DATABASE_ID,\r\n                 USER_PROFILES_COLLECTION_ID,\r\n-                validUserId, // Use the formatted valid userId\r\n+                validUserId, // This is where the error is happening\r\n                 {\r\n                     user_id: user.$id, // Link profile to auth user\r\n                     firstname: firstName,\r\n                     lastname: lastName,\r\n@@ -253,5 +253,5 @@\n     // }\r\n }\r\n \r\n export const appwriteAuthService = new AppwriteAuthService();\r\n-export default appwriteAuthService; \n\\ No newline at end of file\n+export default appwriteAuthService;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747815053188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n             \r\n             const profileDocument = await databases.createDocument(\r\n                 DATABASE_ID,\r\n                 USER_PROFILES_COLLECTION_ID,\r\n-                validUserId, // This is where the error is happening\r\n+                validUserId, // Use the formatted valid userId\r\n                 {\r\n                     user_id: user.$id, // Link profile to auth user\r\n                     firstname: firstName,\r\n                     lastname: lastName,\r\n@@ -253,5 +253,5 @@\n     // }\r\n }\r\n \r\n export const appwriteAuthService = new AppwriteAuthService();\r\n-export default appwriteAuthService;\n\\ No newline at end of file\n+export default appwriteAuthService; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747815145519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,254 @@\n+import { ID, Query, Permission, Role } from 'appwrite';\r\n+import { account, databases, client } from '../config/appwrite.config';\r\n+\r\n+// --- Configuration ---\r\n+const DATABASE_ID = '682cc58b003717b8f2b8'; // <-- Replace with your actual database ID (e.g. 'campus_nexus_db')\r\n+const USER_PROFILES_COLLECTION_ID = '682cc598002c2ae4ffc8'; // Use the provided users collection ID\r\n+\r\n+class AppwriteAuthService {\r\n+    async register(userData) {\r\n+        const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n+\r\n+        try {\r\n+            // Create the user account in Appwrite Auth\r\n+            // In the browser SDK, create takes ID.unique() or 'unique()' string, email, password, name\r\n+            const user = await account.create(\r\n+                ID.unique(), // Use ID.unique() or 'unique()'\r\n+                email,\r\n+                password,\r\n+                `${firstName} ${lastName}` // Name (optional)\r\n+            );\r\n+\r\n+            console.log('Appwrite Auth user created:', user);            // Create a session for the new user\r\n+            const session = await account.createSession(email, password);\r\n+            \r\n+            // The session is automatically handled by the Appwrite SDK\r\n+            // No need to manually set the session            // Create User Profile Document in the users collection (now authorized)            // Create User Profile Document with a unique ID\r\n+            const profileDocument = await databases.createDocument(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                ID.unique(), // Use Appwrite's ID.unique() for document ID\r\n+                {\r\n+                    user_id: user.$id, // Link profile to auth user\r\n+                    firstname: firstName,\r\n+                    lastname: lastName,\r\n+                    role: role,\r\n+                    studentID: studentId || null,\r\n+                    department: department || null,\r\n+                    email: email\r\n+                },\r\n+                [\r\n+                    Permission.read(Role.user(user.$id)),\r\n+                    Permission.write(Role.user(user.$id))\r\n+                ]\r\n+            );\r\n+\r\n+            console.log('User profile document created in Appwrite DB:', profileDocument);\r\n+\r\n+            return { authUser: user, userProfile: profileDocument };\r\n+\r\n+        } catch (error) {\r\n+            console.error('Appwrite Registration error:', error);\r\n+            if (error.code === 409) {\r\n+                 throw new Error('A user with this email already exists.');\r\n+            } else if (error.code === 400) {\r\n+                 // Appwrite gives specific messages for password/email format errors\r\n+                 throw new Error(`Registration failed: ${error.message || 'Invalid input.'}`);\r\n+            }\r\n+            // Handle other errors like network issues\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async login(email, password) {\r\n+        try {\r\n+            // Appwrite Auth Login (Create Session)\r\n+            // In the browser SDK, createEmailSession logs the user in and sets the session automatically.\r\n+            const session = await account.createEmailSession(email, password);\r\n+            console.log('User logged in successfully (Session created):', session);\r\n+\r\n+            // Get the User Account Details\r\n+            // account.get() fetches the currently logged-in user based on the active session.\r\n+            const user = await account.get();\r\n+            console.log('Current Appwrite Auth user fetched:', user);\r\n+\r\n+            if (!user) {\r\n+                 // This should rarely happen after a successful createEmailSession, but included for robustness.\r\n+                 await this.logout(); // Ensure logout if user data is missing\r\n+                 throw new Error('Login failed: Authentication successful, but user data could not be retrieved.');\r\n+            }\r\n+\r\n+            // Fetch the User's Profile from 'users' collection\r\n+            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n+            const profileResponse = await databases.listDocuments(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                [\r\n+                    // Query to find the profile where user_id equals the logged-in user's ID\r\n+                    Query.equal('user_id', user.$id),\r\n+                    // Optionally, limit to 1 result if you expect only one profile per user\r\n+                    Query.limit(1)\r\n+                ]\r\n+            );\r\n+\r\n+            const profileDocuments = profileResponse.documents;\r\n+            console.log('User profile documents fetched from Appwrite DB:', profileDocuments);\r\n+\r\n+            if (profileDocuments.length === 0) {\r\n+                 console.error('User profile document not found in Appwrite DB for user ID:', user.$id);\r\n+                 // If profile is not found, it might indicate an incomplete registration.\r\n+                 // Decide how to handle this - maybe log out or return partial data.\r\n+                 // For now, we'll log out and inform the user.\r\n+                 await this.logout();\r\n+                 throw new Error('Login failed: User profile missing. Please try registering again or contact support.');\r\n+            }\r\n+\r\n+            // Assuming one profile per user, take the first document\r\n+            const userProfile = profileDocuments[0];\r\n+\r\n+            // Return session, auth user data, and profile data\r\n+            // Note: Appwrite session handling might differ slightly from Supabase.\r\n+            // You might need to store the session token (session.providerAccessToken) in your app's state management.\r\n+            // However, createEmailSession in browser SDK usually handles session setting automatically.\r\n+            return { session: session, authUser: user, userProfile: userProfile };\r\n+\r\n+        } catch (error) {\r\n+            console.error('Appwrite Login error:', error);\r\n+            // Ensure logout on login failure\r\n+            try { await this.logout(); } catch (e) { /* ignore logout errors during login failure */ }\r\n+            // Handle specific Appwrite errors if needed (e.g., 401 for invalid credentials)\r\n+            if (error.code === 401) {\r\n+                 throw new Error('Invalid email or password.');\r\n+            }\r\n+            // Rethrow other errors\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async logout() {\r\n+        try {\r\n+            // Appwrite Auth Logout (Delete Current Session)\r\n+            // In the browser SDK, deleteSession('current') or deleteSession(sessionId)\r\n+            const result = await account.deleteSession('current'); // Deletes the 'current' active session\r\n+            console.log('User logged out successfully (Session deleted).');\r\n+            // You should also clear any stored session tokens on the client side (e.g., in localStorage, state management) if you were manually managing them.\r\n+            // Appwrite browser SDK handles session cookies/local storage automatically usually.\r\n+        } catch (error) {\r\n+            // Ignore errors if the user is already logged out or the session is invalid (e.g., 401)\r\n+            if (error.code === 401) {\r\n+                 console.log('Logout called, but no active session found (already logged out?).');\r\n+                 return;\r\n+            }\r\n+            console.error('Appwrite Logout error (non-401):', error);\r\n+            // Optionally rethrow if you want to handle other logout errors\r\n+            // throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async getCurrentUser() {\r\n+        try {\r\n+            // Get the Current Appwrite Auth User\r\n+            // account.get() checks for an active session and returns the user or throws 401.\r\n+            const user = await account.get();\r\n+            console.log('Current Appwrite Auth user fetched in getCurrentUser:', user);\r\n+\r\n+            if (!user) {\r\n+                return null; // No logged-in user or session expired/invalid\r\n+            }\r\n+\r\n+            // Fetch the User's Profile from 'users' collection\r\n+            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n+            const profileResponse = await databases.listDocuments(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                [Query.equal('user_id', user.$id)]\r\n+            );\r\n+\r\n+            const profileDocuments = profileResponse.documents;\r\n+            console.log('User profile documents fetched from Appwrite DB in getCurrentUser:', profileDocuments);\r\n+\r\n+            // Similar logic to login - handle missing profile\r\n+            if (profileDocuments.length === 0) {\r\n+                 console.warn('User profile document not found in Appwrite DB for logged-in user ID:', user.$id);\r\n+                 // Decide how to handle missing profile (e.g., log out, return partial data)\r\n+                 // For now, log out to ensure consistent state.\r\n+                 await this.logout(); // Logs out the user if their profile is somehow missing.\r\n+                 // Clear any local session storage if needed\r\n+                 // localStorage.removeItem('appwrite_session'); // Example\r\n+                 console.warn('Logged out due to missing profile in getCurrentUser.');\r\n+                 return null;\r\n+            }\r\n+\r\n+            const userProfile = profileDocuments[0]; // Get the first (and hopefully only) profile\r\n+\r\n+            // Return auth user data and profile data\r\n+            return { authUser: user, userProfile: userProfile };\r\n+\r\n+        } catch (error) {\r\n+            // Ignore 401 (Unauthorized) errors, as they likely mean the user is simply not logged in\r\n+            if (error.code === 401) {\r\n+                 console.log('getCurrentUser called, but no active session found (not logged in).');\r\n+                 return null;\r\n+            }\r\n+            console.error('Appwrite getCurrentUser error (non-401):', error);\r\n+            // Handle other potential errors (e.g., network issues) - maybe return null or partial data\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    // --- Placeholder for Profile Update (Implement as needed) ---\r\n+    // async updateUserProfile(userId, dataToUpdate) {\r\n+    //     try {\r\n+    //         // 1. Find the profile document ID for the given userId (user_id)\r\n+    //         const profileResponse = await databases.listDocuments(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             [Query.equal('user_id', userId)]\r\n+    //         );\r\n+    //         const profileDoc = profileResponse.documents[0];\r\n+    //         if (!profileDoc) throw new Error('Profile not found for update.');\r\n+    //\r\n+    //         // 2. Update the document\r\n+    //         const updatedDoc = await databases.updateDocument(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             profileDoc.$id, // Use the document's unique ID\r\n+    //             dataToUpdate // Ensure dataToUpdate matches your collection's attributes\r\n+    //         );\r\n+    //         console.log('User profile updated in Appwrite DB:', updatedDoc);\r\n+    //         return updatedDoc;\r\n+    //     } catch (error) {\r\n+    //         console.error('Appwrite updateUserProfile error:', error);\r\n+    //         throw error;\r\n+    //     }\r\n+    // }\r\n+\r\n+\r\n+    // --- Placeholder for Fetching Profile (Implement if needed elsewhere) ---\r\n+    // async getUserProfileFromDB(userId) {\r\n+    //     try {\r\n+    //         const profileResponse = await databases.listDocuments(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             [Query.equal('user_id', userId)]\r\n+    //         );\r\n+    //         const profileDoc = profileResponse.documents[0];\r\n+    //         if (!profileDoc) {\r\n+    //              console.warn('User profile not found in Appwrite DB for user ID:', userId);\r\n+    //              return null;\r\n+    //         }\r\n+    //         console.log('User profile fetched from Appwrite DB (getUserProfileFromDB):', profileDoc);\r\n+    //         return profileDoc;\r\n+    //     } catch (error) {\r\n+    //          console.error('Appwrite getUserProfileFromDB error:', error);\r\n+    //          throw error;\r\n+    //     }\r\n+    // }\r\n+}\r\n+\r\n+export const appwriteAuthService = new AppwriteAuthService();\r\n+export default appwriteAuthService; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747815919884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,257 @@\n+import { ID, Query, Permission, Role } from 'appwrite';\r\n+import { account, databases, client } from '../config/appwrite.config';\r\n+\r\n+// --- Configuration ---\r\n+const DATABASE_ID = '682cc58b003717b8f2b8'; // <-- Replace with your actual database ID (e.g. 'campus_nexus_db')\r\n+const USER_PROFILES_COLLECTION_ID = '682cc598002c2ae4ffc8'; // Use the provided users collection ID\r\n+\r\n+class AppwriteAuthService {\r\n+    async register(userData) {\r\n+        const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n+\r\n+        try {            // Create the user account in Appwrite Auth\r\n+            // Generate a valid userId using email and timestamp\r\n+            const timestamp = Date.now();\r\n+            const sanitizedEmail = email.split('@')[0].replace(/[^a-zA-Z0-9]/g, '');\r\n+            const userId = `${sanitizedEmail}${timestamp}`.toLowerCase();\r\n+            \r\n+            const user = await account.create(\r\n+                userId, // Use sanitized and unique userId\r\n+                email,\r\n+                password,\r\n+                `${firstName} ${lastName}` // Name (optional)\r\n+            );\r\n+\r\n+            console.log('Appwrite Auth user created:', user);            // Create a session for the new user\r\n+            const session = await account.createSession(email, password);\r\n+            \r\n+            // The session is automatically handled by the Appwrite SDK\r\n+            // No need to manually set the session            // Create User Profile Document in the users collection (now authorized)            // Create User Profile Document with a unique ID\r\n+            const profileDocument = await databases.createDocument(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                ID.unique(), // Use Appwrite's ID.unique() for document ID\r\n+                {\r\n+                    user_id: user.$id, // Link profile to auth user\r\n+                    firstname: firstName,\r\n+                    lastname: lastName,\r\n+                    role: role,\r\n+                    studentID: studentId || null,\r\n+                    department: department || null,\r\n+                    email: email\r\n+                },\r\n+                [\r\n+                    Permission.read(Role.user(user.$id)),\r\n+                    Permission.write(Role.user(user.$id))\r\n+                ]\r\n+            );\r\n+\r\n+            console.log('User profile document created in Appwrite DB:', profileDocument);\r\n+\r\n+            return { authUser: user, userProfile: profileDocument };\r\n+\r\n+        } catch (error) {\r\n+            console.error('Appwrite Registration error:', error);\r\n+            if (error.code === 409) {\r\n+                 throw new Error('A user with this email already exists.');\r\n+            } else if (error.code === 400) {\r\n+                 // Appwrite gives specific messages for password/email format errors\r\n+                 throw new Error(`Registration failed: ${error.message || 'Invalid input.'}`);\r\n+            }\r\n+            // Handle other errors like network issues\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async login(email, password) {\r\n+        try {\r\n+            // Appwrite Auth Login (Create Session)\r\n+            // In the browser SDK, createEmailSession logs the user in and sets the session automatically.\r\n+            const session = await account.createEmailSession(email, password);\r\n+            console.log('User logged in successfully (Session created):', session);\r\n+\r\n+            // Get the User Account Details\r\n+            // account.get() fetches the currently logged-in user based on the active session.\r\n+            const user = await account.get();\r\n+            console.log('Current Appwrite Auth user fetched:', user);\r\n+\r\n+            if (!user) {\r\n+                 // This should rarely happen after a successful createEmailSession, but included for robustness.\r\n+                 await this.logout(); // Ensure logout if user data is missing\r\n+                 throw new Error('Login failed: Authentication successful, but user data could not be retrieved.');\r\n+            }\r\n+\r\n+            // Fetch the User's Profile from 'users' collection\r\n+            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n+            const profileResponse = await databases.listDocuments(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                [\r\n+                    // Query to find the profile where user_id equals the logged-in user's ID\r\n+                    Query.equal('user_id', user.$id),\r\n+                    // Optionally, limit to 1 result if you expect only one profile per user\r\n+                    Query.limit(1)\r\n+                ]\r\n+            );\r\n+\r\n+            const profileDocuments = profileResponse.documents;\r\n+            console.log('User profile documents fetched from Appwrite DB:', profileDocuments);\r\n+\r\n+            if (profileDocuments.length === 0) {\r\n+                 console.error('User profile document not found in Appwrite DB for user ID:', user.$id);\r\n+                 // If profile is not found, it might indicate an incomplete registration.\r\n+                 // Decide how to handle this - maybe log out or return partial data.\r\n+                 // For now, we'll log out and inform the user.\r\n+                 await this.logout();\r\n+                 throw new Error('Login failed: User profile missing. Please try registering again or contact support.');\r\n+            }\r\n+\r\n+            // Assuming one profile per user, take the first document\r\n+            const userProfile = profileDocuments[0];\r\n+\r\n+            // Return session, auth user data, and profile data\r\n+            // Note: Appwrite session handling might differ slightly from Supabase.\r\n+            // You might need to store the session token (session.providerAccessToken) in your app's state management.\r\n+            // However, createEmailSession in browser SDK usually handles session setting automatically.\r\n+            return { session: session, authUser: user, userProfile: userProfile };\r\n+\r\n+        } catch (error) {\r\n+            console.error('Appwrite Login error:', error);\r\n+            // Ensure logout on login failure\r\n+            try { await this.logout(); } catch (e) { /* ignore logout errors during login failure */ }\r\n+            // Handle specific Appwrite errors if needed (e.g., 401 for invalid credentials)\r\n+            if (error.code === 401) {\r\n+                 throw new Error('Invalid email or password.');\r\n+            }\r\n+            // Rethrow other errors\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async logout() {\r\n+        try {\r\n+            // Appwrite Auth Logout (Delete Current Session)\r\n+            // In the browser SDK, deleteSession('current') or deleteSession(sessionId)\r\n+            const result = await account.deleteSession('current'); // Deletes the 'current' active session\r\n+            console.log('User logged out successfully (Session deleted).');\r\n+            // You should also clear any stored session tokens on the client side (e.g., in localStorage, state management) if you were manually managing them.\r\n+            // Appwrite browser SDK handles session cookies/local storage automatically usually.\r\n+        } catch (error) {\r\n+            // Ignore errors if the user is already logged out or the session is invalid (e.g., 401)\r\n+            if (error.code === 401) {\r\n+                 console.log('Logout called, but no active session found (already logged out?).');\r\n+                 return;\r\n+            }\r\n+            console.error('Appwrite Logout error (non-401):', error);\r\n+            // Optionally rethrow if you want to handle other logout errors\r\n+            // throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async getCurrentUser() {\r\n+        try {\r\n+            // Get the Current Appwrite Auth User\r\n+            // account.get() checks for an active session and returns the user or throws 401.\r\n+            const user = await account.get();\r\n+            console.log('Current Appwrite Auth user fetched in getCurrentUser:', user);\r\n+\r\n+            if (!user) {\r\n+                return null; // No logged-in user or session expired/invalid\r\n+            }\r\n+\r\n+            // Fetch the User's Profile from 'users' collection\r\n+            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n+            const profileResponse = await databases.listDocuments(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                [Query.equal('user_id', user.$id)]\r\n+            );\r\n+\r\n+            const profileDocuments = profileResponse.documents;\r\n+            console.log('User profile documents fetched from Appwrite DB in getCurrentUser:', profileDocuments);\r\n+\r\n+            // Similar logic to login - handle missing profile\r\n+            if (profileDocuments.length === 0) {\r\n+                 console.warn('User profile document not found in Appwrite DB for logged-in user ID:', user.$id);\r\n+                 // Decide how to handle missing profile (e.g., log out, return partial data)\r\n+                 // For now, log out to ensure consistent state.\r\n+                 await this.logout(); // Logs out the user if their profile is somehow missing.\r\n+                 // Clear any local session storage if needed\r\n+                 // localStorage.removeItem('appwrite_session'); // Example\r\n+                 console.warn('Logged out due to missing profile in getCurrentUser.');\r\n+                 return null;\r\n+            }\r\n+\r\n+            const userProfile = profileDocuments[0]; // Get the first (and hopefully only) profile\r\n+\r\n+            // Return auth user data and profile data\r\n+            return { authUser: user, userProfile: userProfile };\r\n+\r\n+        } catch (error) {\r\n+            // Ignore 401 (Unauthorized) errors, as they likely mean the user is simply not logged in\r\n+            if (error.code === 401) {\r\n+                 console.log('getCurrentUser called, but no active session found (not logged in).');\r\n+                 return null;\r\n+            }\r\n+            console.error('Appwrite getCurrentUser error (non-401):', error);\r\n+            // Handle other potential errors (e.g., network issues) - maybe return null or partial data\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    // --- Placeholder for Profile Update (Implement as needed) ---\r\n+    // async updateUserProfile(userId, dataToUpdate) {\r\n+    //     try {\r\n+    //         // 1. Find the profile document ID for the given userId (user_id)\r\n+    //         const profileResponse = await databases.listDocuments(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             [Query.equal('user_id', userId)]\r\n+    //         );\r\n+    //         const profileDoc = profileResponse.documents[0];\r\n+    //         if (!profileDoc) throw new Error('Profile not found for update.');\r\n+    //\r\n+    //         // 2. Update the document\r\n+    //         const updatedDoc = await databases.updateDocument(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             profileDoc.$id, // Use the document's unique ID\r\n+    //             dataToUpdate // Ensure dataToUpdate matches your collection's attributes\r\n+    //         );\r\n+    //         console.log('User profile updated in Appwrite DB:', updatedDoc);\r\n+    //         return updatedDoc;\r\n+    //     } catch (error) {\r\n+    //         console.error('Appwrite updateUserProfile error:', error);\r\n+    //         throw error;\r\n+    //     }\r\n+    // }\r\n+\r\n+\r\n+    // --- Placeholder for Fetching Profile (Implement if needed elsewhere) ---\r\n+    // async getUserProfileFromDB(userId) {\r\n+    //     try {\r\n+    //         const profileResponse = await databases.listDocuments(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             [Query.equal('user_id', userId)]\r\n+    //         );\r\n+    //         const profileDoc = profileResponse.documents[0];\r\n+    //         if (!profileDoc) {\r\n+    //              console.warn('User profile not found in Appwrite DB for user ID:', userId);\r\n+    //              return null;\r\n+    //         }\r\n+    //         console.log('User profile fetched from Appwrite DB (getUserProfileFromDB):', profileDoc);\r\n+    //         return profileDoc;\r\n+    //     } catch (error) {\r\n+    //          console.error('Appwrite getUserProfileFromDB error:', error);\r\n+    //          throw error;\r\n+    //     }\r\n+    // }\r\n+}\r\n+\r\n+export const appwriteAuthService = new AppwriteAuthService();\r\n+export default appwriteAuthService; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747815966998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,16 +8,13 @@\n class AppwriteAuthService {\r\n     async register(userData) {\r\n         const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n \r\n-        try {            // Create the user account in Appwrite Auth\r\n-            // Generate a valid userId using email and timestamp\r\n-            const timestamp = Date.now();\r\n-            const sanitizedEmail = email.split('@')[0].replace(/[^a-zA-Z0-9]/g, '');\r\n-            const userId = `${sanitizedEmail}${timestamp}`.toLowerCase();\r\n-            \r\n+        try {\r\n+            // Create the user account in Appwrite Auth\r\n+            // In the browser SDK, create takes ID.unique() or 'unique()' string, email, password, name\r\n             const user = await account.create(\r\n-                userId, // Use sanitized and unique userId\r\n+                ID.unique(), // Use ID.unique() or 'unique()'\r\n                 email,\r\n                 password,\r\n                 `${firstName} ${lastName}` // Name (optional)\r\n             );\r\n"
                },
                {
                    "date": 1747816235460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,253 @@\n+import { ID, Query, Permission, Role } from 'appwrite';\r\n+import { account, databases, client } from '../config/appwrite.config';\r\n+\r\n+// --- Configuration ---\r\n+const DATABASE_ID = '682cc58b003717b8f2b8'; // <-- Replace with your actual database ID (e.g. 'campus_nexus_db')\r\n+const USER_PROFILES_COLLECTION_ID = '682cc598002c2ae4ffc8'; // Use the provided users collection ID\r\n+\r\n+class AppwriteAuthService {\r\n+    async register(userData) {\r\n+        const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n+\r\n+        try {            // Create the user account in Appwrite Auth with a valid userId\r\n+            const userId = `user_${firstName.toLowerCase()}${lastName.toLowerCase()}_${ID.unique().substring(0, 5)}`;\r\n+            const user = await account.create(\r\n+                userId, // Use formatted userId that meets Appwrite requirements\r\n+                email,\r\n+                password,\r\n+                `${firstName} ${lastName}` // Name (optional)\r\n+            );\r\n+\r\n+            console.log('Appwrite Auth user created:', user);            // Create a session for the new user\r\n+            const session = await account.createSession(email, password);\r\n+            \r\n+            // The session is automatically handled by the Appwrite SDK\r\n+            // No need to manually set the session            // Create User Profile Document in the users collection (now authorized)            // Create User Profile Document with a unique ID\r\n+            const profileDocument = await databases.createDocument(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                ID.unique(), // Use Appwrite's ID.unique() for document ID\r\n+                {\r\n+                    user_id: user.$id, // Link profile to auth user\r\n+                    firstname: firstName,\r\n+                    lastname: lastName,\r\n+                    role: role,\r\n+                    studentID: studentId || null,\r\n+                    department: department || null,\r\n+                    email: email\r\n+                },\r\n+                [\r\n+                    Permission.read(Role.user(user.$id)),\r\n+                    Permission.write(Role.user(user.$id))\r\n+                ]\r\n+            );\r\n+\r\n+            console.log('User profile document created in Appwrite DB:', profileDocument);\r\n+\r\n+            return { authUser: user, userProfile: profileDocument };\r\n+\r\n+        } catch (error) {\r\n+            console.error('Appwrite Registration error:', error);\r\n+            if (error.code === 409) {\r\n+                 throw new Error('A user with this email already exists.');\r\n+            } else if (error.code === 400) {\r\n+                 // Appwrite gives specific messages for password/email format errors\r\n+                 throw new Error(`Registration failed: ${error.message || 'Invalid input.'}`);\r\n+            }\r\n+            // Handle other errors like network issues\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async login(email, password) {\r\n+        try {\r\n+            // Appwrite Auth Login (Create Session)\r\n+            // In the browser SDK, createEmailSession logs the user in and sets the session automatically.\r\n+            const session = await account.createEmailSession(email, password);\r\n+            console.log('User logged in successfully (Session created):', session);\r\n+\r\n+            // Get the User Account Details\r\n+            // account.get() fetches the currently logged-in user based on the active session.\r\n+            const user = await account.get();\r\n+            console.log('Current Appwrite Auth user fetched:', user);\r\n+\r\n+            if (!user) {\r\n+                 // This should rarely happen after a successful createEmailSession, but included for robustness.\r\n+                 await this.logout(); // Ensure logout if user data is missing\r\n+                 throw new Error('Login failed: Authentication successful, but user data could not be retrieved.');\r\n+            }\r\n+\r\n+            // Fetch the User's Profile from 'users' collection\r\n+            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n+            const profileResponse = await databases.listDocuments(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                [\r\n+                    // Query to find the profile where user_id equals the logged-in user's ID\r\n+                    Query.equal('user_id', user.$id),\r\n+                    // Optionally, limit to 1 result if you expect only one profile per user\r\n+                    Query.limit(1)\r\n+                ]\r\n+            );\r\n+\r\n+            const profileDocuments = profileResponse.documents;\r\n+            console.log('User profile documents fetched from Appwrite DB:', profileDocuments);\r\n+\r\n+            if (profileDocuments.length === 0) {\r\n+                 console.error('User profile document not found in Appwrite DB for user ID:', user.$id);\r\n+                 // If profile is not found, it might indicate an incomplete registration.\r\n+                 // Decide how to handle this - maybe log out or return partial data.\r\n+                 // For now, we'll log out and inform the user.\r\n+                 await this.logout();\r\n+                 throw new Error('Login failed: User profile missing. Please try registering again or contact support.');\r\n+            }\r\n+\r\n+            // Assuming one profile per user, take the first document\r\n+            const userProfile = profileDocuments[0];\r\n+\r\n+            // Return session, auth user data, and profile data\r\n+            // Note: Appwrite session handling might differ slightly from Supabase.\r\n+            // You might need to store the session token (session.providerAccessToken) in your app's state management.\r\n+            // However, createEmailSession in browser SDK usually handles session setting automatically.\r\n+            return { session: session, authUser: user, userProfile: userProfile };\r\n+\r\n+        } catch (error) {\r\n+            console.error('Appwrite Login error:', error);\r\n+            // Ensure logout on login failure\r\n+            try { await this.logout(); } catch (e) { /* ignore logout errors during login failure */ }\r\n+            // Handle specific Appwrite errors if needed (e.g., 401 for invalid credentials)\r\n+            if (error.code === 401) {\r\n+                 throw new Error('Invalid email or password.');\r\n+            }\r\n+            // Rethrow other errors\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async logout() {\r\n+        try {\r\n+            // Appwrite Auth Logout (Delete Current Session)\r\n+            // In the browser SDK, deleteSession('current') or deleteSession(sessionId)\r\n+            const result = await account.deleteSession('current'); // Deletes the 'current' active session\r\n+            console.log('User logged out successfully (Session deleted).');\r\n+            // You should also clear any stored session tokens on the client side (e.g., in localStorage, state management) if you were manually managing them.\r\n+            // Appwrite browser SDK handles session cookies/local storage automatically usually.\r\n+        } catch (error) {\r\n+            // Ignore errors if the user is already logged out or the session is invalid (e.g., 401)\r\n+            if (error.code === 401) {\r\n+                 console.log('Logout called, but no active session found (already logged out?).');\r\n+                 return;\r\n+            }\r\n+            console.error('Appwrite Logout error (non-401):', error);\r\n+            // Optionally rethrow if you want to handle other logout errors\r\n+            // throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async getCurrentUser() {\r\n+        try {\r\n+            // Get the Current Appwrite Auth User\r\n+            // account.get() checks for an active session and returns the user or throws 401.\r\n+            const user = await account.get();\r\n+            console.log('Current Appwrite Auth user fetched in getCurrentUser:', user);\r\n+\r\n+            if (!user) {\r\n+                return null; // No logged-in user or session expired/invalid\r\n+            }\r\n+\r\n+            // Fetch the User's Profile from 'users' collection\r\n+            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n+            const profileResponse = await databases.listDocuments(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                [Query.equal('user_id', user.$id)]\r\n+            );\r\n+\r\n+            const profileDocuments = profileResponse.documents;\r\n+            console.log('User profile documents fetched from Appwrite DB in getCurrentUser:', profileDocuments);\r\n+\r\n+            // Similar logic to login - handle missing profile\r\n+            if (profileDocuments.length === 0) {\r\n+                 console.warn('User profile document not found in Appwrite DB for logged-in user ID:', user.$id);\r\n+                 // Decide how to handle missing profile (e.g., log out, return partial data)\r\n+                 // For now, log out to ensure consistent state.\r\n+                 await this.logout(); // Logs out the user if their profile is somehow missing.\r\n+                 // Clear any local session storage if needed\r\n+                 // localStorage.removeItem('appwrite_session'); // Example\r\n+                 console.warn('Logged out due to missing profile in getCurrentUser.');\r\n+                 return null;\r\n+            }\r\n+\r\n+            const userProfile = profileDocuments[0]; // Get the first (and hopefully only) profile\r\n+\r\n+            // Return auth user data and profile data\r\n+            return { authUser: user, userProfile: userProfile };\r\n+\r\n+        } catch (error) {\r\n+            // Ignore 401 (Unauthorized) errors, as they likely mean the user is simply not logged in\r\n+            if (error.code === 401) {\r\n+                 console.log('getCurrentUser called, but no active session found (not logged in).');\r\n+                 return null;\r\n+            }\r\n+            console.error('Appwrite getCurrentUser error (non-401):', error);\r\n+            // Handle other potential errors (e.g., network issues) - maybe return null or partial data\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    // --- Placeholder for Profile Update (Implement as needed) ---\r\n+    // async updateUserProfile(userId, dataToUpdate) {\r\n+    //     try {\r\n+    //         // 1. Find the profile document ID for the given userId (user_id)\r\n+    //         const profileResponse = await databases.listDocuments(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             [Query.equal('user_id', userId)]\r\n+    //         );\r\n+    //         const profileDoc = profileResponse.documents[0];\r\n+    //         if (!profileDoc) throw new Error('Profile not found for update.');\r\n+    //\r\n+    //         // 2. Update the document\r\n+    //         const updatedDoc = await databases.updateDocument(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             profileDoc.$id, // Use the document's unique ID\r\n+    //             dataToUpdate // Ensure dataToUpdate matches your collection's attributes\r\n+    //         );\r\n+    //         console.log('User profile updated in Appwrite DB:', updatedDoc);\r\n+    //         return updatedDoc;\r\n+    //     } catch (error) {\r\n+    //         console.error('Appwrite updateUserProfile error:', error);\r\n+    //         throw error;\r\n+    //     }\r\n+    // }\r\n+\r\n+\r\n+    // --- Placeholder for Fetching Profile (Implement if needed elsewhere) ---\r\n+    // async getUserProfileFromDB(userId) {\r\n+    //     try {\r\n+    //         const profileResponse = await databases.listDocuments(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             [Query.equal('user_id', userId)]\r\n+    //         );\r\n+    //         const profileDoc = profileResponse.documents[0];\r\n+    //         if (!profileDoc) {\r\n+    //              console.warn('User profile not found in Appwrite DB for user ID:', userId);\r\n+    //              return null;\r\n+    //         }\r\n+    //         console.log('User profile fetched from Appwrite DB (getUserProfileFromDB):', profileDoc);\r\n+    //         return profileDoc;\r\n+    //     } catch (error) {\r\n+    //          console.error('Appwrite getUserProfileFromDB error:', error);\r\n+    //          throw error;\r\n+    //     }\r\n+    // }\r\n+}\r\n+\r\n+export const appwriteAuthService = new AppwriteAuthService();\r\n+export default appwriteAuthService; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747816299089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n class AppwriteAuthService {\r\n     async register(userData) {\r\n         const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n \r\n-        try {            // Create the user account in Appwrite Auth with a valid userId\r\n+Registration failed: Registration failed: Invalid `userId` param: Parameter must contain at most 36 chars. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special charx        try {            // Create the user account in Appwrite Auth with a valid userId\r\n             const userId = `user_${firstName.toLowerCase()}${lastName.toLowerCase()}_${ID.unique().substring(0, 5)}`;\r\n             const user = await account.create(\r\n                 userId, // Use formatted userId that meets Appwrite requirements\r\n                 email,\r\n@@ -249,770 +249,5 @@\n     // }\r\n }\r\n \r\n export const appwriteAuthService = new AppwriteAuthService();\r\n-export default appwriteAuthService; \n-import { ID, Query, Permission, Role } from 'appwrite';\r\n-import { account, databases, client } from '../config/appwrite.config';\r\n-\r\n-// --- Configuration ---\r\n-const DATABASE_ID = '682cc58b003717b8f2b8'; // <-- Replace with your actual database ID (e.g. 'campus_nexus_db')\r\n-const USER_PROFILES_COLLECTION_ID = '682cc598002c2ae4ffc8'; // Use the provided users collection ID\r\n-\r\n-class AppwriteAuthService {\r\n-    async register(userData) {\r\n-        const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n-\r\n-        try {\r\n-            // Create the user account in Appwrite Auth\r\n-            // In the browser SDK, create takes ID.unique() or 'unique()' string, email, password, name\r\n-            const user = await account.create(\r\n-                ID.unique(), // Use ID.unique() or 'unique()'\r\n-                email,\r\n-                password,\r\n-                `${firstName} ${lastName}` // Name (optional)\r\n-            );\r\n-\r\n-            console.log('Appwrite Auth user created:', user);            // Create a session for the new user\r\n-            const session = await account.createSession(email, password);\r\n-            \r\n-            // The session is automatically handled by the Appwrite SDK\r\n-            // No need to manually set the session            // Create User Profile Document in the users collection (now authorized)            // Create User Profile Document with a unique ID\r\n-            const profileDocument = await databases.createDocument(\r\n-                DATABASE_ID,\r\n-                USER_PROFILES_COLLECTION_ID,\r\n-                ID.unique(), // Use Appwrite's ID.unique() for document ID\r\n-                {\r\n-                    user_id: user.$id, // Link profile to auth user\r\n-                    firstname: firstName,\r\n-                    lastname: lastName,\r\n-                    role: role,\r\n-                    studentID: studentId || null,\r\n-                    department: department || null,\r\n-                    email: email\r\n-                },\r\n-                [\r\n-                    Permission.read(Role.user(user.$id)),\r\n-                    Permission.write(Role.user(user.$id))\r\n-                ]\r\n-            );\r\n-\r\n-            console.log('User profile document created in Appwrite DB:', profileDocument);\r\n-\r\n-            return { authUser: user, userProfile: profileDocument };\r\n-\r\n-        } catch (error) {\r\n-            console.error('Appwrite Registration error:', error);\r\n-            if (error.code === 409) {\r\n-                 throw new Error('A user with this email already exists.');\r\n-            } else if (error.code === 400) {\r\n-                 // Appwrite gives specific messages for password/email format errors\r\n-                 throw new Error(`Registration failed: ${error.message || 'Invalid input.'}`);\r\n-            }\r\n-            // Handle other errors like network issues\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async login(email, password) {\r\n-        try {\r\n-            // Appwrite Auth Login (Create Session)\r\n-            // In the browser SDK, createEmailSession logs the user in and sets the session automatically.\r\n-            const session = await account.createEmailSession(email, password);\r\n-            console.log('User logged in successfully (Session created):', session);\r\n-\r\n-            // Get the User Account Details\r\n-            // account.get() fetches the currently logged-in user based on the active session.\r\n-            const user = await account.get();\r\n-            console.log('Current Appwrite Auth user fetched:', user);\r\n-\r\n-            if (!user) {\r\n-                 // This should rarely happen after a successful createEmailSession, but included for robustness.\r\n-                 await this.logout(); // Ensure logout if user data is missing\r\n-                 throw new Error('Login failed: Authentication successful, but user data could not be retrieved.');\r\n-            }\r\n-\r\n-            // Fetch the User's Profile from 'users' collection\r\n-            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n-            const profileResponse = await databases.listDocuments(\r\n-                DATABASE_ID,\r\n-                USER_PROFILES_COLLECTION_ID,\r\n-                [\r\n-                    // Query to find the profile where user_id equals the logged-in user's ID\r\n-                    Query.equal('user_id', user.$id),\r\n-                    // Optionally, limit to 1 result if you expect only one profile per user\r\n-                    Query.limit(1)\r\n-                ]\r\n-            );\r\n-\r\n-            const profileDocuments = profileResponse.documents;\r\n-            console.log('User profile documents fetched from Appwrite DB:', profileDocuments);\r\n-\r\n-            if (profileDocuments.length === 0) {\r\n-                 console.error('User profile document not found in Appwrite DB for user ID:', user.$id);\r\n-                 // If profile is not found, it might indicate an incomplete registration.\r\n-                 // Decide how to handle this - maybe log out or return partial data.\r\n-                 // For now, we'll log out and inform the user.\r\n-                 await this.logout();\r\n-                 throw new Error('Login failed: User profile missing. Please try registering again or contact support.');\r\n-            }\r\n-\r\n-            // Assuming one profile per user, take the first document\r\n-            const userProfile = profileDocuments[0];\r\n-\r\n-            // Return session, auth user data, and profile data\r\n-            // Note: Appwrite session handling might differ slightly from Supabase.\r\n-            // You might need to store the session token (session.providerAccessToken) in your app's state management.\r\n-            // However, createEmailSession in browser SDK usually handles session setting automatically.\r\n-            return { session: session, authUser: user, userProfile: userProfile };\r\n-\r\n-        } catch (error) {\r\n-            console.error('Appwrite Login error:', error);\r\n-            // Ensure logout on login failure\r\n-            try { await this.logout(); } catch (e) { /* ignore logout errors during login failure */ }\r\n-            // Handle specific Appwrite errors if needed (e.g., 401 for invalid credentials)\r\n-            if (error.code === 401) {\r\n-                 throw new Error('Invalid email or password.');\r\n-            }\r\n-            // Rethrow other errors\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async logout() {\r\n-        try {\r\n-            // Appwrite Auth Logout (Delete Current Session)\r\n-            // In the browser SDK, deleteSession('current') or deleteSession(sessionId)\r\n-            const result = await account.deleteSession('current'); // Deletes the 'current' active session\r\n-            console.log('User logged out successfully (Session deleted).');\r\n-            // You should also clear any stored session tokens on the client side (e.g., in localStorage, state management) if you were manually managing them.\r\n-            // Appwrite browser SDK handles session cookies/local storage automatically usually.\r\n-        } catch (error) {\r\n-            // Ignore errors if the user is already logged out or the session is invalid (e.g., 401)\r\n-            if (error.code === 401) {\r\n-                 console.log('Logout called, but no active session found (already logged out?).');\r\n-                 return;\r\n-            }\r\n-            console.error('Appwrite Logout error (non-401):', error);\r\n-            // Optionally rethrow if you want to handle other logout errors\r\n-            // throw error;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async getCurrentUser() {\r\n-        try {\r\n-            // Get the Current Appwrite Auth User\r\n-            // account.get() checks for an active session and returns the user or throws 401.\r\n-            const user = await account.get();\r\n-            console.log('Current Appwrite Auth user fetched in getCurrentUser:', user);\r\n-\r\n-            if (!user) {\r\n-                return null; // No logged-in user or session expired/invalid\r\n-            }\r\n-\r\n-            // Fetch the User's Profile from 'users' collection\r\n-            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n-            const profileResponse = await databases.listDocuments(\r\n-                DATABASE_ID,\r\n-                USER_PROFILES_COLLECTION_ID,\r\n-                [Query.equal('user_id', user.$id)]\r\n-            );\r\n-\r\n-            const profileDocuments = profileResponse.documents;\r\n-            console.log('User profile documents fetched from Appwrite DB in getCurrentUser:', profileDocuments);\r\n-\r\n-            // Similar logic to login - handle missing profile\r\n-            if (profileDocuments.length === 0) {\r\n-                 console.warn('User profile document not found in Appwrite DB for logged-in user ID:', user.$id);\r\n-                 // Decide how to handle missing profile (e.g., log out, return partial data)\r\n-                 // For now, log out to ensure consistent state.\r\n-                 await this.logout(); // Logs out the user if their profile is somehow missing.\r\n-                 // Clear any local session storage if needed\r\n-                 // localStorage.removeItem('appwrite_session'); // Example\r\n-                 console.warn('Logged out due to missing profile in getCurrentUser.');\r\n-                 return null;\r\n-            }\r\n-\r\n-            const userProfile = profileDocuments[0]; // Get the first (and hopefully only) profile\r\n-\r\n-            // Return auth user data and profile data\r\n-            return { authUser: user, userProfile: userProfile };\r\n-\r\n-        } catch (error) {\r\n-            // Ignore 401 (Unauthorized) errors, as they likely mean the user is simply not logged in\r\n-            if (error.code === 401) {\r\n-                 console.log('getCurrentUser called, but no active session found (not logged in).');\r\n-                 return null;\r\n-            }\r\n-            console.error('Appwrite getCurrentUser error (non-401):', error);\r\n-            // Handle other potential errors (e.g., network issues) - maybe return null or partial data\r\n-            return null;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    // --- Placeholder for Profile Update (Implement as needed) ---\r\n-    // async updateUserProfile(userId, dataToUpdate) {\r\n-    //     try {\r\n-    //         // 1. Find the profile document ID for the given userId (user_id)\r\n-    //         const profileResponse = await databases.listDocuments(\r\n-    //             DATABASE_ID,\r\n-    //             USER_PROFILES_COLLECTION_ID,\r\n-    //             [Query.equal('user_id', userId)]\r\n-    //         );\r\n-    //         const profileDoc = profileResponse.documents[0];\r\n-    //         if (!profileDoc) throw new Error('Profile not found for update.');\r\n-    //\r\n-    //         // 2. Update the document\r\n-    //         const updatedDoc = await databases.updateDocument(\r\n-    //             DATABASE_ID,\r\n-    //             USER_PROFILES_COLLECTION_ID,\r\n-    //             profileDoc.$id, // Use the document's unique ID\r\n-    //             dataToUpdate // Ensure dataToUpdate matches your collection's attributes\r\n-    //         );\r\n-    //         console.log('User profile updated in Appwrite DB:', updatedDoc);\r\n-    //         return updatedDoc;\r\n-    //     } catch (error) {\r\n-    //         console.error('Appwrite updateUserProfile error:', error);\r\n-    //         throw error;\r\n-    //     }\r\n-    // }\r\n-\r\n-\r\n-    // --- Placeholder for Fetching Profile (Implement if needed elsewhere) ---\r\n-    // async getUserProfileFromDB(userId) {\r\n-    //     try {\r\n-    //         const profileResponse = await databases.listDocuments(\r\n-    //             DATABASE_ID,\r\n-    //             USER_PROFILES_COLLECTION_ID,\r\n-    //             [Query.equal('user_id', userId)]\r\n-    //         );\r\n-    //         const profileDoc = profileResponse.documents[0];\r\n-    //         if (!profileDoc) {\r\n-    //              console.warn('User profile not found in Appwrite DB for user ID:', userId);\r\n-    //              return null;\r\n-    //         }\r\n-    //         console.log('User profile fetched from Appwrite DB (getUserProfileFromDB):', profileDoc);\r\n-    //         return profileDoc;\r\n-    //     } catch (error) {\r\n-    //          console.error('Appwrite getUserProfileFromDB error:', error);\r\n-    //          throw error;\r\n-    //     }\r\n-    // }\r\n-}\r\n-\r\n-export const appwriteAuthService = new AppwriteAuthService();\r\n-export default appwriteAuthService; \n-import { ID, Query, Permission, Role } from 'appwrite';\r\n-import { account, databases, client } from '../config/appwrite.config';\r\n-\r\n-// --- Configuration ---\r\n-const DATABASE_ID = '682cc58b003717b8f2b8'; // <-- Replace with your actual database ID (e.g. 'campus_nexus_db')\r\n-const USER_PROFILES_COLLECTION_ID = '682cc598002c2ae4ffc8'; // Use the provided users collection ID\r\n-\r\n-class AppwriteAuthService {\r\n-    async register(userData) {\r\n-        const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n-\r\n-        try {\r\n-            // Create the user account in Appwrite Auth\r\n-            // In the browser SDK, create takes ID.unique() or 'unique()' string, email, password, name\r\n-            const user = await account.create(\r\n-                ID.unique(), // Use ID.unique() or 'unique()'\r\n-                email,\r\n-                password,\r\n-                `${firstName} ${lastName}` // Name (optional)\r\n-            );\r\n-\r\n-            console.log('Appwrite Auth user created:', user);            // Create a session for the new user\r\n-            const session = await account.createSession(email, password);\r\n-            \r\n-            // The session is automatically handled by the Appwrite SDK\r\n-            // No need to manually set the session            // Create User Profile Document in the users collection (now authorized)            // Create User Profile Document with a unique ID\r\n-            const profileDocument = await databases.createDocument(\r\n-                DATABASE_ID,\r\n-                USER_PROFILES_COLLECTION_ID,\r\n-                ID.unique(), // Use Appwrite's ID.unique() for document ID\r\n-                {\r\n-                    user_id: user.$id, // Link profile to auth user\r\n-                    firstname: firstName,\r\n-                    lastname: lastName,\r\n-                    role: role,\r\n-                    studentID: studentId || null,\r\n-                    department: department || null,\r\n-                    email: email\r\n-                },\r\n-                [\r\n-                    Permission.read(Role.user(user.$id)),\r\n-                    Permission.write(Role.user(user.$id))\r\n-                ]\r\n-            );\r\n-\r\n-            console.log('User profile document created in Appwrite DB:', profileDocument);\r\n-\r\n-            return { authUser: user, userProfile: profileDocument };\r\n-\r\n-        } catch (error) {\r\n-            console.error('Appwrite Registration error:', error);\r\n-            if (error.code === 409) {\r\n-                 throw new Error('A user with this email already exists.');\r\n-            } else if (error.code === 400) {\r\n-                 // Appwrite gives specific messages for password/email format errors\r\n-                 throw new Error(`Registration failed: ${error.message || 'Invalid input.'}`);\r\n-            }\r\n-            // Handle other errors like network issues\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async login(email, password) {\r\n-        try {\r\n-            // Appwrite Auth Login (Create Session)\r\n-            // In the browser SDK, createEmailSession logs the user in and sets the session automatically.\r\n-            const session = await account.createEmailSession(email, password);\r\n-            console.log('User logged in successfully (Session created):', session);\r\n-\r\n-            // Get the User Account Details\r\n-            // account.get() fetches the currently logged-in user based on the active session.\r\n-            const user = await account.get();\r\n-            console.log('Current Appwrite Auth user fetched:', user);\r\n-\r\n-            if (!user) {\r\n-                 // This should rarely happen after a successful createEmailSession, but included for robustness.\r\n-                 await this.logout(); // Ensure logout if user data is missing\r\n-                 throw new Error('Login failed: Authentication successful, but user data could not be retrieved.');\r\n-            }\r\n-\r\n-            // Fetch the User's Profile from 'users' collection\r\n-            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n-            const profileResponse = await databases.listDocuments(\r\n-                DATABASE_ID,\r\n-                USER_PROFILES_COLLECTION_ID,\r\n-                [\r\n-                    // Query to find the profile where user_id equals the logged-in user's ID\r\n-                    Query.equal('user_id', user.$id),\r\n-                    // Optionally, limit to 1 result if you expect only one profile per user\r\n-                    Query.limit(1)\r\n-                ]\r\n-            );\r\n-\r\n-            const profileDocuments = profileResponse.documents;\r\n-            console.log('User profile documents fetched from Appwrite DB:', profileDocuments);\r\n-\r\n-            if (profileDocuments.length === 0) {\r\n-                 console.error('User profile document not found in Appwrite DB for user ID:', user.$id);\r\n-                 // If profile is not found, it might indicate an incomplete registration.\r\n-                 // Decide how to handle this - maybe log out or return partial data.\r\n-                 // For now, we'll log out and inform the user.\r\n-                 await this.logout();\r\n-                 throw new Error('Login failed: User profile missing. Please try registering again or contact support.');\r\n-            }\r\n-\r\n-            // Assuming one profile per user, take the first document\r\n-            const userProfile = profileDocuments[0];\r\n-\r\n-            // Return session, auth user data, and profile data\r\n-            // Note: Appwrite session handling might differ slightly from Supabase.\r\n-            // You might need to store the session token (session.providerAccessToken) in your app's state management.\r\n-            // However, createEmailSession in browser SDK usually handles session setting automatically.\r\n-            return { session: session, authUser: user, userProfile: userProfile };\r\n-\r\n-        } catch (error) {\r\n-            console.error('Appwrite Login error:', error);\r\n-            // Ensure logout on login failure\r\n-            try { await this.logout(); } catch (e) { /* ignore logout errors during login failure */ }\r\n-            // Handle specific Appwrite errors if needed (e.g., 401 for invalid credentials)\r\n-            if (error.code === 401) {\r\n-                 throw new Error('Invalid email or password.');\r\n-            }\r\n-            // Rethrow other errors\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async logout() {\r\n-        try {\r\n-            // Appwrite Auth Logout (Delete Current Session)\r\n-            // In the browser SDK, deleteSession('current') or deleteSession(sessionId)\r\n-            const result = await account.deleteSession('current'); // Deletes the 'current' active session\r\n-            console.log('User logged out successfully (Session deleted).');\r\n-            // You should also clear any stored session tokens on the client side (e.g., in localStorage, state management) if you were manually managing them.\r\n-            // Appwrite browser SDK handles session cookies/local storage automatically usually.\r\n-        } catch (error) {\r\n-            // Ignore errors if the user is already logged out or the session is invalid (e.g., 401)\r\n-            if (error.code === 401) {\r\n-                 console.log('Logout called, but no active session found (already logged out?).');\r\n-                 return;\r\n-            }\r\n-            console.error('Appwrite Logout error (non-401):', error);\r\n-            // Optionally rethrow if you want to handle other logout errors\r\n-            // throw error;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async getCurrentUser() {\r\n-        try {\r\n-            // Get the Current Appwrite Auth User\r\n-            // account.get() checks for an active session and returns the user or throws 401.\r\n-            const user = await account.get();\r\n-            console.log('Current Appwrite Auth user fetched in getCurrentUser:', user);\r\n-\r\n-            if (!user) {\r\n-                return null; // No logged-in user or session expired/invalid\r\n-            }\r\n-\r\n-            // Fetch the User's Profile from 'users' collection\r\n-            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n-            const profileResponse = await databases.listDocuments(\r\n-                DATABASE_ID,\r\n-                USER_PROFILES_COLLECTION_ID,\r\n-                [Query.equal('user_id', user.$id)]\r\n-            );\r\n-\r\n-            const profileDocuments = profileResponse.documents;\r\n-            console.log('User profile documents fetched from Appwrite DB in getCurrentUser:', profileDocuments);\r\n-\r\n-            // Similar logic to login - handle missing profile\r\n-            if (profileDocuments.length === 0) {\r\n-                 console.warn('User profile document not found in Appwrite DB for logged-in user ID:', user.$id);\r\n-                 // Decide how to handle missing profile (e.g., log out, return partial data)\r\n-                 // For now, log out to ensure consistent state.\r\n-                 await this.logout(); // Logs out the user if their profile is somehow missing.\r\n-                 // Clear any local session storage if needed\r\n-                 // localStorage.removeItem('appwrite_session'); // Example\r\n-                 console.warn('Logged out due to missing profile in getCurrentUser.');\r\n-                 return null;\r\n-            }\r\n-\r\n-            const userProfile = profileDocuments[0]; // Get the first (and hopefully only) profile\r\n-\r\n-            // Return auth user data and profile data\r\n-            return { authUser: user, userProfile: userProfile };\r\n-\r\n-        } catch (error) {\r\n-            // Ignore 401 (Unauthorized) errors, as they likely mean the user is simply not logged in\r\n-            if (error.code === 401) {\r\n-                 console.log('getCurrentUser called, but no active session found (not logged in).');\r\n-                 return null;\r\n-            }\r\n-            console.error('Appwrite getCurrentUser error (non-401):', error);\r\n-            // Handle other potential errors (e.g., network issues) - maybe return null or partial data\r\n-            return null;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    // --- Placeholder for Profile Update (Implement as needed) ---\r\n-    // async updateUserProfile(userId, dataToUpdate) {\r\n-    //     try {\r\n-    //         // 1. Find the profile document ID for the given userId (user_id)\r\n-    //         const profileResponse = await databases.listDocuments(\r\n-    //             DATABASE_ID,\r\n-    //             USER_PROFILES_COLLECTION_ID,\r\n-    //             [Query.equal('user_id', userId)]\r\n-    //         );\r\n-    //         const profileDoc = profileResponse.documents[0];\r\n-    //         if (!profileDoc) throw new Error('Profile not found for update.');\r\n-    //\r\n-    //         // 2. Update the document\r\n-    //         const updatedDoc = await databases.updateDocument(\r\n-    //             DATABASE_ID,\r\n-    //             USER_PROFILES_COLLECTION_ID,\r\n-    //             profileDoc.$id, // Use the document's unique ID\r\n-    //             dataToUpdate // Ensure dataToUpdate matches your collection's attributes\r\n-    //         );\r\n-    //         console.log('User profile updated in Appwrite DB:', updatedDoc);\r\n-    //         return updatedDoc;\r\n-    //     } catch (error) {\r\n-    //         console.error('Appwrite updateUserProfile error:', error);\r\n-    //         throw error;\r\n-    //     }\r\n-    // }\r\n-\r\n-\r\n-    // --- Placeholder for Fetching Profile (Implement if needed elsewhere) ---\r\n-    // async getUserProfileFromDB(userId) {\r\n-    //     try {\r\n-    //         const profileResponse = await databases.listDocuments(\r\n-    //             DATABASE_ID,\r\n-    //             USER_PROFILES_COLLECTION_ID,\r\n-    //             [Query.equal('user_id', userId)]\r\n-    //         );\r\n-    //         const profileDoc = profileResponse.documents[0];\r\n-    //         if (!profileDoc) {\r\n-    //              console.warn('User profile not found in Appwrite DB for user ID:', userId);\r\n-    //              return null;\r\n-    //         }\r\n-    //         console.log('User profile fetched from Appwrite DB (getUserProfileFromDB):', profileDoc);\r\n-    //         return profileDoc;\r\n-    //     } catch (error) {\r\n-    //          console.error('Appwrite getUserProfileFromDB error:', error);\r\n-    //          throw error;\r\n-    //     }\r\n-    // }\r\n-}\r\n-\r\n-export const appwriteAuthService = new AppwriteAuthService();\r\n-export default appwriteAuthService; \n-import { ID, Query, Permission, Role } from 'appwrite';\r\n-import { account, databases, client } from '../config/appwrite.config';\r\n-\r\n-// --- Configuration ---\r\n-const DATABASE_ID = '682cc58b003717b8f2b8'; // <-- Replace with your actual database ID (e.g. 'campus_nexus_db')\r\n-const USER_PROFILES_COLLECTION_ID = '682cc598002c2ae4ffc8'; // Use the provided users collection ID\r\n-\r\n-class AppwriteAuthService {\r\n-    async register(userData) {\r\n-        const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n-\r\n-        try {\r\n-            // Create the user account in Appwrite Auth\r\n-            // In the browser SDK, create takes ID.unique() or 'unique()' string, email, password, name\r\n-            const user = await account.create(\r\n-                ID.unique(), // Use ID.unique() or 'unique()'\r\n-                email,\r\n-                password,\r\n-                `${firstName} ${lastName}` // Name (optional)\r\n-            );\r\n-\r\n-            console.log('Appwrite Auth user created:', user);            // Create a session for the new user\r\n-            const session = await account.createSession(email, password);\r\n-            \r\n-            // The session is automatically handled by the Appwrite SDK\r\n-            // No need to manually set the session            // Create User Profile Document in the users collection (now authorized)\r\n-            // Generate a valid userId that meets Appwrite requirements\r\n-            const validUserId = `user_${user.$id.replace(/[^a-zA-Z0-9_-]/g, '_')}`.substring(0, 36);\r\n-            \r\n-            const profileDocument = await databases.createDocument(\r\n-                DATABASE_ID,\r\n-                USER_PROFILES_COLLECTION_ID,\r\n-                validUserId, // Use the formatted valid userId\r\n-                {\r\n-                    user_id: user.$id, // Link profile to auth user\r\n-                    firstname: firstName,\r\n-                    lastname: lastName,\r\n-                    role: role,\r\n-                    studentID: studentId || null,\r\n-                    department: department || null,\r\n-                    email: email\r\n-                },\r\n-                [\r\n-                    Permission.read(Role.user(user.$id)),\r\n-                    Permission.write(Role.user(user.$id))\r\n-                ]\r\n-            );\r\n-\r\n-            console.log('User profile document created in Appwrite DB:', profileDocument);\r\n-\r\n-            return { authUser: user, userProfile: profileDocument };\r\n-\r\n-        } catch (error) {\r\n-            console.error('Appwrite Registration error:', error);\r\n-            if (error.code === 409) {\r\n-                 throw new Error('A user with this email already exists.');\r\n-            } else if (error.code === 400) {\r\n-                 // Appwrite gives specific messages for password/email format errors\r\n-                 throw new Error(`Registration failed: ${error.message || 'Invalid input.'}`);\r\n-            }\r\n-            // Handle other errors like network issues\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async login(email, password) {\r\n-        try {\r\n-            // Appwrite Auth Login (Create Session)\r\n-            // In the browser SDK, createEmailSession logs the user in and sets the session automatically.\r\n-            const session = await account.createEmailSession(email, password);\r\n-            console.log('User logged in successfully (Session created):', session);\r\n-\r\n-            // Get the User Account Details\r\n-            // account.get() fetches the currently logged-in user based on the active session.\r\n-            const user = await account.get();\r\n-            console.log('Current Appwrite Auth user fetched:', user);\r\n-\r\n-            if (!user) {\r\n-                 // This should rarely happen after a successful createEmailSession, but included for robustness.\r\n-                 await this.logout(); // Ensure logout if user data is missing\r\n-                 throw new Error('Login failed: Authentication successful, but user data could not be retrieved.');\r\n-            }\r\n-\r\n-            // Fetch the User's Profile from 'users' collection\r\n-            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n-            const profileResponse = await databases.listDocuments(\r\n-                DATABASE_ID,\r\n-                USER_PROFILES_COLLECTION_ID,\r\n-                [\r\n-                    // Query to find the profile where user_id equals the logged-in user's ID\r\n-                    Query.equal('user_id', user.$id),\r\n-                    // Optionally, limit to 1 result if you expect only one profile per user\r\n-                    Query.limit(1)\r\n-                ]\r\n-            );\r\n-\r\n-            const profileDocuments = profileResponse.documents;\r\n-            console.log('User profile documents fetched from Appwrite DB:', profileDocuments);\r\n-\r\n-            if (profileDocuments.length === 0) {\r\n-                 console.error('User profile document not found in Appwrite DB for user ID:', user.$id);\r\n-                 // If profile is not found, it might indicate an incomplete registration.\r\n-                 // Decide how to handle this - maybe log out or return partial data.\r\n-                 // For now, we'll log out and inform the user.\r\n-                 await this.logout();\r\n-                 throw new Error('Login failed: User profile missing. Please try registering again or contact support.');\r\n-            }\r\n-\r\n-            // Assuming one profile per user, take the first document\r\n-            const userProfile = profileDocuments[0];\r\n-\r\n-            // Return session, auth user data, and profile data\r\n-            // Note: Appwrite session handling might differ slightly from Supabase.\r\n-            // You might need to store the session token (session.providerAccessToken) in your app's state management.\r\n-            // However, createEmailSession in browser SDK usually handles session setting automatically.\r\n-            return { session: session, authUser: user, userProfile: userProfile };\r\n-\r\n-        } catch (error) {\r\n-            console.error('Appwrite Login error:', error);\r\n-            // Ensure logout on login failure\r\n-            try { await this.logout(); } catch (e) { /* ignore logout errors during login failure */ }\r\n-            // Handle specific Appwrite errors if needed (e.g., 401 for invalid credentials)\r\n-            if (error.code === 401) {\r\n-                 throw new Error('Invalid email or password.');\r\n-            }\r\n-            // Rethrow other errors\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async logout() {\r\n-        try {\r\n-            // Appwrite Auth Logout (Delete Current Session)\r\n-            // In the browser SDK, deleteSession('current') or deleteSession(sessionId)\r\n-            const result = await account.deleteSession('current'); // Deletes the 'current' active session\r\n-            console.log('User logged out successfully (Session deleted).');\r\n-            // You should also clear any stored session tokens on the client side (e.g., in localStorage, state management) if you were manually managing them.\r\n-            // Appwrite browser SDK handles session cookies/local storage automatically usually.\r\n-        } catch (error) {\r\n-            // Ignore errors if the user is already logged out or the session is invalid (e.g., 401)\r\n-            if (error.code === 401) {\r\n-                 console.log('Logout called, but no active session found (already logged out?).');\r\n-                 return;\r\n-            }\r\n-            console.error('Appwrite Logout error (non-401):', error);\r\n-            // Optionally rethrow if you want to handle other logout errors\r\n-            // throw error;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async getCurrentUser() {\r\n-        try {\r\n-            // Get the Current Appwrite Auth User\r\n-            // account.get() checks for an active session and returns the user or throws 401.\r\n-            const user = await account.get();\r\n-            console.log('Current Appwrite Auth user fetched in getCurrentUser:', user);\r\n-\r\n-            if (!user) {\r\n-                return null; // No logged-in user or session expired/invalid\r\n-            }\r\n-\r\n-            // Fetch the User's Profile from 'users' collection\r\n-            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n-            const profileResponse = await databases.listDocuments(\r\n-                DATABASE_ID,\r\n-                USER_PROFILES_COLLECTION_ID,\r\n-                [Query.equal('user_id', user.$id)]\r\n-            );\r\n-\r\n-            const profileDocuments = profileResponse.documents;\r\n-            console.log('User profile documents fetched from Appwrite DB in getCurrentUser:', profileDocuments);\r\n-\r\n-            // Similar logic to login - handle missing profile\r\n-            if (profileDocuments.length === 0) {\r\n-                 console.warn('User profile document not found in Appwrite DB for logged-in user ID:', user.$id);\r\n-                 // Decide how to handle missing profile (e.g., log out, return partial data)\r\n-                 // For now, log out to ensure consistent state.\r\n-                 await this.logout(); // Logs out the user if their profile is somehow missing.\r\n-                 // Clear any local session storage if needed\r\n-                 // localStorage.removeItem('appwrite_session'); // Example\r\n-                 console.warn('Logged out due to missing profile in getCurrentUser.');\r\n-                 return null;\r\n-            }\r\n-\r\n-            const userProfile = profileDocuments[0]; // Get the first (and hopefully only) profile\r\n-\r\n-            // Return auth user data and profile data\r\n-            return { authUser: user, userProfile: userProfile };\r\n-\r\n-        } catch (error) {\r\n-            // Ignore 401 (Unauthorized) errors, as they likely mean the user is simply not logged in\r\n-            if (error.code === 401) {\r\n-                 console.log('getCurrentUser called, but no active session found (not logged in).');\r\n-                 return null;\r\n-            }\r\n-            console.error('Appwrite getCurrentUser error (non-401):', error);\r\n-            // Handle other potential errors (e.g., network issues) - maybe return null or partial data\r\n-            return null;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    // --- Placeholder for Profile Update (Implement as needed) ---\r\n-    // async updateUserProfile(userId, dataToUpdate) {\r\n-    //     try {\r\n-    //         // 1. Find the profile document ID for the given userId (user_id)\r\n-    //         const profileResponse = await databases.listDocuments(\r\n-    //             DATABASE_ID,\r\n-    //             USER_PROFILES_COLLECTION_ID,\r\n-    //             [Query.equal('user_id', userId)]\r\n-    //         );\r\n-    //         const profileDoc = profileResponse.documents[0];\r\n-    //         if (!profileDoc) throw new Error('Profile not found for update.');\r\n-    //\r\n-    //         // 2. Update the document\r\n-    //         const updatedDoc = await databases.updateDocument(\r\n-    //             DATABASE_ID,\r\n-    //             USER_PROFILES_COLLECTION_ID,\r\n-    //             profileDoc.$id, // Use the document's unique ID\r\n-    //             dataToUpdate // Ensure dataToUpdate matches your collection's attributes\r\n-    //         );\r\n-    //         console.log('User profile updated in Appwrite DB:', updatedDoc);\r\n-    //         return updatedDoc;\r\n-    //     } catch (error) {\r\n-    //         console.error('Appwrite updateUserProfile error:', error);\r\n-    //         throw error;\r\n-    //     }\r\n-    // }\r\n-\r\n-\r\n-    // --- Placeholder for Fetching Profile (Implement if needed elsewhere) ---\r\n-    // async getUserProfileFromDB(userId) {\r\n-    //     try {\r\n-    //         const profileResponse = await databases.listDocuments(\r\n-    //             DATABASE_ID,\r\n-    //             USER_PROFILES_COLLECTION_ID,\r\n-    //             [Query.equal('user_id', userId)]\r\n-    //         );\r\n-    //         const profileDoc = profileResponse.documents[0];\r\n-    //         if (!profileDoc) {\r\n-    //              console.warn('User profile not found in Appwrite DB for user ID:', userId);\r\n-    //              return null;\r\n-    //         }\r\n-    //         console.log('User profile fetched from Appwrite DB (getUserProfileFromDB):', profileDoc);\r\n-    //         return profileDoc;\r\n-    //     } catch (error) {\r\n-    //          console.error('Appwrite getUserProfileFromDB error:', error);\r\n-    //          throw error;\r\n-    //     }\r\n-    // }\r\n-}\r\n-\r\n-export const appwriteAuthService = new AppwriteAuthService();\r\n export default appwriteAuthService; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747816522516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,12 +8,15 @@\n class AppwriteAuthService {\r\n     async register(userData) {\r\n         const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n \r\n-Registration failed: Registration failed: Invalid `userId` param: Parameter must contain at most 36 chars. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special charx        try {            // Create the user account in Appwrite Auth with a valid userId\r\n-            const userId = `user_${firstName.toLowerCase()}${lastName.toLowerCase()}_${ID.unique().substring(0, 5)}`;\r\n+        try {            // Create the user account in Appwrite Auth with a valid userId            // Create a clean userId without special characters\r\n+            const cleanFirstName = firstName.toLowerCase().replace(/[^a-z0-9]/g, '');\r\n+            const cleanLastName = lastName.toLowerCase().replace(/[^a-z0-9]/g, '');\r\n+            const userId = `${cleanFirstName}${cleanLastName}${Math.floor(Math.random() * 1000)}`;\r\n+            \r\n             const user = await account.create(\r\n-                userId, // Use formatted userId that meets Appwrite requirements\r\n+                userId,\r\n                 email,\r\n                 password,\r\n                 `${firstName} ${lastName}` // Name (optional)\r\n             );\r\n"
                },
                {
                    "date": 1747816723227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,12 +8,13 @@\n class AppwriteAuthService {\r\n     async register(userData) {\r\n         const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n \r\n-        try {            // Create the user account in Appwrite Auth with a valid userId            // Create a clean userId without special characters\r\n-            const cleanFirstName = firstName.toLowerCase().replace(/[^a-z0-9]/g, '');\r\n-            const cleanLastName = lastName.toLowerCase().replace(/[^a-z0-9]/g, '');\r\n-            const userId = `${cleanFirstName}${cleanLastName}${Math.floor(Math.random() * 1000)}`;\r\n+        try {            // Create the user account in Appwrite Auth with a valid userId            // Create a clean userId without special characters            // Generate a safe userId: use first letter of first name + lastname + random number\r\n+            const safeFirstName = firstName.toLowerCase().replace(/[^a-z0-9]/g, '').charAt(0);\r\n+            const safeLastName = lastName.toLowerCase().replace(/[^a-z0-9]/g, '');\r\n+            const randomNum = Math.floor(Math.random() * 10000).toString().padStart(4, '0');\r\n+            const userId = `${safeFirstName}${safeLastName}${randomNum}`;\r\n             \r\n             const user = await account.create(\r\n                 userId,\r\n                 email,\r\n"
                },
                {
                    "date": 1747816896487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,257 @@\n+import { ID, Query, Permission, Role } from 'appwrite';\r\n+import { account, databases, client } from '../config/appwrite.config';\r\n+\r\n+// --- Configuration ---\r\n+const DATABASE_ID = '682cc58b003717b8f2b8'; // <-- Replace with your actual database ID (e.g. 'campus_nexus_db')\r\n+const USER_PROFILES_COLLECTION_ID = '682cc598002c2ae4ffc8'; // Use the provided users collection ID\r\n+\r\n+class AppwriteAuthService {\r\n+    async register(userData) {\r\n+        const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n+\r\n+        try {            // Create the user account in Appwrite Auth with a valid userId            // Create a clean userId without special characters            // Generate a safe userId: use first letter of first name + lastname + random number            // Ensure the ID starts with a letter and contains only valid characters\r\n+            const sanitizedFirstName = firstName.toLowerCase().replace(/[^a-z]/g, '').charAt(0) || 'u';\r\n+            const sanitizedLastName = lastName.toLowerCase().replace(/[^a-z0-9]/g, '').slice(0, 15) || 'user';\r\n+            const timestamp = Date.now().toString().slice(-4);\r\n+            const userId = `${sanitizedFirstName}${sanitizedLastName}${timestamp}`;\r\n+            \r\n+            const user = await account.create(\r\n+                userId,\r\n+                email,\r\n+                password,\r\n+                `${firstName} ${lastName}` // Name (optional)\r\n+            );\r\n+\r\n+            console.log('Appwrite Auth user created:', user);            // Create a session for the new user\r\n+            const session = await account.createSession(email, password);\r\n+            \r\n+            // The session is automatically handled by the Appwrite SDK\r\n+            // No need to manually set the session            // Create User Profile Document in the users collection (now authorized)            // Create User Profile Document with a unique ID\r\n+            const profileDocument = await databases.createDocument(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                ID.unique(), // Use Appwrite's ID.unique() for document ID\r\n+                {\r\n+                    user_id: user.$id, // Link profile to auth user\r\n+                    firstname: firstName,\r\n+                    lastname: lastName,\r\n+                    role: role,\r\n+                    studentID: studentId || null,\r\n+                    department: department || null,\r\n+                    email: email\r\n+                },\r\n+                [\r\n+                    Permission.read(Role.user(user.$id)),\r\n+                    Permission.write(Role.user(user.$id))\r\n+                ]\r\n+            );\r\n+\r\n+            console.log('User profile document created in Appwrite DB:', profileDocument);\r\n+\r\n+            return { authUser: user, userProfile: profileDocument };\r\n+\r\n+        } catch (error) {\r\n+            console.error('Appwrite Registration error:', error);\r\n+            if (error.code === 409) {\r\n+                 throw new Error('A user with this email already exists.');\r\n+            } else if (error.code === 400) {\r\n+                 // Appwrite gives specific messages for password/email format errors\r\n+                 throw new Error(`Registration failed: ${error.message || 'Invalid input.'}`);\r\n+            }\r\n+            // Handle other errors like network issues\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async login(email, password) {\r\n+        try {\r\n+            // Appwrite Auth Login (Create Session)\r\n+            // In the browser SDK, createEmailSession logs the user in and sets the session automatically.\r\n+            const session = await account.createEmailSession(email, password);\r\n+            console.log('User logged in successfully (Session created):', session);\r\n+\r\n+            // Get the User Account Details\r\n+            // account.get() fetches the currently logged-in user based on the active session.\r\n+            const user = await account.get();\r\n+            console.log('Current Appwrite Auth user fetched:', user);\r\n+\r\n+            if (!user) {\r\n+                 // This should rarely happen after a successful createEmailSession, but included for robustness.\r\n+                 await this.logout(); // Ensure logout if user data is missing\r\n+                 throw new Error('Login failed: Authentication successful, but user data could not be retrieved.');\r\n+            }\r\n+\r\n+            // Fetch the User's Profile from 'users' collection\r\n+            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n+            const profileResponse = await databases.listDocuments(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                [\r\n+                    // Query to find the profile where user_id equals the logged-in user's ID\r\n+                    Query.equal('user_id', user.$id),\r\n+                    // Optionally, limit to 1 result if you expect only one profile per user\r\n+                    Query.limit(1)\r\n+                ]\r\n+            );\r\n+\r\n+            const profileDocuments = profileResponse.documents;\r\n+            console.log('User profile documents fetched from Appwrite DB:', profileDocuments);\r\n+\r\n+            if (profileDocuments.length === 0) {\r\n+                 console.error('User profile document not found in Appwrite DB for user ID:', user.$id);\r\n+                 // If profile is not found, it might indicate an incomplete registration.\r\n+                 // Decide how to handle this - maybe log out or return partial data.\r\n+                 // For now, we'll log out and inform the user.\r\n+                 await this.logout();\r\n+                 throw new Error('Login failed: User profile missing. Please try registering again or contact support.');\r\n+            }\r\n+\r\n+            // Assuming one profile per user, take the first document\r\n+            const userProfile = profileDocuments[0];\r\n+\r\n+            // Return session, auth user data, and profile data\r\n+            // Note: Appwrite session handling might differ slightly from Supabase.\r\n+            // You might need to store the session token (session.providerAccessToken) in your app's state management.\r\n+            // However, createEmailSession in browser SDK usually handles session setting automatically.\r\n+            return { session: session, authUser: user, userProfile: userProfile };\r\n+\r\n+        } catch (error) {\r\n+            console.error('Appwrite Login error:', error);\r\n+            // Ensure logout on login failure\r\n+            try { await this.logout(); } catch (e) { /* ignore logout errors during login failure */ }\r\n+            // Handle specific Appwrite errors if needed (e.g., 401 for invalid credentials)\r\n+            if (error.code === 401) {\r\n+                 throw new Error('Invalid email or password.');\r\n+            }\r\n+            // Rethrow other errors\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async logout() {\r\n+        try {\r\n+            // Appwrite Auth Logout (Delete Current Session)\r\n+            // In the browser SDK, deleteSession('current') or deleteSession(sessionId)\r\n+            const result = await account.deleteSession('current'); // Deletes the 'current' active session\r\n+            console.log('User logged out successfully (Session deleted).');\r\n+            // You should also clear any stored session tokens on the client side (e.g., in localStorage, state management) if you were manually managing them.\r\n+            // Appwrite browser SDK handles session cookies/local storage automatically usually.\r\n+        } catch (error) {\r\n+            // Ignore errors if the user is already logged out or the session is invalid (e.g., 401)\r\n+            if (error.code === 401) {\r\n+                 console.log('Logout called, but no active session found (already logged out?).');\r\n+                 return;\r\n+            }\r\n+            console.error('Appwrite Logout error (non-401):', error);\r\n+            // Optionally rethrow if you want to handle other logout errors\r\n+            // throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async getCurrentUser() {\r\n+        try {\r\n+            // Get the Current Appwrite Auth User\r\n+            // account.get() checks for an active session and returns the user or throws 401.\r\n+            const user = await account.get();\r\n+            console.log('Current Appwrite Auth user fetched in getCurrentUser:', user);\r\n+\r\n+            if (!user) {\r\n+                return null; // No logged-in user or session expired/invalid\r\n+            }\r\n+\r\n+            // Fetch the User's Profile from 'users' collection\r\n+            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n+            const profileResponse = await databases.listDocuments(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                [Query.equal('user_id', user.$id)]\r\n+            );\r\n+\r\n+            const profileDocuments = profileResponse.documents;\r\n+            console.log('User profile documents fetched from Appwrite DB in getCurrentUser:', profileDocuments);\r\n+\r\n+            // Similar logic to login - handle missing profile\r\n+            if (profileDocuments.length === 0) {\r\n+                 console.warn('User profile document not found in Appwrite DB for logged-in user ID:', user.$id);\r\n+                 // Decide how to handle missing profile (e.g., log out, return partial data)\r\n+                 // For now, log out to ensure consistent state.\r\n+                 await this.logout(); // Logs out the user if their profile is somehow missing.\r\n+                 // Clear any local session storage if needed\r\n+                 // localStorage.removeItem('appwrite_session'); // Example\r\n+                 console.warn('Logged out due to missing profile in getCurrentUser.');\r\n+                 return null;\r\n+            }\r\n+\r\n+            const userProfile = profileDocuments[0]; // Get the first (and hopefully only) profile\r\n+\r\n+            // Return auth user data and profile data\r\n+            return { authUser: user, userProfile: userProfile };\r\n+\r\n+        } catch (error) {\r\n+            // Ignore 401 (Unauthorized) errors, as they likely mean the user is simply not logged in\r\n+            if (error.code === 401) {\r\n+                 console.log('getCurrentUser called, but no active session found (not logged in).');\r\n+                 return null;\r\n+            }\r\n+            console.error('Appwrite getCurrentUser error (non-401):', error);\r\n+            // Handle other potential errors (e.g., network issues) - maybe return null or partial data\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    // --- Placeholder for Profile Update (Implement as needed) ---\r\n+    // async updateUserProfile(userId, dataToUpdate) {\r\n+    //     try {\r\n+    //         // 1. Find the profile document ID for the given userId (user_id)\r\n+    //         const profileResponse = await databases.listDocuments(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             [Query.equal('user_id', userId)]\r\n+    //         );\r\n+    //         const profileDoc = profileResponse.documents[0];\r\n+    //         if (!profileDoc) throw new Error('Profile not found for update.');\r\n+    //\r\n+    //         // 2. Update the document\r\n+    //         const updatedDoc = await databases.updateDocument(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             profileDoc.$id, // Use the document's unique ID\r\n+    //             dataToUpdate // Ensure dataToUpdate matches your collection's attributes\r\n+    //         );\r\n+    //         console.log('User profile updated in Appwrite DB:', updatedDoc);\r\n+    //         return updatedDoc;\r\n+    //     } catch (error) {\r\n+    //         console.error('Appwrite updateUserProfile error:', error);\r\n+    //         throw error;\r\n+    //     }\r\n+    // }\r\n+\r\n+\r\n+    // --- Placeholder for Fetching Profile (Implement if needed elsewhere) ---\r\n+    // async getUserProfileFromDB(userId) {\r\n+    //     try {\r\n+    //         const profileResponse = await databases.listDocuments(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             [Query.equal('user_id', userId)]\r\n+    //         );\r\n+    //         const profileDoc = profileResponse.documents[0];\r\n+    //         if (!profileDoc) {\r\n+    //              console.warn('User profile not found in Appwrite DB for user ID:', userId);\r\n+    //              return null;\r\n+    //         }\r\n+    //         console.log('User profile fetched from Appwrite DB (getUserProfileFromDB):', profileDoc);\r\n+    //         return profileDoc;\r\n+    //     } catch (error) {\r\n+    //          console.error('Appwrite getUserProfileFromDB error:', error);\r\n+    //          throw error;\r\n+    //     }\r\n+    // }\r\n+}\r\n+\r\n+export const appwriteAuthService = new AppwriteAuthService();\r\n+export default appwriteAuthService; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747817007080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,251 @@\n+import { ID, Query, Permission, Role } from 'appwrite';\r\n+import { account, databases, client } from '../config/appwrite.config';\r\n+\r\n+// --- Configuration ---\r\n+const DATABASE_ID = '682cc58b003717b8f2b8'; // <-- Replace with your actual database ID (e.g. 'campus_nexus_db')\r\n+const USER_PROFILES_COLLECTION_ID = '682cc598002c2ae4ffc8'; // Use the provided users collection ID\r\n+\r\n+class AppwriteAuthService {\r\n+    async register(userData) {\r\n+        const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n+\r\n+        try {            // Create the user account in Appwrite Auth with a valid userId            // Create a clean userId without special characters            // Generate a safe userId: use first letter of first name + lastname + random number            // Ensure the ID starts with a letter and contains only valid characters            const user = await account.create(\r\n+                ID.unique(),\r\n+                email,\r\n+                password,\r\n+                `${firstName} ${lastName}` // Name (optional)\r\n+            );\r\n+\r\n+            console.log('Appwrite Auth user created:', user);            // Create a session for the new user\r\n+            const session = await account.createSession(email, password);\r\n+            \r\n+            // The session is automatically handled by the Appwrite SDK\r\n+            // No need to manually set the session            // Create User Profile Document in the users collection (now authorized)            // Create User Profile Document with a unique ID\r\n+            const profileDocument = await databases.createDocument(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                ID.unique(), // Use Appwrite's ID.unique() for document ID\r\n+                {\r\n+                    user_id: user.$id, // Link profile to auth user\r\n+                    firstname: firstName,\r\n+                    lastname: lastName,\r\n+                    role: role,\r\n+                    studentID: studentId || null,\r\n+                    department: department || null,\r\n+                    email: email\r\n+                },\r\n+                [\r\n+                    Permission.read(Role.user(user.$id)),\r\n+                    Permission.write(Role.user(user.$id))\r\n+                ]\r\n+            );\r\n+\r\n+            console.log('User profile document created in Appwrite DB:', profileDocument);\r\n+\r\n+            return { authUser: user, userProfile: profileDocument };\r\n+\r\n+        } catch (error) {\r\n+            console.error('Appwrite Registration error:', error);\r\n+            if (error.code === 409) {\r\n+                 throw new Error('A user with this email already exists.');\r\n+            } else if (error.code === 400) {\r\n+                 // Appwrite gives specific messages for password/email format errors\r\n+                 throw new Error(`Registration failed: ${error.message || 'Invalid input.'}`);\r\n+            }\r\n+            // Handle other errors like network issues\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async login(email, password) {\r\n+        try {\r\n+            // Appwrite Auth Login (Create Session)\r\n+            // In the browser SDK, createEmailSession logs the user in and sets the session automatically.\r\n+            const session = await account.createEmailSession(email, password);\r\n+            console.log('User logged in successfully (Session created):', session);\r\n+\r\n+            // Get the User Account Details\r\n+            // account.get() fetches the currently logged-in user based on the active session.\r\n+            const user = await account.get();\r\n+            console.log('Current Appwrite Auth user fetched:', user);\r\n+\r\n+            if (!user) {\r\n+                 // This should rarely happen after a successful createEmailSession, but included for robustness.\r\n+                 await this.logout(); // Ensure logout if user data is missing\r\n+                 throw new Error('Login failed: Authentication successful, but user data could not be retrieved.');\r\n+            }\r\n+\r\n+            // Fetch the User's Profile from 'users' collection\r\n+            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n+            const profileResponse = await databases.listDocuments(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                [\r\n+                    // Query to find the profile where user_id equals the logged-in user's ID\r\n+                    Query.equal('user_id', user.$id),\r\n+                    // Optionally, limit to 1 result if you expect only one profile per user\r\n+                    Query.limit(1)\r\n+                ]\r\n+            );\r\n+\r\n+            const profileDocuments = profileResponse.documents;\r\n+            console.log('User profile documents fetched from Appwrite DB:', profileDocuments);\r\n+\r\n+            if (profileDocuments.length === 0) {\r\n+                 console.error('User profile document not found in Appwrite DB for user ID:', user.$id);\r\n+                 // If profile is not found, it might indicate an incomplete registration.\r\n+                 // Decide how to handle this - maybe log out or return partial data.\r\n+                 // For now, we'll log out and inform the user.\r\n+                 await this.logout();\r\n+                 throw new Error('Login failed: User profile missing. Please try registering again or contact support.');\r\n+            }\r\n+\r\n+            // Assuming one profile per user, take the first document\r\n+            const userProfile = profileDocuments[0];\r\n+\r\n+            // Return session, auth user data, and profile data\r\n+            // Note: Appwrite session handling might differ slightly from Supabase.\r\n+            // You might need to store the session token (session.providerAccessToken) in your app's state management.\r\n+            // However, createEmailSession in browser SDK usually handles session setting automatically.\r\n+            return { session: session, authUser: user, userProfile: userProfile };\r\n+\r\n+        } catch (error) {\r\n+            console.error('Appwrite Login error:', error);\r\n+            // Ensure logout on login failure\r\n+            try { await this.logout(); } catch (e) { /* ignore logout errors during login failure */ }\r\n+            // Handle specific Appwrite errors if needed (e.g., 401 for invalid credentials)\r\n+            if (error.code === 401) {\r\n+                 throw new Error('Invalid email or password.');\r\n+            }\r\n+            // Rethrow other errors\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async logout() {\r\n+        try {\r\n+            // Appwrite Auth Logout (Delete Current Session)\r\n+            // In the browser SDK, deleteSession('current') or deleteSession(sessionId)\r\n+            const result = await account.deleteSession('current'); // Deletes the 'current' active session\r\n+            console.log('User logged out successfully (Session deleted).');\r\n+            // You should also clear any stored session tokens on the client side (e.g., in localStorage, state management) if you were manually managing them.\r\n+            // Appwrite browser SDK handles session cookies/local storage automatically usually.\r\n+        } catch (error) {\r\n+            // Ignore errors if the user is already logged out or the session is invalid (e.g., 401)\r\n+            if (error.code === 401) {\r\n+                 console.log('Logout called, but no active session found (already logged out?).');\r\n+                 return;\r\n+            }\r\n+            console.error('Appwrite Logout error (non-401):', error);\r\n+            // Optionally rethrow if you want to handle other logout errors\r\n+            // throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async getCurrentUser() {\r\n+        try {\r\n+            // Get the Current Appwrite Auth User\r\n+            // account.get() checks for an active session and returns the user or throws 401.\r\n+            const user = await account.get();\r\n+            console.log('Current Appwrite Auth user fetched in getCurrentUser:', user);\r\n+\r\n+            if (!user) {\r\n+                return null; // No logged-in user or session expired/invalid\r\n+            }\r\n+\r\n+            // Fetch the User's Profile from 'users' collection\r\n+            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n+            const profileResponse = await databases.listDocuments(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                [Query.equal('user_id', user.$id)]\r\n+            );\r\n+\r\n+            const profileDocuments = profileResponse.documents;\r\n+            console.log('User profile documents fetched from Appwrite DB in getCurrentUser:', profileDocuments);\r\n+\r\n+            // Similar logic to login - handle missing profile\r\n+            if (profileDocuments.length === 0) {\r\n+                 console.warn('User profile document not found in Appwrite DB for logged-in user ID:', user.$id);\r\n+                 // Decide how to handle missing profile (e.g., log out, return partial data)\r\n+                 // For now, log out to ensure consistent state.\r\n+                 await this.logout(); // Logs out the user if their profile is somehow missing.\r\n+                 // Clear any local session storage if needed\r\n+                 // localStorage.removeItem('appwrite_session'); // Example\r\n+                 console.warn('Logged out due to missing profile in getCurrentUser.');\r\n+                 return null;\r\n+            }\r\n+\r\n+            const userProfile = profileDocuments[0]; // Get the first (and hopefully only) profile\r\n+\r\n+            // Return auth user data and profile data\r\n+            return { authUser: user, userProfile: userProfile };\r\n+\r\n+        } catch (error) {\r\n+            // Ignore 401 (Unauthorized) errors, as they likely mean the user is simply not logged in\r\n+            if (error.code === 401) {\r\n+                 console.log('getCurrentUser called, but no active session found (not logged in).');\r\n+                 return null;\r\n+            }\r\n+            console.error('Appwrite getCurrentUser error (non-401):', error);\r\n+            // Handle other potential errors (e.g., network issues) - maybe return null or partial data\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    // --- Placeholder for Profile Update (Implement as needed) ---\r\n+    // async updateUserProfile(userId, dataToUpdate) {\r\n+    //     try {\r\n+    //         // 1. Find the profile document ID for the given userId (user_id)\r\n+    //         const profileResponse = await databases.listDocuments(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             [Query.equal('user_id', userId)]\r\n+    //         );\r\n+    //         const profileDoc = profileResponse.documents[0];\r\n+    //         if (!profileDoc) throw new Error('Profile not found for update.');\r\n+    //\r\n+    //         // 2. Update the document\r\n+    //         const updatedDoc = await databases.updateDocument(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             profileDoc.$id, // Use the document's unique ID\r\n+    //             dataToUpdate // Ensure dataToUpdate matches your collection's attributes\r\n+    //         );\r\n+    //         console.log('User profile updated in Appwrite DB:', updatedDoc);\r\n+    //         return updatedDoc;\r\n+    //     } catch (error) {\r\n+    //         console.error('Appwrite updateUserProfile error:', error);\r\n+    //         throw error;\r\n+    //     }\r\n+    // }\r\n+\r\n+\r\n+    // --- Placeholder for Fetching Profile (Implement if needed elsewhere) ---\r\n+    // async getUserProfileFromDB(userId) {\r\n+    //     try {\r\n+    //         const profileResponse = await databases.listDocuments(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             [Query.equal('user_id', userId)]\r\n+    //         );\r\n+    //         const profileDoc = profileResponse.documents[0];\r\n+    //         if (!profileDoc) {\r\n+    //              console.warn('User profile not found in Appwrite DB for user ID:', userId);\r\n+    //              return null;\r\n+    //         }\r\n+    //         console.log('User profile fetched from Appwrite DB (getUserProfileFromDB):', profileDoc);\r\n+    //         return profileDoc;\r\n+    //     } catch (error) {\r\n+    //          console.error('Appwrite getUserProfileFromDB error:', error);\r\n+    //          throw error;\r\n+    //     }\r\n+    // }\r\n+}\r\n+\r\n+export const appwriteAuthService = new AppwriteAuthService();\r\n+export default appwriteAuthService; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747817017436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,259 +8,8 @@\n class AppwriteAuthService {\r\n     async register(userData) {\r\n         const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n \r\n-        try {            // Create the user account in Appwrite Auth with a valid userId            // Create a clean userId without special characters            // Generate a safe userId: use first letter of first name + lastname + random number            // Ensure the ID starts with a letter and contains only valid characters            const user = await account.create(\r\n-                ID.unique(),\r\n-                email,\r\n-                password,\r\n-                `${firstName} ${lastName}` // Name (optional)\r\n-            );\r\n-\r\n-            console.log('Appwrite Auth user created:', user);            // Create a session for the new user\r\n-            const session = await account.createSession(email, password);\r\n-            \r\n-            // The session is automatically handled by the Appwrite SDK\r\n-            // No need to manually set the session            // Create User Profile Document in the users collection (now authorized)            // Create User Profile Document with a unique ID\r\n-            const profileDocument = await databases.createDocument(\r\n-                DATABASE_ID,\r\n-                USER_PROFILES_COLLECTION_ID,\r\n-                ID.unique(), // Use Appwrite's ID.unique() for document ID\r\n-                {\r\n-                    user_id: user.$id, // Link profile to auth user\r\n-                    firstname: firstName,\r\n-                    lastname: lastName,\r\n-                    role: role,\r\n-                    studentID: studentId || null,\r\n-                    department: department || null,\r\n-                    email: email\r\n-                },\r\n-                [\r\n-                    Permission.read(Role.user(user.$id)),\r\n-                    Permission.write(Role.user(user.$id))\r\n-                ]\r\n-            );\r\n-\r\n-            console.log('User profile document created in Appwrite DB:', profileDocument);\r\n-\r\n-            return { authUser: user, userProfile: profileDocument };\r\n-\r\n-        } catch (error) {\r\n-            console.error('Appwrite Registration error:', error);\r\n-            if (error.code === 409) {\r\n-                 throw new Error('A user with this email already exists.');\r\n-            } else if (error.code === 400) {\r\n-                 // Appwrite gives specific messages for password/email format errors\r\n-                 throw new Error(`Registration failed: ${error.message || 'Invalid input.'}`);\r\n-            }\r\n-            // Handle other errors like network issues\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async login(email, password) {\r\n-        try {\r\n-            // Appwrite Auth Login (Create Session)\r\n-            // In the browser SDK, createEmailSession logs the user in and sets the session automatically.\r\n-            const session = await account.createEmailSession(email, password);\r\n-            console.log('User logged in successfully (Session created):', session);\r\n-\r\n-            // Get the User Account Details\r\n-            // account.get() fetches the currently logged-in user based on the active session.\r\n-            const user = await account.get();\r\n-            console.log('Current Appwrite Auth user fetched:', user);\r\n-\r\n-            if (!user) {\r\n-                 // This should rarely happen after a successful createEmailSession, but included for robustness.\r\n-                 await this.logout(); // Ensure logout if user data is missing\r\n-                 throw new Error('Login failed: Authentication successful, but user data could not be retrieved.');\r\n-            }\r\n-\r\n-            // Fetch the User's Profile from 'users' collection\r\n-            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n-            const profileResponse = await databases.listDocuments(\r\n-                DATABASE_ID,\r\n-                USER_PROFILES_COLLECTION_ID,\r\n-                [\r\n-                    // Query to find the profile where user_id equals the logged-in user's ID\r\n-                    Query.equal('user_id', user.$id),\r\n-                    // Optionally, limit to 1 result if you expect only one profile per user\r\n-                    Query.limit(1)\r\n-                ]\r\n-            );\r\n-\r\n-            const profileDocuments = profileResponse.documents;\r\n-            console.log('User profile documents fetched from Appwrite DB:', profileDocuments);\r\n-\r\n-            if (profileDocuments.length === 0) {\r\n-                 console.error('User profile document not found in Appwrite DB for user ID:', user.$id);\r\n-                 // If profile is not found, it might indicate an incomplete registration.\r\n-                 // Decide how to handle this - maybe log out or return partial data.\r\n-                 // For now, we'll log out and inform the user.\r\n-                 await this.logout();\r\n-                 throw new Error('Login failed: User profile missing. Please try registering again or contact support.');\r\n-            }\r\n-\r\n-            // Assuming one profile per user, take the first document\r\n-            const userProfile = profileDocuments[0];\r\n-\r\n-            // Return session, auth user data, and profile data\r\n-            // Note: Appwrite session handling might differ slightly from Supabase.\r\n-            // You might need to store the session token (session.providerAccessToken) in your app's state management.\r\n-            // However, createEmailSession in browser SDK usually handles session setting automatically.\r\n-            return { session: session, authUser: user, userProfile: userProfile };\r\n-\r\n-        } catch (error) {\r\n-            console.error('Appwrite Login error:', error);\r\n-            // Ensure logout on login failure\r\n-            try { await this.logout(); } catch (e) { /* ignore logout errors during login failure */ }\r\n-            // Handle specific Appwrite errors if needed (e.g., 401 for invalid credentials)\r\n-            if (error.code === 401) {\r\n-                 throw new Error('Invalid email or password.');\r\n-            }\r\n-            // Rethrow other errors\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async logout() {\r\n-        try {\r\n-            // Appwrite Auth Logout (Delete Current Session)\r\n-            // In the browser SDK, deleteSession('current') or deleteSession(sessionId)\r\n-            const result = await account.deleteSession('current'); // Deletes the 'current' active session\r\n-            console.log('User logged out successfully (Session deleted).');\r\n-            // You should also clear any stored session tokens on the client side (e.g., in localStorage, state management) if you were manually managing them.\r\n-            // Appwrite browser SDK handles session cookies/local storage automatically usually.\r\n-        } catch (error) {\r\n-            // Ignore errors if the user is already logged out or the session is invalid (e.g., 401)\r\n-            if (error.code === 401) {\r\n-                 console.log('Logout called, but no active session found (already logged out?).');\r\n-                 return;\r\n-            }\r\n-            console.error('Appwrite Logout error (non-401):', error);\r\n-            // Optionally rethrow if you want to handle other logout errors\r\n-            // throw error;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async getCurrentUser() {\r\n-        try {\r\n-            // Get the Current Appwrite Auth User\r\n-            // account.get() checks for an active session and returns the user or throws 401.\r\n-            const user = await account.get();\r\n-            console.log('Current Appwrite Auth user fetched in getCurrentUser:', user);\r\n-\r\n-            if (!user) {\r\n-                return null; // No logged-in user or session expired/invalid\r\n-            }\r\n-\r\n-            // Fetch the User's Profile from 'users' collection\r\n-            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n-            const profileResponse = await databases.listDocuments(\r\n-                DATABASE_ID,\r\n-                USER_PROFILES_COLLECTION_ID,\r\n-                [Query.equal('user_id', user.$id)]\r\n-            );\r\n-\r\n-            const profileDocuments = profileResponse.documents;\r\n-            console.log('User profile documents fetched from Appwrite DB in getCurrentUser:', profileDocuments);\r\n-\r\n-            // Similar logic to login - handle missing profile\r\n-            if (profileDocuments.length === 0) {\r\n-                 console.warn('User profile document not found in Appwrite DB for logged-in user ID:', user.$id);\r\n-                 // Decide how to handle missing profile (e.g., log out, return partial data)\r\n-                 // For now, log out to ensure consistent state.\r\n-                 await this.logout(); // Logs out the user if their profile is somehow missing.\r\n-                 // Clear any local session storage if needed\r\n-                 // localStorage.removeItem('appwrite_session'); // Example\r\n-                 console.warn('Logged out due to missing profile in getCurrentUser.');\r\n-                 return null;\r\n-            }\r\n-\r\n-            const userProfile = profileDocuments[0]; // Get the first (and hopefully only) profile\r\n-\r\n-            // Return auth user data and profile data\r\n-            return { authUser: user, userProfile: userProfile };\r\n-\r\n-        } catch (error) {\r\n-            // Ignore 401 (Unauthorized) errors, as they likely mean the user is simply not logged in\r\n-            if (error.code === 401) {\r\n-                 console.log('getCurrentUser called, but no active session found (not logged in).');\r\n-                 return null;\r\n-            }\r\n-            console.error('Appwrite getCurrentUser error (non-401):', error);\r\n-            // Handle other potential errors (e.g., network issues) - maybe return null or partial data\r\n-            return null;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    // --- Placeholder for Profile Update (Implement as needed) ---\r\n-    // async updateUserProfile(userId, dataToUpdate) {\r\n-    //     try {\r\n-    //         // 1. Find the profile document ID for the given userId (user_id)\r\n-    //         const profileResponse = await databases.listDocuments(\r\n-    //             DATABASE_ID,\r\n-    //             USER_PROFILES_COLLECTION_ID,\r\n-    //             [Query.equal('user_id', userId)]\r\n-    //         );\r\n-    //         const profileDoc = profileResponse.documents[0];\r\n-    //         if (!profileDoc) throw new Error('Profile not found for update.');\r\n-    //\r\n-    //         // 2. Update the document\r\n-    //         const updatedDoc = await databases.updateDocument(\r\n-    //             DATABASE_ID,\r\n-    //             USER_PROFILES_COLLECTION_ID,\r\n-    //             profileDoc.$id, // Use the document's unique ID\r\n-    //             dataToUpdate // Ensure dataToUpdate matches your collection's attributes\r\n-    //         );\r\n-    //         console.log('User profile updated in Appwrite DB:', updatedDoc);\r\n-    //         return updatedDoc;\r\n-    //     } catch (error) {\r\n-    //         console.error('Appwrite updateUserProfile error:', error);\r\n-    //         throw error;\r\n-    //     }\r\n-    // }\r\n-\r\n-\r\n-    // --- Placeholder for Fetching Profile (Implement if needed elsewhere) ---\r\n-    // async getUserProfileFromDB(userId) {\r\n-    //     try {\r\n-    //         const profileResponse = await databases.listDocuments(\r\n-    //             DATABASE_ID,\r\n-    //             USER_PROFILES_COLLECTION_ID,\r\n-    //             [Query.equal('user_id', userId)]\r\n-    //         );\r\n-    //         const profileDoc = profileResponse.documents[0];\r\n-    //         if (!profileDoc) {\r\n-    //              console.warn('User profile not found in Appwrite DB for user ID:', userId);\r\n-    //              return null;\r\n-    //         }\r\n-    //         console.log('User profile fetched from Appwrite DB (getUserProfileFromDB):', profileDoc);\r\n-    //         return profileDoc;\r\n-    //     } catch (error) {\r\n-    //          console.error('Appwrite getUserProfileFromDB error:', error);\r\n-    //          throw error;\r\n-    //     }\r\n-    // }\r\n-}\r\n-\r\n-export const appwriteAuthService = new AppwriteAuthService();\r\n-export default appwriteAuthService; \n-import { ID, Query, Permission, Role } from 'appwrite';\r\n-import { account, databases, client } from '../config/appwrite.config';\r\n-\r\n-// --- Configuration ---\r\n-const DATABASE_ID = '682cc58b003717b8f2b8'; // <-- Replace with your actual database ID (e.g. 'campus_nexus_db')\r\n-const USER_PROFILES_COLLECTION_ID = '682cc598002c2ae4ffc8'; // Use the provided users collection ID\r\n-\r\n-class AppwriteAuthService {\r\n-    async register(userData) {\r\n-        const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n-\r\n         try {            // Create the user account in Appwrite Auth with a valid userId            // Create a clean userId without special characters            // Generate a safe userId: use first letter of first name + lastname + random number            // Ensure the ID starts with a letter and contains only valid characters\r\n             const sanitizedFirstName = firstName.toLowerCase().replace(/[^a-z]/g, '').charAt(0) || 'u';\r\n             const sanitizedLastName = lastName.toLowerCase().replace(/[^a-z0-9]/g, '').slice(0, 15) || 'user';\r\n             const timestamp = Date.now().toString().slice(-4);\r\n@@ -504,262 +253,5 @@\n     // }\r\n }\r\n \r\n export const appwriteAuthService = new AppwriteAuthService();\r\n-export default appwriteAuthService; \n-import { ID, Query, Permission, Role } from 'appwrite';\r\n-import { account, databases, client } from '../config/appwrite.config';\r\n-\r\n-// --- Configuration ---\r\n-const DATABASE_ID = '682cc58b003717b8f2b8'; // <-- Replace with your actual database ID (e.g. 'campus_nexus_db')\r\n-const USER_PROFILES_COLLECTION_ID = '682cc598002c2ae4ffc8'; // Use the provided users collection ID\r\n-\r\n-class AppwriteAuthService {\r\n-    async register(userData) {\r\n-        const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n-\r\n-        try {            // Create the user account in Appwrite Auth with a valid userId            // Create a clean userId without special characters            // Generate a safe userId: use first letter of first name + lastname + random number\r\n-            const safeFirstName = firstName.toLowerCase().replace(/[^a-z0-9]/g, '').charAt(0);\r\n-            const safeLastName = lastName.toLowerCase().replace(/[^a-z0-9]/g, '');\r\n-            const randomNum = Math.floor(Math.random() * 10000).toString().padStart(4, '0');\r\n-            const userId = `${safeFirstName}${safeLastName}${randomNum}`;\r\n-            \r\n-            const user = await account.create(\r\n-                userId,\r\n-                email,\r\n-                password,\r\n-                `${firstName} ${lastName}` // Name (optional)\r\n-            );\r\n-\r\n-            console.log('Appwrite Auth user created:', user);            // Create a session for the new user\r\n-            const session = await account.createSession(email, password);\r\n-            \r\n-            // The session is automatically handled by the Appwrite SDK\r\n-            // No need to manually set the session            // Create User Profile Document in the users collection (now authorized)            // Create User Profile Document with a unique ID\r\n-            const profileDocument = await databases.createDocument(\r\n-                DATABASE_ID,\r\n-                USER_PROFILES_COLLECTION_ID,\r\n-                ID.unique(), // Use Appwrite's ID.unique() for document ID\r\n-                {\r\n-                    user_id: user.$id, // Link profile to auth user\r\n-                    firstname: firstName,\r\n-                    lastname: lastName,\r\n-                    role: role,\r\n-                    studentID: studentId || null,\r\n-                    department: department || null,\r\n-                    email: email\r\n-                },\r\n-                [\r\n-                    Permission.read(Role.user(user.$id)),\r\n-                    Permission.write(Role.user(user.$id))\r\n-                ]\r\n-            );\r\n-\r\n-            console.log('User profile document created in Appwrite DB:', profileDocument);\r\n-\r\n-            return { authUser: user, userProfile: profileDocument };\r\n-\r\n-        } catch (error) {\r\n-            console.error('Appwrite Registration error:', error);\r\n-            if (error.code === 409) {\r\n-                 throw new Error('A user with this email already exists.');\r\n-            } else if (error.code === 400) {\r\n-                 // Appwrite gives specific messages for password/email format errors\r\n-                 throw new Error(`Registration failed: ${error.message || 'Invalid input.'}`);\r\n-            }\r\n-            // Handle other errors like network issues\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async login(email, password) {\r\n-        try {\r\n-            // Appwrite Auth Login (Create Session)\r\n-            // In the browser SDK, createEmailSession logs the user in and sets the session automatically.\r\n-            const session = await account.createEmailSession(email, password);\r\n-            console.log('User logged in successfully (Session created):', session);\r\n-\r\n-            // Get the User Account Details\r\n-            // account.get() fetches the currently logged-in user based on the active session.\r\n-            const user = await account.get();\r\n-            console.log('Current Appwrite Auth user fetched:', user);\r\n-\r\n-            if (!user) {\r\n-                 // This should rarely happen after a successful createEmailSession, but included for robustness.\r\n-                 await this.logout(); // Ensure logout if user data is missing\r\n-                 throw new Error('Login failed: Authentication successful, but user data could not be retrieved.');\r\n-            }\r\n-\r\n-            // Fetch the User's Profile from 'users' collection\r\n-            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n-            const profileResponse = await databases.listDocuments(\r\n-                DATABASE_ID,\r\n-                USER_PROFILES_COLLECTION_ID,\r\n-                [\r\n-                    // Query to find the profile where user_id equals the logged-in user's ID\r\n-                    Query.equal('user_id', user.$id),\r\n-                    // Optionally, limit to 1 result if you expect only one profile per user\r\n-                    Query.limit(1)\r\n-                ]\r\n-            );\r\n-\r\n-            const profileDocuments = profileResponse.documents;\r\n-            console.log('User profile documents fetched from Appwrite DB:', profileDocuments);\r\n-\r\n-            if (profileDocuments.length === 0) {\r\n-                 console.error('User profile document not found in Appwrite DB for user ID:', user.$id);\r\n-                 // If profile is not found, it might indicate an incomplete registration.\r\n-                 // Decide how to handle this - maybe log out or return partial data.\r\n-                 // For now, we'll log out and inform the user.\r\n-                 await this.logout();\r\n-                 throw new Error('Login failed: User profile missing. Please try registering again or contact support.');\r\n-            }\r\n-\r\n-            // Assuming one profile per user, take the first document\r\n-            const userProfile = profileDocuments[0];\r\n-\r\n-            // Return session, auth user data, and profile data\r\n-            // Note: Appwrite session handling might differ slightly from Supabase.\r\n-            // You might need to store the session token (session.providerAccessToken) in your app's state management.\r\n-            // However, createEmailSession in browser SDK usually handles session setting automatically.\r\n-            return { session: session, authUser: user, userProfile: userProfile };\r\n-\r\n-        } catch (error) {\r\n-            console.error('Appwrite Login error:', error);\r\n-            // Ensure logout on login failure\r\n-            try { await this.logout(); } catch (e) { /* ignore logout errors during login failure */ }\r\n-            // Handle specific Appwrite errors if needed (e.g., 401 for invalid credentials)\r\n-            if (error.code === 401) {\r\n-                 throw new Error('Invalid email or password.');\r\n-            }\r\n-            // Rethrow other errors\r\n-            throw error;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async logout() {\r\n-        try {\r\n-            // Appwrite Auth Logout (Delete Current Session)\r\n-            // In the browser SDK, deleteSession('current') or deleteSession(sessionId)\r\n-            const result = await account.deleteSession('current'); // Deletes the 'current' active session\r\n-            console.log('User logged out successfully (Session deleted).');\r\n-            // You should also clear any stored session tokens on the client side (e.g., in localStorage, state management) if you were manually managing them.\r\n-            // Appwrite browser SDK handles session cookies/local storage automatically usually.\r\n-        } catch (error) {\r\n-            // Ignore errors if the user is already logged out or the session is invalid (e.g., 401)\r\n-            if (error.code === 401) {\r\n-                 console.log('Logout called, but no active session found (already logged out?).');\r\n-                 return;\r\n-            }\r\n-            console.error('Appwrite Logout error (non-401):', error);\r\n-            // Optionally rethrow if you want to handle other logout errors\r\n-            // throw error;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async getCurrentUser() {\r\n-        try {\r\n-            // Get the Current Appwrite Auth User\r\n-            // account.get() checks for an active session and returns the user or throws 401.\r\n-            const user = await account.get();\r\n-            console.log('Current Appwrite Auth user fetched in getCurrentUser:', user);\r\n-\r\n-            if (!user) {\r\n-                return null; // No logged-in user or session expired/invalid\r\n-            }\r\n-\r\n-            // Fetch the User's Profile from 'users' collection\r\n-            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n-            const profileResponse = await databases.listDocuments(\r\n-                DATABASE_ID,\r\n-                USER_PROFILES_COLLECTION_ID,\r\n-                [Query.equal('user_id', user.$id)]\r\n-            );\r\n-\r\n-            const profileDocuments = profileResponse.documents;\r\n-            console.log('User profile documents fetched from Appwrite DB in getCurrentUser:', profileDocuments);\r\n-\r\n-            // Similar logic to login - handle missing profile\r\n-            if (profileDocuments.length === 0) {\r\n-                 console.warn('User profile document not found in Appwrite DB for logged-in user ID:', user.$id);\r\n-                 // Decide how to handle missing profile (e.g., log out, return partial data)\r\n-                 // For now, log out to ensure consistent state.\r\n-                 await this.logout(); // Logs out the user if their profile is somehow missing.\r\n-                 // Clear any local session storage if needed\r\n-                 // localStorage.removeItem('appwrite_session'); // Example\r\n-                 console.warn('Logged out due to missing profile in getCurrentUser.');\r\n-                 return null;\r\n-            }\r\n-\r\n-            const userProfile = profileDocuments[0]; // Get the first (and hopefully only) profile\r\n-\r\n-            // Return auth user data and profile data\r\n-            return { authUser: user, userProfile: userProfile };\r\n-\r\n-        } catch (error) {\r\n-            // Ignore 401 (Unauthorized) errors, as they likely mean the user is simply not logged in\r\n-            if (error.code === 401) {\r\n-                 console.log('getCurrentUser called, but no active session found (not logged in).');\r\n-                 return null;\r\n-            }\r\n-            console.error('Appwrite getCurrentUser error (non-401):', error);\r\n-            // Handle other potential errors (e.g., network issues) - maybe return null or partial data\r\n-            return null;\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    // --- Placeholder for Profile Update (Implement as needed) ---\r\n-    // async updateUserProfile(userId, dataToUpdate) {\r\n-    //     try {\r\n-    //         // 1. Find the profile document ID for the given userId (user_id)\r\n-    //         const profileResponse = await databases.listDocuments(\r\n-    //             DATABASE_ID,\r\n-    //             USER_PROFILES_COLLECTION_ID,\r\n-    //             [Query.equal('user_id', userId)]\r\n-    //         );\r\n-    //         const profileDoc = profileResponse.documents[0];\r\n-    //         if (!profileDoc) throw new Error('Profile not found for update.');\r\n-    //\r\n-    //         // 2. Update the document\r\n-    //         const updatedDoc = await databases.updateDocument(\r\n-    //             DATABASE_ID,\r\n-    //             USER_PROFILES_COLLECTION_ID,\r\n-    //             profileDoc.$id, // Use the document's unique ID\r\n-    //             dataToUpdate // Ensure dataToUpdate matches your collection's attributes\r\n-    //         );\r\n-    //         console.log('User profile updated in Appwrite DB:', updatedDoc);\r\n-    //         return updatedDoc;\r\n-    //     } catch (error) {\r\n-    //         console.error('Appwrite updateUserProfile error:', error);\r\n-    //         throw error;\r\n-    //     }\r\n-    // }\r\n-\r\n-\r\n-    // --- Placeholder for Fetching Profile (Implement if needed elsewhere) ---\r\n-    // async getUserProfileFromDB(userId) {\r\n-    //     try {\r\n-    //         const profileResponse = await databases.listDocuments(\r\n-    //             DATABASE_ID,\r\n-    //             USER_PROFILES_COLLECTION_ID,\r\n-    //             [Query.equal('user_id', userId)]\r\n-    //         );\r\n-    //         const profileDoc = profileResponse.documents[0];\r\n-    //         if (!profileDoc) {\r\n-    //              console.warn('User profile not found in Appwrite DB for user ID:', userId);\r\n-    //              return null;\r\n-    //         }\r\n-    //         console.log('User profile fetched from Appwrite DB (getUserProfileFromDB):', profileDoc);\r\n-    //         return profileDoc;\r\n-    //     } catch (error) {\r\n-    //          console.error('Appwrite getUserProfileFromDB error:', error);\r\n-    //          throw error;\r\n-    //     }\r\n-    // }\r\n-}\r\n-\r\n-export const appwriteAuthService = new AppwriteAuthService();\r\n export default appwriteAuthService; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747817108570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,251 @@\n+import { ID, Query, Permission, Role } from 'appwrite';\r\n+import { account, databases, client } from '../config/appwrite.config';\r\n+\r\n+// --- Configuration ---\r\n+const DATABASE_ID = '682cc58b003717b8f2b8'; // <-- Replace with your actual database ID (e.g. 'campus_nexus_db')\r\n+const USER_PROFILES_COLLECTION_ID = '682cc598002c2ae4ffc8'; // Use the provided users collection ID\r\n+\r\n+class AppwriteAuthService {\r\n+    async register(userData) {\r\n+        const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n+\r\n+        try {            // Create the user account in Appwrite Auth with a valid userId            // Create a clean userId without special characters            // Generate a safe userId: use first letter of first name + lastname + random number            // Ensure the ID starts with a letter and contains only valid characters            const user = await account.create(\r\n+                ID.unique(),\r\n+                email,\r\n+                password,\r\n+                `${firstName} ${lastName}` // Name (optional)\r\n+            );\r\n+\r\n+            console.log('Appwrite Auth user created:', user);            // Create a session for the new user\r\n+            const session = await account.createSession(email, password);\r\n+            \r\n+            // The session is automatically handled by the Appwrite SDK\r\n+            // No need to manually set the session            // Create User Profile Document in the users collection (now authorized)            // Create User Profile Document with a unique ID\r\n+            const profileDocument = await databases.createDocument(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                ID.unique(), // Use Appwrite's ID.unique() for document ID\r\n+                {\r\n+                    user_id: user.$id, // Link profile to auth user\r\n+                    firstname: firstName,\r\n+                    lastname: lastName,\r\n+                    role: role,\r\n+                    studentID: studentId || null,\r\n+                    department: department || null,\r\n+                    email: email\r\n+                },\r\n+                [\r\n+                    Permission.read(Role.user(user.$id)),\r\n+                    Permission.write(Role.user(user.$id))\r\n+                ]\r\n+            );\r\n+\r\n+            console.log('User profile document created in Appwrite DB:', profileDocument);\r\n+\r\n+            return { authUser: user, userProfile: profileDocument };\r\n+\r\n+        } catch (error) {\r\n+            console.error('Appwrite Registration error:', error);\r\n+            if (error.code === 409) {\r\n+                 throw new Error('A user with this email already exists.');\r\n+            } else if (error.code === 400) {\r\n+                 // Appwrite gives specific messages for password/email format errors\r\n+                 throw new Error(`Registration failed: ${error.message || 'Invalid input.'}`);\r\n+            }\r\n+            // Handle other errors like network issues\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async login(email, password) {\r\n+        try {\r\n+            // Appwrite Auth Login (Create Session)\r\n+            // In the browser SDK, createEmailSession logs the user in and sets the session automatically.\r\n+            const session = await account.createEmailSession(email, password);\r\n+            console.log('User logged in successfully (Session created):', session);\r\n+\r\n+            // Get the User Account Details\r\n+            // account.get() fetches the currently logged-in user based on the active session.\r\n+            const user = await account.get();\r\n+            console.log('Current Appwrite Auth user fetched:', user);\r\n+\r\n+            if (!user) {\r\n+                 // This should rarely happen after a successful createEmailSession, but included for robustness.\r\n+                 await this.logout(); // Ensure logout if user data is missing\r\n+                 throw new Error('Login failed: Authentication successful, but user data could not be retrieved.');\r\n+            }\r\n+\r\n+            // Fetch the User's Profile from 'users' collection\r\n+            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n+            const profileResponse = await databases.listDocuments(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                [\r\n+                    // Query to find the profile where user_id equals the logged-in user's ID\r\n+                    Query.equal('user_id', user.$id),\r\n+                    // Optionally, limit to 1 result if you expect only one profile per user\r\n+                    Query.limit(1)\r\n+                ]\r\n+            );\r\n+\r\n+            const profileDocuments = profileResponse.documents;\r\n+            console.log('User profile documents fetched from Appwrite DB:', profileDocuments);\r\n+\r\n+            if (profileDocuments.length === 0) {\r\n+                 console.error('User profile document not found in Appwrite DB for user ID:', user.$id);\r\n+                 // If profile is not found, it might indicate an incomplete registration.\r\n+                 // Decide how to handle this - maybe log out or return partial data.\r\n+                 // For now, we'll log out and inform the user.\r\n+                 await this.logout();\r\n+                 throw new Error('Login failed: User profile missing. Please try registering again or contact support.');\r\n+            }\r\n+\r\n+            // Assuming one profile per user, take the first document\r\n+            const userProfile = profileDocuments[0];\r\n+\r\n+            // Return session, auth user data, and profile data\r\n+            // Note: Appwrite session handling might differ slightly from Supabase.\r\n+            // You might need to store the session token (session.providerAccessToken) in your app's state management.\r\n+            // However, createEmailSession in browser SDK usually handles session setting automatically.\r\n+            return { session: session, authUser: user, userProfile: userProfile };\r\n+\r\n+        } catch (error) {\r\n+            console.error('Appwrite Login error:', error);\r\n+            // Ensure logout on login failure\r\n+            try { await this.logout(); } catch (e) { /* ignore logout errors during login failure */ }\r\n+            // Handle specific Appwrite errors if needed (e.g., 401 for invalid credentials)\r\n+            if (error.code === 401) {\r\n+                 throw new Error('Invalid email or password.');\r\n+            }\r\n+            // Rethrow other errors\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async logout() {\r\n+        try {\r\n+            // Appwrite Auth Logout (Delete Current Session)\r\n+            // In the browser SDK, deleteSession('current') or deleteSession(sessionId)\r\n+            const result = await account.deleteSession('current'); // Deletes the 'current' active session\r\n+            console.log('User logged out successfully (Session deleted).');\r\n+            // You should also clear any stored session tokens on the client side (e.g., in localStorage, state management) if you were manually managing them.\r\n+            // Appwrite browser SDK handles session cookies/local storage automatically usually.\r\n+        } catch (error) {\r\n+            // Ignore errors if the user is already logged out or the session is invalid (e.g., 401)\r\n+            if (error.code === 401) {\r\n+                 console.log('Logout called, but no active session found (already logged out?).');\r\n+                 return;\r\n+            }\r\n+            console.error('Appwrite Logout error (non-401):', error);\r\n+            // Optionally rethrow if you want to handle other logout errors\r\n+            // throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async getCurrentUser() {\r\n+        try {\r\n+            // Get the Current Appwrite Auth User\r\n+            // account.get() checks for an active session and returns the user or throws 401.\r\n+            const user = await account.get();\r\n+            console.log('Current Appwrite Auth user fetched in getCurrentUser:', user);\r\n+\r\n+            if (!user) {\r\n+                return null; // No logged-in user or session expired/invalid\r\n+            }\r\n+\r\n+            // Fetch the User's Profile from 'users' collection\r\n+            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n+            const profileResponse = await databases.listDocuments(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                [Query.equal('user_id', user.$id)]\r\n+            );\r\n+\r\n+            const profileDocuments = profileResponse.documents;\r\n+            console.log('User profile documents fetched from Appwrite DB in getCurrentUser:', profileDocuments);\r\n+\r\n+            // Similar logic to login - handle missing profile\r\n+            if (profileDocuments.length === 0) {\r\n+                 console.warn('User profile document not found in Appwrite DB for logged-in user ID:', user.$id);\r\n+                 // Decide how to handle missing profile (e.g., log out, return partial data)\r\n+                 // For now, log out to ensure consistent state.\r\n+                 await this.logout(); // Logs out the user if their profile is somehow missing.\r\n+                 // Clear any local session storage if needed\r\n+                 // localStorage.removeItem('appwrite_session'); // Example\r\n+                 console.warn('Logged out due to missing profile in getCurrentUser.');\r\n+                 return null;\r\n+            }\r\n+\r\n+            const userProfile = profileDocuments[0]; // Get the first (and hopefully only) profile\r\n+\r\n+            // Return auth user data and profile data\r\n+            return { authUser: user, userProfile: userProfile };\r\n+\r\n+        } catch (error) {\r\n+            // Ignore 401 (Unauthorized) errors, as they likely mean the user is simply not logged in\r\n+            if (error.code === 401) {\r\n+                 console.log('getCurrentUser called, but no active session found (not logged in).');\r\n+                 return null;\r\n+            }\r\n+            console.error('Appwrite getCurrentUser error (non-401):', error);\r\n+            // Handle other potential errors (e.g., network issues) - maybe return null or partial data\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    // --- Placeholder for Profile Update (Implement as needed) ---\r\n+    // async updateUserProfile(userId, dataToUpdate) {\r\n+    //     try {\r\n+    //         // 1. Find the profile document ID for the given userId (user_id)\r\n+    //         const profileResponse = await databases.listDocuments(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             [Query.equal('user_id', userId)]\r\n+    //         );\r\n+    //         const profileDoc = profileResponse.documents[0];\r\n+    //         if (!profileDoc) throw new Error('Profile not found for update.');\r\n+    //\r\n+    //         // 2. Update the document\r\n+    //         const updatedDoc = await databases.updateDocument(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             profileDoc.$id, // Use the document's unique ID\r\n+    //             dataToUpdate // Ensure dataToUpdate matches your collection's attributes\r\n+    //         );\r\n+    //         console.log('User profile updated in Appwrite DB:', updatedDoc);\r\n+    //         return updatedDoc;\r\n+    //     } catch (error) {\r\n+    //         console.error('Appwrite updateUserProfile error:', error);\r\n+    //         throw error;\r\n+    //     }\r\n+    // }\r\n+\r\n+\r\n+    // --- Placeholder for Fetching Profile (Implement if needed elsewhere) ---\r\n+    // async getUserProfileFromDB(userId) {\r\n+    //     try {\r\n+    //         const profileResponse = await databases.listDocuments(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             [Query.equal('user_id', userId)]\r\n+    //         );\r\n+    //         const profileDoc = profileResponse.documents[0];\r\n+    //         if (!profileDoc) {\r\n+    //              console.warn('User profile not found in Appwrite DB for user ID:', userId);\r\n+    //              return null;\r\n+    //         }\r\n+    //         console.log('User profile fetched from Appwrite DB (getUserProfileFromDB):', profileDoc);\r\n+    //         return profileDoc;\r\n+    //     } catch (error) {\r\n+    //          console.error('Appwrite getUserProfileFromDB error:', error);\r\n+    //          throw error;\r\n+    //     }\r\n+    // }\r\n+}\r\n+\r\n+export const appwriteAuthService = new AppwriteAuthService();\r\n+export default appwriteAuthService; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747817115206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,257 @@\n+import { ID, Query, Permission, Role } from 'appwrite';\r\n+import { account, databases, client } from '../config/appwrite.config';\r\n+\r\n+// --- Configuration ---\r\n+const DATABASE_ID = '682cc58b003717b8f2b8'; // <-- Replace with your actual database ID (e.g. 'campus_nexus_db')\r\n+const USER_PROFILES_COLLECTION_ID = '682cc598002c2ae4ffc8'; // Use the provided users collection ID\r\n+\r\n+class AppwriteAuthService {\r\n+    async register(userData) {\r\n+        const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n+\r\n+        try {            // Create the user account in Appwrite Auth with a valid userId            // Create a clean userId without special characters            // Generate a safe userId: use first letter of first name + lastname + random number            // Ensure the ID starts with a letter and contains only valid characters\r\n+            const sanitizedFirstName = firstName.toLowerCase().replace(/[^a-z]/g, '').charAt(0) || 'u';\r\n+            const sanitizedLastName = lastName.toLowerCase().replace(/[^a-z0-9]/g, '').slice(0, 15) || 'user';\r\n+            const timestamp = Date.now().toString().slice(-4);\r\n+            const userId = `${sanitizedFirstName}${sanitizedLastName}${timestamp}`;\r\n+            \r\n+            const user = await account.create(\r\n+                userId,\r\n+                email,\r\n+                password,\r\n+                `${firstName} ${lastName}` // Name (optional)\r\n+            );\r\n+\r\n+            console.log('Appwrite Auth user created:', user);            // Create a session for the new user\r\n+            const session = await account.createSession(email, password);\r\n+            \r\n+            // The session is automatically handled by the Appwrite SDK\r\n+            // No need to manually set the session            // Create User Profile Document in the users collection (now authorized)            // Create User Profile Document with a unique ID\r\n+            const profileDocument = await databases.createDocument(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                ID.unique(), // Use Appwrite's ID.unique() for document ID\r\n+                {\r\n+                    user_id: user.$id, // Link profile to auth user\r\n+                    firstname: firstName,\r\n+                    lastname: lastName,\r\n+                    role: role,\r\n+                    studentID: studentId || null,\r\n+                    department: department || null,\r\n+                    email: email\r\n+                },\r\n+                [\r\n+                    Permission.read(Role.user(user.$id)),\r\n+                    Permission.write(Role.user(user.$id))\r\n+                ]\r\n+            );\r\n+\r\n+            console.log('User profile document created in Appwrite DB:', profileDocument);\r\n+\r\n+            return { authUser: user, userProfile: profileDocument };\r\n+\r\n+        } catch (error) {\r\n+            console.error('Appwrite Registration error:', error);\r\n+            if (error.code === 409) {\r\n+                 throw new Error('A user with this email already exists.');\r\n+            } else if (error.code === 400) {\r\n+                 // Appwrite gives specific messages for password/email format errors\r\n+                 throw new Error(`Registration failed: ${error.message || 'Invalid input.'}`);\r\n+            }\r\n+            // Handle other errors like network issues\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async login(email, password) {\r\n+        try {\r\n+            // Appwrite Auth Login (Create Session)\r\n+            // In the browser SDK, createEmailSession logs the user in and sets the session automatically.\r\n+            const session = await account.createEmailSession(email, password);\r\n+            console.log('User logged in successfully (Session created):', session);\r\n+\r\n+            // Get the User Account Details\r\n+            // account.get() fetches the currently logged-in user based on the active session.\r\n+            const user = await account.get();\r\n+            console.log('Current Appwrite Auth user fetched:', user);\r\n+\r\n+            if (!user) {\r\n+                 // This should rarely happen after a successful createEmailSession, but included for robustness.\r\n+                 await this.logout(); // Ensure logout if user data is missing\r\n+                 throw new Error('Login failed: Authentication successful, but user data could not be retrieved.');\r\n+            }\r\n+\r\n+            // Fetch the User's Profile from 'users' collection\r\n+            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n+            const profileResponse = await databases.listDocuments(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                [\r\n+                    // Query to find the profile where user_id equals the logged-in user's ID\r\n+                    Query.equal('user_id', user.$id),\r\n+                    // Optionally, limit to 1 result if you expect only one profile per user\r\n+                    Query.limit(1)\r\n+                ]\r\n+            );\r\n+\r\n+            const profileDocuments = profileResponse.documents;\r\n+            console.log('User profile documents fetched from Appwrite DB:', profileDocuments);\r\n+\r\n+            if (profileDocuments.length === 0) {\r\n+                 console.error('User profile document not found in Appwrite DB for user ID:', user.$id);\r\n+                 // If profile is not found, it might indicate an incomplete registration.\r\n+                 // Decide how to handle this - maybe log out or return partial data.\r\n+                 // For now, we'll log out and inform the user.\r\n+                 await this.logout();\r\n+                 throw new Error('Login failed: User profile missing. Please try registering again or contact support.');\r\n+            }\r\n+\r\n+            // Assuming one profile per user, take the first document\r\n+            const userProfile = profileDocuments[0];\r\n+\r\n+            // Return session, auth user data, and profile data\r\n+            // Note: Appwrite session handling might differ slightly from Supabase.\r\n+            // You might need to store the session token (session.providerAccessToken) in your app's state management.\r\n+            // However, createEmailSession in browser SDK usually handles session setting automatically.\r\n+            return { session: session, authUser: user, userProfile: userProfile };\r\n+\r\n+        } catch (error) {\r\n+            console.error('Appwrite Login error:', error);\r\n+            // Ensure logout on login failure\r\n+            try { await this.logout(); } catch (e) { /* ignore logout errors during login failure */ }\r\n+            // Handle specific Appwrite errors if needed (e.g., 401 for invalid credentials)\r\n+            if (error.code === 401) {\r\n+                 throw new Error('Invalid email or password.');\r\n+            }\r\n+            // Rethrow other errors\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async logout() {\r\n+        try {\r\n+            // Appwrite Auth Logout (Delete Current Session)\r\n+            // In the browser SDK, deleteSession('current') or deleteSession(sessionId)\r\n+            const result = await account.deleteSession('current'); // Deletes the 'current' active session\r\n+            console.log('User logged out successfully (Session deleted).');\r\n+            // You should also clear any stored session tokens on the client side (e.g., in localStorage, state management) if you were manually managing them.\r\n+            // Appwrite browser SDK handles session cookies/local storage automatically usually.\r\n+        } catch (error) {\r\n+            // Ignore errors if the user is already logged out or the session is invalid (e.g., 401)\r\n+            if (error.code === 401) {\r\n+                 console.log('Logout called, but no active session found (already logged out?).');\r\n+                 return;\r\n+            }\r\n+            console.error('Appwrite Logout error (non-401):', error);\r\n+            // Optionally rethrow if you want to handle other logout errors\r\n+            // throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async getCurrentUser() {\r\n+        try {\r\n+            // Get the Current Appwrite Auth User\r\n+            // account.get() checks for an active session and returns the user or throws 401.\r\n+            const user = await account.get();\r\n+            console.log('Current Appwrite Auth user fetched in getCurrentUser:', user);\r\n+\r\n+            if (!user) {\r\n+                return null; // No logged-in user or session expired/invalid\r\n+            }\r\n+\r\n+            // Fetch the User's Profile from 'users' collection\r\n+            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n+            const profileResponse = await databases.listDocuments(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                [Query.equal('user_id', user.$id)]\r\n+            );\r\n+\r\n+            const profileDocuments = profileResponse.documents;\r\n+            console.log('User profile documents fetched from Appwrite DB in getCurrentUser:', profileDocuments);\r\n+\r\n+            // Similar logic to login - handle missing profile\r\n+            if (profileDocuments.length === 0) {\r\n+                 console.warn('User profile document not found in Appwrite DB for logged-in user ID:', user.$id);\r\n+                 // Decide how to handle missing profile (e.g., log out, return partial data)\r\n+                 // For now, log out to ensure consistent state.\r\n+                 await this.logout(); // Logs out the user if their profile is somehow missing.\r\n+                 // Clear any local session storage if needed\r\n+                 // localStorage.removeItem('appwrite_session'); // Example\r\n+                 console.warn('Logged out due to missing profile in getCurrentUser.');\r\n+                 return null;\r\n+            }\r\n+\r\n+            const userProfile = profileDocuments[0]; // Get the first (and hopefully only) profile\r\n+\r\n+            // Return auth user data and profile data\r\n+            return { authUser: user, userProfile: userProfile };\r\n+\r\n+        } catch (error) {\r\n+            // Ignore 401 (Unauthorized) errors, as they likely mean the user is simply not logged in\r\n+            if (error.code === 401) {\r\n+                 console.log('getCurrentUser called, but no active session found (not logged in).');\r\n+                 return null;\r\n+            }\r\n+            console.error('Appwrite getCurrentUser error (non-401):', error);\r\n+            // Handle other potential errors (e.g., network issues) - maybe return null or partial data\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    // --- Placeholder for Profile Update (Implement as needed) ---\r\n+    // async updateUserProfile(userId, dataToUpdate) {\r\n+    //     try {\r\n+    //         // 1. Find the profile document ID for the given userId (user_id)\r\n+    //         const profileResponse = await databases.listDocuments(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             [Query.equal('user_id', userId)]\r\n+    //         );\r\n+    //         const profileDoc = profileResponse.documents[0];\r\n+    //         if (!profileDoc) throw new Error('Profile not found for update.');\r\n+    //\r\n+    //         // 2. Update the document\r\n+    //         const updatedDoc = await databases.updateDocument(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             profileDoc.$id, // Use the document's unique ID\r\n+    //             dataToUpdate // Ensure dataToUpdate matches your collection's attributes\r\n+    //         );\r\n+    //         console.log('User profile updated in Appwrite DB:', updatedDoc);\r\n+    //         return updatedDoc;\r\n+    //     } catch (error) {\r\n+    //         console.error('Appwrite updateUserProfile error:', error);\r\n+    //         throw error;\r\n+    //     }\r\n+    // }\r\n+\r\n+\r\n+    // --- Placeholder for Fetching Profile (Implement if needed elsewhere) ---\r\n+    // async getUserProfileFromDB(userId) {\r\n+    //     try {\r\n+    //         const profileResponse = await databases.listDocuments(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             [Query.equal('user_id', userId)]\r\n+    //         );\r\n+    //         const profileDoc = profileResponse.documents[0];\r\n+    //         if (!profileDoc) {\r\n+    //              console.warn('User profile not found in Appwrite DB for user ID:', userId);\r\n+    //              return null;\r\n+    //         }\r\n+    //         console.log('User profile fetched from Appwrite DB (getUserProfileFromDB):', profileDoc);\r\n+    //         return profileDoc;\r\n+    //     } catch (error) {\r\n+    //          console.error('Appwrite getUserProfileFromDB error:', error);\r\n+    //          throw error;\r\n+    //     }\r\n+    // }\r\n+}\r\n+\r\n+export const appwriteAuthService = new AppwriteAuthService();\r\n+export default appwriteAuthService; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747817160583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,250 @@\n+import { ID, Query, Permission, Role } from 'appwrite';\r\n+import { account, databases, client } from '../config/appwrite.config';\r\n+\r\n+// --- Configuration ---\r\n+const DATABASE_ID = '682cc58b003717b8f2b8'; // <-- Replace with your actual database ID (e.g. 'campus_nexus_db')\r\n+const USER_PROFILES_COLLECTION_ID = '682cc598002c2ae4ffc8'; // Use the provided users collection ID\r\n+\r\n+class AppwriteAuthService {\r\n+    async register(userData) {\r\n+        const { email, password, firstName, lastName, role, studentId, department } = userData;        try {\r\n+            const user = await account.create(\r\n+                ID.unique(),\r\n+                email,\r\n+                password,\r\n+                `${firstName} ${lastName}` // Name (optional)\r\n+            );\r\n+\r\n+            console.log('Appwrite Auth user created:', user);            // Create a session for the new user\r\n+            const session = await account.createSession(email, password);\r\n+            \r\n+            // The session is automatically handled by the Appwrite SDK\r\n+            // No need to manually set the session            // Create User Profile Document in the users collection (now authorized)            // Create User Profile Document with a unique ID\r\n+            const profileDocument = await databases.createDocument(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                ID.unique(), // Use Appwrite's ID.unique() for document ID\r\n+                {\r\n+                    user_id: user.$id, // Link profile to auth user\r\n+                    firstname: firstName,\r\n+                    lastname: lastName,\r\n+                    role: role,\r\n+                    studentID: studentId || null,\r\n+                    department: department || null,\r\n+                    email: email\r\n+                },\r\n+                [\r\n+                    Permission.read(Role.user(user.$id)),\r\n+                    Permission.write(Role.user(user.$id))\r\n+                ]\r\n+            );\r\n+\r\n+            console.log('User profile document created in Appwrite DB:', profileDocument);\r\n+\r\n+            return { authUser: user, userProfile: profileDocument };\r\n+\r\n+        } catch (error) {\r\n+            console.error('Appwrite Registration error:', error);\r\n+            if (error.code === 409) {\r\n+                 throw new Error('A user with this email already exists.');\r\n+            } else if (error.code === 400) {\r\n+                 // Appwrite gives specific messages for password/email format errors\r\n+                 throw new Error(`Registration failed: ${error.message || 'Invalid input.'}`);\r\n+            }\r\n+            // Handle other errors like network issues\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async login(email, password) {\r\n+        try {\r\n+            // Appwrite Auth Login (Create Session)\r\n+            // In the browser SDK, createEmailSession logs the user in and sets the session automatically.\r\n+            const session = await account.createEmailSession(email, password);\r\n+            console.log('User logged in successfully (Session created):', session);\r\n+\r\n+            // Get the User Account Details\r\n+            // account.get() fetches the currently logged-in user based on the active session.\r\n+            const user = await account.get();\r\n+            console.log('Current Appwrite Auth user fetched:', user);\r\n+\r\n+            if (!user) {\r\n+                 // This should rarely happen after a successful createEmailSession, but included for robustness.\r\n+                 await this.logout(); // Ensure logout if user data is missing\r\n+                 throw new Error('Login failed: Authentication successful, but user data could not be retrieved.');\r\n+            }\r\n+\r\n+            // Fetch the User's Profile from 'users' collection\r\n+            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n+            const profileResponse = await databases.listDocuments(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                [\r\n+                    // Query to find the profile where user_id equals the logged-in user's ID\r\n+                    Query.equal('user_id', user.$id),\r\n+                    // Optionally, limit to 1 result if you expect only one profile per user\r\n+                    Query.limit(1)\r\n+                ]\r\n+            );\r\n+\r\n+            const profileDocuments = profileResponse.documents;\r\n+            console.log('User profile documents fetched from Appwrite DB:', profileDocuments);\r\n+\r\n+            if (profileDocuments.length === 0) {\r\n+                 console.error('User profile document not found in Appwrite DB for user ID:', user.$id);\r\n+                 // If profile is not found, it might indicate an incomplete registration.\r\n+                 // Decide how to handle this - maybe log out or return partial data.\r\n+                 // For now, we'll log out and inform the user.\r\n+                 await this.logout();\r\n+                 throw new Error('Login failed: User profile missing. Please try registering again or contact support.');\r\n+            }\r\n+\r\n+            // Assuming one profile per user, take the first document\r\n+            const userProfile = profileDocuments[0];\r\n+\r\n+            // Return session, auth user data, and profile data\r\n+            // Note: Appwrite session handling might differ slightly from Supabase.\r\n+            // You might need to store the session token (session.providerAccessToken) in your app's state management.\r\n+            // However, createEmailSession in browser SDK usually handles session setting automatically.\r\n+            return { session: session, authUser: user, userProfile: userProfile };\r\n+\r\n+        } catch (error) {\r\n+            console.error('Appwrite Login error:', error);\r\n+            // Ensure logout on login failure\r\n+            try { await this.logout(); } catch (e) { /* ignore logout errors during login failure */ }\r\n+            // Handle specific Appwrite errors if needed (e.g., 401 for invalid credentials)\r\n+            if (error.code === 401) {\r\n+                 throw new Error('Invalid email or password.');\r\n+            }\r\n+            // Rethrow other errors\r\n+            throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async logout() {\r\n+        try {\r\n+            // Appwrite Auth Logout (Delete Current Session)\r\n+            // In the browser SDK, deleteSession('current') or deleteSession(sessionId)\r\n+            const result = await account.deleteSession('current'); // Deletes the 'current' active session\r\n+            console.log('User logged out successfully (Session deleted).');\r\n+            // You should also clear any stored session tokens on the client side (e.g., in localStorage, state management) if you were manually managing them.\r\n+            // Appwrite browser SDK handles session cookies/local storage automatically usually.\r\n+        } catch (error) {\r\n+            // Ignore errors if the user is already logged out or the session is invalid (e.g., 401)\r\n+            if (error.code === 401) {\r\n+                 console.log('Logout called, but no active session found (already logged out?).');\r\n+                 return;\r\n+            }\r\n+            console.error('Appwrite Logout error (non-401):', error);\r\n+            // Optionally rethrow if you want to handle other logout errors\r\n+            // throw error;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async getCurrentUser() {\r\n+        try {\r\n+            // Get the Current Appwrite Auth User\r\n+            // account.get() checks for an active session and returns the user or throws 401.\r\n+            const user = await account.get();\r\n+            console.log('Current Appwrite Auth user fetched in getCurrentUser:', user);\r\n+\r\n+            if (!user) {\r\n+                return null; // No logged-in user or session expired/invalid\r\n+            }\r\n+\r\n+            // Fetch the User's Profile from 'users' collection\r\n+            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n+            const profileResponse = await databases.listDocuments(\r\n+                DATABASE_ID,\r\n+                USER_PROFILES_COLLECTION_ID,\r\n+                [Query.equal('user_id', user.$id)]\r\n+            );\r\n+\r\n+            const profileDocuments = profileResponse.documents;\r\n+            console.log('User profile documents fetched from Appwrite DB in getCurrentUser:', profileDocuments);\r\n+\r\n+            // Similar logic to login - handle missing profile\r\n+            if (profileDocuments.length === 0) {\r\n+                 console.warn('User profile document not found in Appwrite DB for logged-in user ID:', user.$id);\r\n+                 // Decide how to handle missing profile (e.g., log out, return partial data)\r\n+                 // For now, log out to ensure consistent state.\r\n+                 await this.logout(); // Logs out the user if their profile is somehow missing.\r\n+                 // Clear any local session storage if needed\r\n+                 // localStorage.removeItem('appwrite_session'); // Example\r\n+                 console.warn('Logged out due to missing profile in getCurrentUser.');\r\n+                 return null;\r\n+            }\r\n+\r\n+            const userProfile = profileDocuments[0]; // Get the first (and hopefully only) profile\r\n+\r\n+            // Return auth user data and profile data\r\n+            return { authUser: user, userProfile: userProfile };\r\n+\r\n+        } catch (error) {\r\n+            // Ignore 401 (Unauthorized) errors, as they likely mean the user is simply not logged in\r\n+            if (error.code === 401) {\r\n+                 console.log('getCurrentUser called, but no active session found (not logged in).');\r\n+                 return null;\r\n+            }\r\n+            console.error('Appwrite getCurrentUser error (non-401):', error);\r\n+            // Handle other potential errors (e.g., network issues) - maybe return null or partial data\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    // --- Placeholder for Profile Update (Implement as needed) ---\r\n+    // async updateUserProfile(userId, dataToUpdate) {\r\n+    //     try {\r\n+    //         // 1. Find the profile document ID for the given userId (user_id)\r\n+    //         const profileResponse = await databases.listDocuments(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             [Query.equal('user_id', userId)]\r\n+    //         );\r\n+    //         const profileDoc = profileResponse.documents[0];\r\n+    //         if (!profileDoc) throw new Error('Profile not found for update.');\r\n+    //\r\n+    //         // 2. Update the document\r\n+    //         const updatedDoc = await databases.updateDocument(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             profileDoc.$id, // Use the document's unique ID\r\n+    //             dataToUpdate // Ensure dataToUpdate matches your collection's attributes\r\n+    //         );\r\n+    //         console.log('User profile updated in Appwrite DB:', updatedDoc);\r\n+    //         return updatedDoc;\r\n+    //     } catch (error) {\r\n+    //         console.error('Appwrite updateUserProfile error:', error);\r\n+    //         throw error;\r\n+    //     }\r\n+    // }\r\n+\r\n+\r\n+    // --- Placeholder for Fetching Profile (Implement if needed elsewhere) ---\r\n+    // async getUserProfileFromDB(userId) {\r\n+    //     try {\r\n+    //         const profileResponse = await databases.listDocuments(\r\n+    //             DATABASE_ID,\r\n+    //             USER_PROFILES_COLLECTION_ID,\r\n+    //             [Query.equal('user_id', userId)]\r\n+    //         );\r\n+    //         const profileDoc = profileResponse.documents[0];\r\n+    //         if (!profileDoc) {\r\n+    //              console.warn('User profile not found in Appwrite DB for user ID:', userId);\r\n+    //              return null;\r\n+    //         }\r\n+    //         console.log('User profile fetched from Appwrite DB (getUserProfileFromDB):', profileDoc);\r\n+    //         return profileDoc;\r\n+    //     } catch (error) {\r\n+    //          console.error('Appwrite getUserProfileFromDB error:', error);\r\n+    //          throw error;\r\n+    //     }\r\n+    // }\r\n+}\r\n+\r\n+export const appwriteAuthService = new AppwriteAuthService();\r\n+export default appwriteAuthService; \n\\ No newline at end of file\n"
                }
            ],
            "date": 1747814398479,
            "name": "Commit-0",
            "content": "import { ID, Query, Permission, Role } from 'appwrite';\r\nimport { account, databases, client } from '../config/appwrite.config';\r\n\r\n// --- Configuration ---\r\nconst DATABASE_ID = '682cc58b003717b8f2b8'; // <-- Replace with your actual database ID (e.g. 'campus_nexus_db')\r\nconst USER_PROFILES_COLLECTION_ID = '682cc598002c2ae4ffc8'; // Use the provided users collection ID\r\n\r\nclass AppwriteAuthService {\r\n    async register(userData) {\r\n        const { email, password, firstName, lastName, role, studentId, department } = userData;\r\n\r\n        try {\r\n            // Create the user account in Appwrite Auth\r\n            // In the browser SDK, create takes ID.unique() or 'unique()' string, email, password, name\r\n            const user = await account.create(\r\n                ID.unique(), // Use ID.unique() or 'unique()'\r\n                email,\r\n                password,\r\n                `${firstName} ${lastName}` // Name (optional)\r\n            );\r\n\r\n            console.log('Appwrite Auth user created:', user);            // Create a session for the new user\r\n            const session = await account.createSession(email, password);\r\n            \r\n            // The session is automatically handled by the Appwrite SDK\r\n            // No need to manually set the session\r\n\r\n            // Create User Profile Document in the users collection (now authorized)\r\n            // In the browser SDK, createDocument takes databaseId, collectionId, documentId, data, permissions (optional)\r\n            const profileDocument = await databases.createDocument(\r\n                DATABASE_ID,\r\n                USER_PROFILES_COLLECTION_ID,\r\n                ID.unique(), // Use ID.unique() or 'unique()' for document ID\r\n                {\r\n                    user_id: user.$id, // Link profile to auth user\r\n                    firstname: firstName, // Match Appwrite attribute name\r\n                    lastname: lastName,   // Match Appwrite attribute name\r\n                    role: role, // You might enforce 'student' here or via Appwrite rules\r\n                    studentID: studentId || null, // Match Appwrite attribute name\r\n                    department: department || null,\r\n                    email: email,\r\n                    // Add any other fields your profile requires\r\n                },\r\n                // Optional: Set document-level permissions\r\n                // [Permission.read(Role.user(user.$id)), Permission.write(Role.user(user.$id))]\r\n            );\r\n\r\n            console.log('User profile document created in Appwrite DB:', profileDocument);\r\n\r\n            return { authUser: user, userProfile: profileDocument };\r\n\r\n        } catch (error) {\r\n            console.error('Appwrite Registration error:', error);\r\n            if (error.code === 409) {\r\n                 throw new Error('A user with this email already exists.');\r\n            } else if (error.code === 400) {\r\n                 // Appwrite gives specific messages for password/email format errors\r\n                 throw new Error(`Registration failed: ${error.message || 'Invalid input.'}`);\r\n            }\r\n            // Handle other errors like network issues\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n    async login(email, password) {\r\n        try {\r\n            // Appwrite Auth Login (Create Session)\r\n            // In the browser SDK, createEmailSession logs the user in and sets the session automatically.\r\n            const session = await account.createEmailSession(email, password);\r\n            console.log('User logged in successfully (Session created):', session);\r\n\r\n            // Get the User Account Details\r\n            // account.get() fetches the currently logged-in user based on the active session.\r\n            const user = await account.get();\r\n            console.log('Current Appwrite Auth user fetched:', user);\r\n\r\n            if (!user) {\r\n                 // This should rarely happen after a successful createEmailSession, but included for robustness.\r\n                 await this.logout(); // Ensure logout if user data is missing\r\n                 throw new Error('Login failed: Authentication successful, but user data could not be retrieved.');\r\n            }\r\n\r\n            // Fetch the User's Profile from 'users' collection\r\n            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n            const profileResponse = await databases.listDocuments(\r\n                DATABASE_ID,\r\n                USER_PROFILES_COLLECTION_ID,\r\n                [\r\n                    // Query to find the profile where user_id equals the logged-in user's ID\r\n                    Query.equal('user_id', user.$id),\r\n                    // Optionally, limit to 1 result if you expect only one profile per user\r\n                    Query.limit(1)\r\n                ]\r\n            );\r\n\r\n            const profileDocuments = profileResponse.documents;\r\n            console.log('User profile documents fetched from Appwrite DB:', profileDocuments);\r\n\r\n            if (profileDocuments.length === 0) {\r\n                 console.error('User profile document not found in Appwrite DB for user ID:', user.$id);\r\n                 // If profile is not found, it might indicate an incomplete registration.\r\n                 // Decide how to handle this - maybe log out or return partial data.\r\n                 // For now, we'll log out and inform the user.\r\n                 await this.logout();\r\n                 throw new Error('Login failed: User profile missing. Please try registering again or contact support.');\r\n            }\r\n\r\n            // Assuming one profile per user, take the first document\r\n            const userProfile = profileDocuments[0];\r\n\r\n            // Return session, auth user data, and profile data\r\n            // Note: Appwrite session handling might differ slightly from Supabase.\r\n            // You might need to store the session token (session.providerAccessToken) in your app's state management.\r\n            // However, createEmailSession in browser SDK usually handles session setting automatically.\r\n            return { session: session, authUser: user, userProfile: userProfile };\r\n\r\n        } catch (error) {\r\n            console.error('Appwrite Login error:', error);\r\n            // Ensure logout on login failure\r\n            try { await this.logout(); } catch (e) { /* ignore logout errors during login failure */ }\r\n            // Handle specific Appwrite errors if needed (e.g., 401 for invalid credentials)\r\n            if (error.code === 401) {\r\n                 throw new Error('Invalid email or password.');\r\n            }\r\n            // Rethrow other errors\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n    async logout() {\r\n        try {\r\n            // Appwrite Auth Logout (Delete Current Session)\r\n            // In the browser SDK, deleteSession('current') or deleteSession(sessionId)\r\n            const result = await account.deleteSession('current'); // Deletes the 'current' active session\r\n            console.log('User logged out successfully (Session deleted).');\r\n            // You should also clear any stored session tokens on the client side (e.g., in localStorage, state management) if you were manually managing them.\r\n            // Appwrite browser SDK handles session cookies/local storage automatically usually.\r\n        } catch (error) {\r\n            // Ignore errors if the user is already logged out or the session is invalid (e.g., 401)\r\n            if (error.code === 401) {\r\n                 console.log('Logout called, but no active session found (already logged out?).');\r\n                 return;\r\n            }\r\n            console.error('Appwrite Logout error (non-401):', error);\r\n            // Optionally rethrow if you want to handle other logout errors\r\n            // throw error;\r\n        }\r\n    }\r\n\r\n\r\n    async getCurrentUser() {\r\n        try {\r\n            // Get the Current Appwrite Auth User\r\n            // account.get() checks for an active session and returns the user or throws 401.\r\n            const user = await account.get();\r\n            console.log('Current Appwrite Auth user fetched in getCurrentUser:', user);\r\n\r\n            if (!user) {\r\n                return null; // No logged-in user or session expired/invalid\r\n            }\r\n\r\n            // Fetch the User's Profile from 'users' collection\r\n            // listDocuments requires databaseId, collectionId, and an array of queries (optional)\r\n            const profileResponse = await databases.listDocuments(\r\n                DATABASE_ID,\r\n                USER_PROFILES_COLLECTION_ID,\r\n                [Query.equal('user_id', user.$id)]\r\n            );\r\n\r\n            const profileDocuments = profileResponse.documents;\r\n            console.log('User profile documents fetched from Appwrite DB in getCurrentUser:', profileDocuments);\r\n\r\n            // Similar logic to login - handle missing profile\r\n            if (profileDocuments.length === 0) {\r\n                 console.warn('User profile document not found in Appwrite DB for logged-in user ID:', user.$id);\r\n                 // Decide how to handle missing profile (e.g., log out, return partial data)\r\n                 // For now, log out to ensure consistent state.\r\n                 await this.logout(); // Logs out the user if their profile is somehow missing.\r\n                 // Clear any local session storage if needed\r\n                 // localStorage.removeItem('appwrite_session'); // Example\r\n                 console.warn('Logged out due to missing profile in getCurrentUser.');\r\n                 return null;\r\n            }\r\n\r\n            const userProfile = profileDocuments[0]; // Get the first (and hopefully only) profile\r\n\r\n            // Return auth user data and profile data\r\n            return { authUser: user, userProfile: userProfile };\r\n\r\n        } catch (error) {\r\n            // Ignore 401 (Unauthorized) errors, as they likely mean the user is simply not logged in\r\n            if (error.code === 401) {\r\n                 console.log('getCurrentUser called, but no active session found (not logged in).');\r\n                 return null;\r\n            }\r\n            console.error('Appwrite getCurrentUser error (non-401):', error);\r\n            // Handle other potential errors (e.g., network issues) - maybe return null or partial data\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    // --- Placeholder for Profile Update (Implement as needed) ---\r\n    // async updateUserProfile(userId, dataToUpdate) {\r\n    //     try {\r\n    //         // 1. Find the profile document ID for the given userId (user_id)\r\n    //         const profileResponse = await databases.listDocuments(\r\n    //             DATABASE_ID,\r\n    //             USER_PROFILES_COLLECTION_ID,\r\n    //             [Query.equal('user_id', userId)]\r\n    //         );\r\n    //         const profileDoc = profileResponse.documents[0];\r\n    //         if (!profileDoc) throw new Error('Profile not found for update.');\r\n    //\r\n    //         // 2. Update the document\r\n    //         const updatedDoc = await databases.updateDocument(\r\n    //             DATABASE_ID,\r\n    //             USER_PROFILES_COLLECTION_ID,\r\n    //             profileDoc.$id, // Use the document's unique ID\r\n    //             dataToUpdate // Ensure dataToUpdate matches your collection's attributes\r\n    //         );\r\n    //         console.log('User profile updated in Appwrite DB:', updatedDoc);\r\n    //         return updatedDoc;\r\n    //     } catch (error) {\r\n    //         console.error('Appwrite updateUserProfile error:', error);\r\n    //         throw error;\r\n    //     }\r\n    // }\r\n\r\n\r\n    // --- Placeholder for Fetching Profile (Implement if needed elsewhere) ---\r\n    // async getUserProfileFromDB(userId) {\r\n    //     try {\r\n    //         const profileResponse = await databases.listDocuments(\r\n    //             DATABASE_ID,\r\n    //             USER_PROFILES_COLLECTION_ID,\r\n    //             [Query.equal('user_id', userId)]\r\n    //         );\r\n    //         const profileDoc = profileResponse.documents[0];\r\n    //         if (!profileDoc) {\r\n    //              console.warn('User profile not found in Appwrite DB for user ID:', userId);\r\n    //              return null;\r\n    //         }\r\n    //         console.log('User profile fetched from Appwrite DB (getUserProfileFromDB):', profileDoc);\r\n    //         return profileDoc;\r\n    //     } catch (error) {\r\n    //          console.error('Appwrite getUserProfileFromDB error:', error);\r\n    //          throw error;\r\n    //     }\r\n    // }\r\n}\r\n\r\nexport const appwriteAuthService = new AppwriteAuthService();\r\nexport default appwriteAuthService; "
        }
    ]
}