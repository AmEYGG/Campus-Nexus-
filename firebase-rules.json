{
  "rules": {
    ".read": "auth != null",
    ".write": false,
    "applications": {
      "$category": {
        ".indexOn": ["userId", "status", "createdAt"],
        ".read": "auth != null",
        ".write": "auth != null",
        "$applicationId": {
          ".validate": "newData.hasChildren(['userId', 'type', 'category', 'createdAt'])",
          ".read": "auth != null && (newData.child('userId').val() === auth.uid || data.child('userId').val() === auth.uid || root.child('admins').child(auth.uid).exists() || root.child('faculty').child(auth.uid).exists())",
          ".write": "auth != null && ((!data.exists() && newData.child('userId').val() === auth.uid) || (data.exists() && (data.child('userId').val() === auth.uid || root.child('admins').child(auth.uid).exists() || root.child('faculty').child(auth.uid).exists())))"
        }
      }
    },
    "complaintRequests": {
      ".indexOn": ["studentId", "status", "submittedAt"],
      ".read": "auth != null",
      ".write": "auth != null",
      "$complaintId": {
        ".read": "auth != null && (data.child('studentId').val() === auth.uid || root.child('faculty').child(auth.uid).exists() || root.child('admins').child(auth.uid).exists())",
        ".write": "auth != null && ((!data.exists() && newData.child('studentId').val() === auth.uid) || (data.exists() && (data.child('studentId').val() === auth.uid || root.child('faculty').child(auth.uid).exists() || root.child('admins').child(auth.uid).exists())))",
        ".validate": "newData.hasChildren(['studentId', 'subject', 'description', 'status', 'category', 'priority'])"
      }
    },
    "notifications": {
      "$userId": {
        ".indexOn": ["createdAt", "read"],
        ".read": "auth != null && ($userId === auth.uid || root.child('faculty').child(auth.uid).exists() || root.child('admins').child(auth.uid).exists())",
        ".write": "auth != null && ($userId === auth.uid || root.child('faculty').child(auth.uid).exists() || root.child('admins').child(auth.uid).exists())",
        "$notificationId": {
          ".validate": "newData.hasChildren(['type', 'message', 'createdAt'])"
        }
      },
      "users": {
        "$userId": {
          ".indexOn": ["createdAt", "status", "type"],
          ".read": "auth != null && $userId === auth.uid",
          ".write": "auth != null && ($userId === auth.uid || root.child('admins').child(auth.uid).exists() || root.child('faculty').child(auth.uid).exists())",
          "$notificationId": {
            ".validate": "newData.hasChildren(['type', 'createdAt'])"
          }
        }
      },
      "admin": {
        ".indexOn": ["createdAt", "status", "type"],
        ".read": "auth != null && (root.child('admins').child(auth.uid).exists() || root.child('faculty').child(auth.uid).exists())",
        ".write": "auth != null && (root.child('admins').child(auth.uid).exists() || root.child('faculty').child(auth.uid).exists())"
      }
    },
    "admins": {
      "$uid": {
        ".read": "auth != null && ($uid === auth.uid || root.child('admins').child(auth.uid).exists())",
        ".write": "auth != null && root.child('admins').child(auth.uid).exists()"
      }
    },
    "faculty": {
      "$uid": {
        ".read": "auth != null && ($uid === auth.uid || root.child('admins').child(auth.uid).exists())",
        ".write": "auth != null && (root.child('admins').child(auth.uid).exists() || $uid === auth.uid)"
      }
    },
    "roles": {
      "$uid": {
        ".read": "auth != null && $uid === auth.uid",
        ".write": "auth != null && root.child('admins').child(auth.uid).exists()"
      }
    },
    "adminActionLogs": {
      "$adminUid": {
        ".indexOn": ["timestamp", "actionType"],
        ".read": "auth != null && ($adminUid === auth.uid || root.child('admins').child(auth.uid).exists())",
        ".write": "auth != null && $adminUid === auth.uid && root.child('admins').child(auth.uid).exists()"
      }
    },
    "facultyActionLogs": {
      "$facultyUid": {
        ".indexOn": ["timestamp", "actionType"],
        ".read": "auth != null && ($facultyUid === auth.uid || root.child('admins').child(auth.uid).exists())",
        ".write": "auth != null && $facultyUid === auth.uid && root.child('faculty').child(auth.uid).exists()"
      }
    }
  }
} 